/* Generated by Cython 0.18 on Thu Jul  4 11:13:08 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__cynest__kernel
#define __PYX_HAVE_API__cynest__kernel
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "stdio.h"
#include "pythread.h"
#include "psignal.h"
#include "datum.h"
#include "namedatum.h"
#include "token.h"
#include "datumtopythonconverter.h"
#include "cynestkernel.h"
#include "buffer.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "kernel.pyx",
  "dynamicneuronssync.pyx",
  "datamanager.pyx",
  "stringsource",
  "stringsource",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_6cynest_6kernel_NESTEngine;
struct __pyx_obj_6cynest_6kernel_StandardParams;
struct __pyx_obj_6cynest_6kernel_DataConverter;
struct PyToken;
struct __pyx_obj_6cynest_6kernel_NameDatum;
struct __pyx_obj_6cynest_6kernel_CythonEntry;
struct __pyx_obj_6cynest_6kernel_SLIDataContainer;
struct __pyx_obj_6cynest_6kernel_SpecialFunctions;

/* "cynest/kernel.pyx":35
 * 
 * 
 * cdef class NESTEngine:             # <<<<<<<<<<<<<<
 *     cdef classes.NESTEngine *thisptr
 *     cdef SLIDataContainer sli_container
 */
struct __pyx_obj_6cynest_6kernel_NESTEngine {
  PyObject_HEAD
  struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *__pyx_vtab;
  NESTEngine *thisptr;
  struct __pyx_obj_6cynest_6kernel_SLIDataContainer *sli_container;
  int _protected;
};


/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":63
 * 
 * # Class for storing the pointer to Standard Parameters
 * cdef class StandardParams:             # <<<<<<<<<<<<<<
 *     cdef long* spike
 *     cdef double* in_spikes
 */
struct __pyx_obj_6cynest_6kernel_StandardParams {
  PyObject_HEAD
  struct __pyx_vtabstruct_6cynest_6kernel_StandardParams *__pyx_vtab;
  long *spike;
  double *in_spikes;
  double *ex_spikes;
  double *currents;
  long *lag;
};


/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":11
 * 
 * # This class is useful for converting Datum into python objects and vice-versa
 * cdef class DataConverter:             # <<<<<<<<<<<<<<
 *     cdef classes.DatumToPythonConverter *dTp
 *     cdef classes.NESTEngine *pTd
 */
struct __pyx_obj_6cynest_6kernel_DataConverter {
  PyObject_HEAD
  struct __pyx_vtabstruct_6cynest_6kernel_DataConverter *__pyx_vtab;
  DatumToPythonConverter *dTp;
  NESTEngine *pTd;
};


/* "cynest/kernel.pyx":15
 * cimport classes
 * 
 * cdef public class PyToken[object PyToken, type PyTokenType]:             # <<<<<<<<<<<<<<
 *      """
 *      Python wrapper of SLI's Token class.
 */
struct PyToken {
  PyObject_HEAD
  Token *thisptr;
};

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyTokenType;

/* "cynest/kernel.pyx":350
 * 
 * 
 * cdef class NameDatum:             # <<<<<<<<<<<<<<
 *      """
 *      Python wrapper of SLI's NameDatum class.
 */
struct __pyx_obj_6cynest_6kernel_NameDatum {
  PyObject_HEAD
  NameDatum *thisptr;
};


/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":88
 * 
 * # this class represents the entry point with which the cython_neuron.cpp class can access to the cython side
 * cdef class CythonEntry:             # <<<<<<<<<<<<<<
 *     cdef classes.CythonEntry *thisptr
 *     def __cinit__(self):
 */
struct __pyx_obj_6cynest_6kernel_CythonEntry {
  PyObject_HEAD
  struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *__pyx_vtab;
  CythonEntry *thisptr;
};


/* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":7
 * cdef bytes composed_unprotected_cmd = "<+*-_Composed Unprotected Command_-*+>".encode('UTF-8')
 * 
 * cdef class SLIDataContainer:             # <<<<<<<<<<<<<<
 *     cdef classes.NESTEngine *nest_engine
 *     cdef commands
 */
struct __pyx_obj_6cynest_6kernel_SLIDataContainer {
  PyObject_HEAD
  struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *__pyx_vtab;
  NESTEngine *nest_engine;
  PyObject *commands;
};


/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":37
 * # modelsFolder has been put into that class otherwise it's not persistent
 * # during the execution.
 * cdef class SpecialFunctions:             # <<<<<<<<<<<<<<
 *     cdef classes.SpecialFunctions *thisptr
 *     cdef string modelsFolder
 */
struct __pyx_obj_6cynest_6kernel_SpecialFunctions {
  PyObject_HEAD
  struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *__pyx_vtab;
  SpecialFunctions *thisptr;
  std::string modelsFolder;
};



/* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":7
 * cdef bytes composed_unprotected_cmd = "<+*-_Composed Unprotected Command_-*+>".encode('UTF-8')
 * 
 * cdef class SLIDataContainer:             # <<<<<<<<<<<<<<
 *     cdef classes.NESTEngine *nest_engine
 *     cdef commands
 */

struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer {
  PyObject *(*initialize)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, NESTEngine *);
  struct PyToken *(*generate_func_pytoken)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *);
  struct PyToken *(*generate_arg_pytoken)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *);
  int (*add_command)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *);
  struct PyToken *(*get_pytoken)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *);
  PyObject *(*run)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *);
};
static struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *__pyx_vtabptr_6cynest_6kernel_SLIDataContainer;


/* "cynest/kernel.pyx":35
 * 
 * 
 * cdef class NESTEngine:             # <<<<<<<<<<<<<<
 *     cdef classes.NESTEngine *thisptr
 *     cdef SLIDataContainer sli_container
 */

struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine {
  PyObject *(*run_pytoken)(struct __pyx_obj_6cynest_6kernel_NESTEngine *, struct PyToken *, int __pyx_skip_dispatch);
  PyObject *(*push_pytoken)(struct __pyx_obj_6cynest_6kernel_NESTEngine *, struct PyToken *, int __pyx_skip_dispatch);
  PyObject *(*data_connect2)(struct __pyx_obj_6cynest_6kernel_NESTEngine *, PyObject *, PyObject *, std::string, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *__pyx_vtabptr_6cynest_6kernel_NESTEngine;


/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":63
 * 
 * # Class for storing the pointer to Standard Parameters
 * cdef class StandardParams:             # <<<<<<<<<<<<<<
 *     cdef long* spike
 *     cdef double* in_spikes
 */

struct __pyx_vtabstruct_6cynest_6kernel_StandardParams {
  void (*setStdVars)(struct __pyx_obj_6cynest_6kernel_StandardParams *, long *, double *, double *, double *, long *);
};
static struct __pyx_vtabstruct_6cynest_6kernel_StandardParams *__pyx_vtabptr_6cynest_6kernel_StandardParams;


/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":37
 * # modelsFolder has been put into that class otherwise it's not persistent
 * # during the execution.
 * cdef class SpecialFunctions:             # <<<<<<<<<<<<<<
 *     cdef classes.SpecialFunctions *thisptr
 *     cdef string modelsFolder
 */

struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions {
  double (*get_ms)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *, int, long, double);
  long (*get_tics_or_steps)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *, int, int, long, double);
  unsigned int (*get_scheduler_value)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *, int, unsigned int);
  void (*setModelsFolder)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *, std::string);
  std::string (*getModelsFolder)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *);
};
static struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *__pyx_vtabptr_6cynest_6kernel_SpecialFunctions;


/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":11
 * 
 * # This class is useful for converting Datum into python objects and vice-versa
 * cdef class DataConverter:             # <<<<<<<<<<<<<<
 *     cdef classes.DatumToPythonConverter *dTp
 *     cdef classes.NESTEngine *pTd
 */

struct __pyx_vtabstruct_6cynest_6kernel_DataConverter {
  PyObject *(*datumToObject)(struct __pyx_obj_6cynest_6kernel_DataConverter *, Datum *);
  Datum *(*objectToDatum)(struct __pyx_obj_6cynest_6kernel_DataConverter *, PyObject *);
  void (*updateDictionary)(struct __pyx_obj_6cynest_6kernel_DataConverter *, Datum *, Datum *);
};
static struct __pyx_vtabstruct_6cynest_6kernel_DataConverter *__pyx_vtabptr_6cynest_6kernel_DataConverter;


/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":88
 * 
 * # this class represents the entry point with which the cython_neuron.cpp class can access to the cython side
 * cdef class CythonEntry:             # <<<<<<<<<<<<<<
 *     cdef classes.CythonEntry *thisptr
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry {
  void (*putInit)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *);
  void *(*getInit)(struct __pyx_obj_6cynest_6kernel_CythonEntry *);
  void (*putCalibrate)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *);
  void *(*getCalibrate)(struct __pyx_obj_6cynest_6kernel_CythonEntry *);
  void (*putUpdate)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *);
  void *(*getUpdate)(struct __pyx_obj_6cynest_6kernel_CythonEntry *);
  void (*putSetStatus)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *);
  void *(*getSetStatus)(struct __pyx_obj_6cynest_6kernel_CythonEntry *);
  void (*putGetStatus)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *);
  void *(*getGetStatus)(struct __pyx_obj_6cynest_6kernel_CythonEntry *);
  void (*putStdVars)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *);
  void *(*getStdVars)(struct __pyx_obj_6cynest_6kernel_CythonEntry *);
  void (*putDestroy)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *);
  void *(*getDestroy)(struct __pyx_obj_6cynest_6kernel_CythonEntry *);
  void (*registerNeurons)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, std::string);
};
static struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *__pyx_vtabptr_6cynest_6kernel_CythonEntry;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
        PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
        PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (PyList_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {  /* inlined PySequence_GetItem() */
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (unlikely(l < 0)) return NULL;
                i += l;
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(PyList_Append(L, x) < 0)) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    } else {
        PyObject *r, *m;
        m = __Pyx_GetAttrString(L, "append");
        if (!m) return NULL;
        r = PyObject_CallFunctionObjArgs(m, x, NULL);
        Py_DECREF(m);
        return r;
    }
}

#define __Pyx_SetItemInt(o, i, v, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_SetItemInt_Fast(o, i, v) : \
                                                    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (PyList_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {  /* inlined PySequence_SetItem() */
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (unlikely(l < 0)) return -1;
                i += l;
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (PySequence_Check(o) && !PyDict_Check(o)) {
#else
    if (PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyObject_Pop(PyObject* L) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02040000
    if (likely(PyList_CheckExact(L))
        && likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        Py_SIZE(L) -= 1;
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
#if PY_VERSION_HEX >= 0x02050000
    else if (Py_TYPE(L) == (&PySet_Type)) {
        return PySet_Pop(L);
    }
#endif
#endif
    return PyObject_CallMethod(L, (char*)"pop", NULL);
}

#include <new>

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *qualname, PyObject *modname); /*proto*/

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
    int flags;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj; /* No-args super() class cell */
    void *defaults;
    int defaults_pyobjects;
    PyObject *defaults_tuple; /* Const defaults tuple */
    PyObject *(*defaults_getter)(PyObject *);
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self, PyObject *module,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static int __Pyx_CyFunction_init(void);

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name);

static PyObject* __Pyx_Globals(void); /*proto*/

static PyObject* __Pyx_PyExec3(PyObject*, PyObject*, PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject*, PyObject*);

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'classes' */

/* Module declarations from 'cynest.kernel' */
static PyTypeObject *__pyx_ptype_6cynest_6kernel_PyToken = 0;
static PyTypeObject *__pyx_ptype_6cynest_6kernel_DataConverter = 0;
static PyTypeObject *__pyx_ptype_6cynest_6kernel_SpecialFunctions = 0;
static PyTypeObject *__pyx_ptype_6cynest_6kernel_StandardParams = 0;
static PyTypeObject *__pyx_ptype_6cynest_6kernel_CythonEntry = 0;
static PyTypeObject *__pyx_ptype_6cynest_6kernel_SLIDataContainer = 0;
static PyTypeObject *__pyx_ptype_6cynest_6kernel_NESTEngine = 0;
static PyTypeObject *__pyx_ptype_6cynest_6kernel_NameDatum = 0;
static struct __pyx_obj_6cynest_6kernel_DataConverter *__pyx_v_6cynest_6kernel_converter = 0;
static struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_6cynest_6kernel_spFct = 0;
static PyObject *__pyx_v_6cynest_6kernel_stdParams = 0;
static PyObject *__pyx_v_6cynest_6kernel_invalid_cmd = 0;
static PyObject *__pyx_v_6cynest_6kernel_composed_protected_cmd = 0;
static PyObject *__pyx_v_6cynest_6kernel_composed_unprotected_cmd = 0;
static void __pyx_f_6cynest_6kernel_setModelsFolder(PyObject *); /*proto*/
static void __pyx_f_6cynest_6kernel_setNeuronMembers(PyObject *, int, Datum *); /*proto*/
static void __pyx_f_6cynest_6kernel_retrieveNeuronMembers(PyObject *, int, Datum *); /*proto*/
static void __pyx_f_6cynest_6kernel_cUpdate(std::string, int); /*proto*/
static int __pyx_f_6cynest_6kernel_cInit(std::string, Datum *); /*proto*/
static void __pyx_f_6cynest_6kernel_cCalibrate(std::string, int, Datum *); /*proto*/
static void __pyx_f_6cynest_6kernel_cSetStatus(std::string, int, Datum *); /*proto*/
static void __pyx_f_6cynest_6kernel_cGetStatus(std::string, int, Datum *); /*proto*/
static void __pyx_f_6cynest_6kernel_cStdVars(std::string, int, long *, double *, double *, double *, long *); /*proto*/
static void __pyx_f_6cynest_6kernel_cDestroy(std::string, int); /*proto*/
__PYX_EXTERN_C DL_EXPORT(PyObject) *Token_to_PyObject(Token *); /*proto*/
static std::string __pyx_convert_string_from_py_(PyObject *); /*proto*/
static PyObject *__pyx_convert_string_to_py_(const std::string &); /*proto*/
static std::vector<std::string> __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "cynest.kernel"
int __pyx_module_is_main_cynest__kernel = 0;

/* Implementation of 'cynest.kernel' */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_KeyboardInterrupt;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_pf_6cynest_6kernel_9NESTError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_msg); /* proto */
static void __pyx_pf_6cynest_6kernel_7PyToken___dealloc__(struct PyToken *__pyx_v_self); /* proto */
static int __pyx_pf_6cynest_6kernel_13DataConverter___cinit__(struct __pyx_obj_6cynest_6kernel_DataConverter *__pyx_v_self); /* proto */
static void __pyx_pf_6cynest_6kernel_13DataConverter_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_DataConverter *__pyx_v_self); /* proto */
static int __pyx_pf_6cynest_6kernel_16SpecialFunctions___cinit__(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_self); /* proto */
static void __pyx_pf_6cynest_6kernel_16SpecialFunctions_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_self); /* proto */
static int __pyx_pf_6cynest_6kernel_14StandardParams___cinit__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_StandardParams *__pyx_v_self); /* proto */
static void __pyx_pf_6cynest_6kernel_14StandardParams_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_StandardParams *__pyx_v_self); /* proto */
static int __pyx_pf_6cynest_6kernel_11CythonEntry___cinit__(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self); /* proto */
static void __pyx_pf_6cynest_6kernel_11CythonEntry_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_get_ms(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_arg3); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_2get_tics_or_steps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_arg3, PyObject *__pyx_v_arg4); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_4get_scheduler_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_6returnNeuronName(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cmd); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_8getDynamicNeuronsName(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10loadNewNeuron(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_12processNeuronCreation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cmd); /* proto */
static int __pyx_pf_6cynest_6kernel_16SLIDataContainer___cinit__(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_14cynest_signal_handler(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_signal, CYTHON_UNUSED PyObject *__pyx_v_frame); /* proto */
static int __pyx_pf_6cynest_6kernel_10NESTEngine___cinit__(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self); /* proto */
static void __pyx_pf_6cynest_6kernel_10NESTEngine_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_4run_protected(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_6init(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_argv, PyObject *__pyx_v_modulepath); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_8push(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_10pop(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_12run(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_14run_pytoken(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, struct PyToken *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_16pop_pytoken(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_18push_pytoken(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, struct PyToken *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_20push_connections(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_connectome); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_22check_engine(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_24convergent_connect(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_post, PyObject *__pyx_v_weight, PyObject *__pyx_v_delay, PyObject *__pyx_v_model); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_26divergent_connect(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_post, PyObject *__pyx_v_weight, PyObject *__pyx_v_delay, PyObject *__pyx_v_model); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_28data_connect1(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_params, std::string __pyx_v_model); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_30data_connect2(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_params, std::string __pyx_v_model); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_32random_convergent_connect(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_post, PyObject *__pyx_v_n, PyObject *__pyx_v_weight, PyObject *__pyx_v_delay, PyObject *__pyx_v_model, PyObject *__pyx_v_options); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_34random_divergent_connect(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_post, PyObject *__pyx_v_n, PyObject *__pyx_v_weight, PyObject *__pyx_v_delay, PyObject *__pyx_v_model, PyObject *__pyx_v_options); /* proto */
static int __pyx_pf_6cynest_6kernel_9NameDatum___cinit__(struct __pyx_obj_6cynest_6kernel_NameDatum *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static void __pyx_pf_6cynest_6kernel_9NameDatum_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_NameDatum *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_9NameDatum_4as_PyToken(struct __pyx_obj_6cynest_6kernel_NameDatum *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6cynest_6kernel_9NameDatum_6str(struct __pyx_obj_6cynest_6kernel_NameDatum *__pyx_v_self); /* proto */
static char __pyx_k_1[] = "^{ /(.+?) .*Create }.*$";
static char __pyx_k_3[] = "";
static char __pyx_k_4[] = ".so";
static char __pyx_k_5[] = "/";
static char __pyx_k_6[] = "libc.init";
static char __pyx_k_7[] = "()";
static char __pyx_k_8[] = "getschedulervalueFCT";
static char __pyx_k_9[] = "getDynamicNeuronsName";
static char __pyx_k_10[] = "UTF-8";
static char __pyx_k_18[] = " lookup";
static char __pyx_k_19[] = "/ajvehwlksjdbjds ";
static char __pyx_k_20[] = " def";
static char __pyx_k_21[] = "/ajvehwlksjdbjds lookup";
static char __pyx_k_22[] = "^{ (.+?) } runprotected$";
static char __pyx_k_25[] = "^[^ /]+$";
static char __pyx_k_26[] = "CyNEST says good bye.";
static char __pyx_k_29[] = "cynest_signal_handler";
static char __pyx_k_31[] = "Cannot generate PyToken for the following command: ";
static char __pyx_k_32[] = "\nThe command will be executed in standard mode.";
static char __pyx_k_33[] = "processNeuronCreation";
static char __pyx_k_34[] = "Cannot push empty PyToken.";
static char __pyx_k_38[] = "/%s";
static char __pyx_k_40[] = "weight must be a float, or sequence of floats of length 1 or len(pre)";
static char __pyx_k_42[] = "delay must be a float, or sequence of floats of length 1 or len(pre)";
static char __pyx_k_44[] = "Both 'weight' and 'delay' have to be given.";
static char __pyx_k_49[] = "weight must be a float, or sequence of floats of length 1 or len(post)";
static char __pyx_k_51[] = "delay must be a float, or sequence of floats of length 1 or len(post)";
static char __pyx_k_54[] = "DataConnect_i_dict_s";
static char __pyx_k_61[] = "/%s get";
static char __pyx_k_62[] = "/RandomConvergentConnect";
static char __pyx_k_64[] = "/m Set /n Set /pre Set { pre exch n m RandomConvergentConnect } forall";
static char __pyx_k_65[] = "weight must be a float, or sequence of floats of length 1 or n";
static char __pyx_k_67[] = "delay must be a float, or sequence of floats of length 1 or n";
static char __pyx_k_69[] = "/m Set /d Set /w Set /n Set /pre Set { pre exch n w d m RandomConvergentConnect } forall";
static char __pyx_k_71[] = "/RandomDivergentConnect";
static char __pyx_k_73[] = "/m Set /n Set /post Set { n post m RandomDivergentConnect } forall";
static char __pyx_k_76[] = "/m Set /d Set /w Set /n Set /post Set { n post w d m RandomDivergentConnect } forall";
static char __pyx_k_81[] = "/home/jonny/Programs/nest/nest-cynest/cynest/kernel.pyx";
static char __pyx_k_82[] = "NESTError.__init__";
static char __pyx_k_83[] = "cynest.kernel";
static char __pyx_k_84[] = "*";
static char __pyx_k_87[] = "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx";
static char __pyx_k__m[] = "m";
static char __pyx_k__n[] = "n";
static char __pyx_k_100[] = "<+*-_Invalid Command_-*+>";
static char __pyx_k_102[] = "<+*-_Composed Protected Command_-*+>";
static char __pyx_k_104[] = "<+*-_Composed Unprotected Command_-*+>";
static char __pyx_k__cD[] = "cD";
static char __pyx_k__lI[] = "lI";
static char __pyx_k__os[] = "os";
static char __pyx_k__re[] = "re";
static char __pyx_k__sI[] = "sI";
static char __pyx_k__so[] = "so";
static char __pyx_k__bin[] = "bin";
static char __pyx_k__cDR[] = "cDR";
static char __pyx_k__cmd[] = "cmd";
static char __pyx_k__esD[] = "esD";
static char __pyx_k__isD[] = "isD";
static char __pyx_k__lIR[] = "lIR";
static char __pyx_k__lib[] = "lib";
static char __pyx_k__msg[] = "msg";
static char __pyx_k__pre[] = "pre";
static char __pyx_k__run[] = "run";
static char __pyx_k__sIR[] = "sIR";
static char __pyx_k__sep[] = "sep";
static char __pyx_k__sys[] = "sys";
static char __pyx_k__zip[] = "zip";
static char __pyx_k__arg1[] = "arg1";
static char __pyx_k__arg2[] = "arg2";
static char __pyx_k__arg3[] = "arg3";
static char __pyx_k__arg4[] = "arg4";
static char __pyx_k__argv[] = "argv";
static char __pyx_k__esDR[] = "esDR";
static char __pyx_k__isDR[] = "isDR";
static char __pyx_k__libc[] = "libc";
static char __pyx_k__name[] = "name";
static char __pyx_k__path[] = "path";
static char __pyx_k__post[] = "post";
static char __pyx_k__push[] = "push";
static char __pyx_k__self[] = "self";
static char __pyx_k__PyDLL[] = "PyDLL";
static char __pyx_k__byref[] = "byref";
static char __pyx_k__c_int[] = "c_int";
static char __pyx_k__delay[] = "delay";
static char __pyx_k__errno[] = "errno";
static char __pyx_k__frame[] = "frame";
static char __pyx_k__group[] = "group";
static char __pyx_k__isdir[] = "isdir";
static char __pyx_k__match[] = "match";
static char __pyx_k__model[] = "model";
static char __pyx_k__nList[] = "nList";
static char __pyx_k__share[] = "share";
static char __pyx_k__split[] = "split";
static char __pyx_k__value[] = "value";
static char __pyx_k__EEXIST[] = "EEXIST";
static char __pyx_k__SIGINT[] = "SIGINT";
static char __pyx_k__c_long[] = "c_long";
static char __pyx_k__c_uint[] = "c_uint";
static char __pyx_k__ctypes[] = "ctypes";
static char __pyx_k__cynest[] = "cynest";
static char __pyx_k__encode[] = "encode";
static char __pyx_k__get_ms[] = "get_ms";
static char __pyx_k__listSo[] = "listSo";
static char __pyx_k__params[] = "params";
static char __pyx_k__search[] = "search";
static char __pyx_k__signal[] = "signal";
static char __pyx_k__target[] = "target";
static char __pyx_k__update[] = "update";
static char __pyx_k__weight[] = "weight";
static char __pyx_k__OSError[] = "OSError";
static char __pyx_k__destroy[] = "destroy";
static char __pyx_k__dirname[] = "dirname";
static char __pyx_k__has_key[] = "has_key";
static char __pyx_k__include[] = "include";
static char __pyx_k__listdir[] = "listdir";
static char __pyx_k__litconv[] = "litconv";
static char __pyx_k__options[] = "options";
static char __pyx_k__restype[] = "restype";
static char __pyx_k____file__[] = "__file__";
static char __pyx_k____init__[] = "__init__";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__argtypes[] = "argtypes";
static char __pyx_k__c_double[] = "c_double";
static char __pyx_k__c_void_p[] = "c_void_p";
static char __pyx_k__getmsFCT[] = "getmsFCT";
static char __pyx_k__makedirs[] = "makedirs";
static char __pyx_k__realpath[] = "realpath";
static char __pyx_k__sli_func[] = "sli_func";
static char __pyx_k__CFUNCTYPE[] = "CFUNCTYPE";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k__GETMSFUNC[] = "GETMSFUNC";
static char __pyx_k__NESTError[] = "NESTError";
static char __pyx_k__broadcast[] = "broadcast";
static char __pyx_k__calibrate[] = "calibrate";
static char __pyx_k__getStatus[] = "getStatus";
static char __pyx_k__py_object[] = "py_object";
static char __pyx_k__setStatus[] = "setStatus";
static char __pyx_k__GetOptions[] = "GetOptions";
static char __pyx_k__SetOptions[] = "SetOptions";
static char __pyx_k__getStdVars[] = "getStdVars";
static char __pyx_k__modulepath[] = "modulepath";
static char __pyx_k__setStdVars[] = "setStdVars";
static char __pyx_k__run_pytoken[] = "run_pytoken";
static char __pyx_k__synapsedict[] = "synapsedict";
static char __pyx_k__createNeuron[] = "createNeuron";
static char __pyx_k__getNbNeurons[] = "getNbNeurons";
static char __pyx_k__push_pytoken[] = "push_pytoken";
static char __pyx_k__Connect_i_D_i[] = "Connect_i_D_i";
static char __pyx_k__cython_models[] = "cython_models";
static char __pyx_k__data_connect2[] = "data_connect2";
static char __pyx_k__loadNewNeuron[] = "loadNewNeuron";
static char __pyx_k__loadedNeurons[] = "loadedNeurons";
static char __pyx_k__DefaultOptions[] = "DefaultOptions";
static char __pyx_k__getNeuronParams[] = "getNeuronParams";
static char __pyx_k__setNeuronParams[] = "setNeuronParams";
static char __pyx_k__DivergentConnect[] = "DivergentConnect";
static char __pyx_k__returnNeuronName[] = "returnNeuronName";
static char __pyx_k__ConvergentConnect[] = "ConvergentConnect";
static char __pyx_k__GETSCHEDULERVALUE[] = "GETSCHEDULERVALUE";
static char __pyx_k__KeyboardInterrupt[] = "KeyboardInterrupt";
static char __pyx_k__get_tics_or_steps[] = "get_tics_or_steps";
static char __pyx_k__getticsorstepsFCT[] = "getticsorstepsFCT";
static char __pyx_k__GETTICSORSTEPSFUNC[] = "GETTICSORSTEPSFUNC";
static char __pyx_k__get_scheduler_value[] = "get_scheduler_value";
static char __pyx_k__putSpecialFunctions[] = "putSpecialFunctions";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_100;
static PyObject *__pyx_kp_s_102;
static PyObject *__pyx_kp_s_104;
static PyObject *__pyx_kp_s_18;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_kp_s_20;
static PyObject *__pyx_kp_b_21;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_25;
static PyObject *__pyx_kp_s_26;
static PyObject *__pyx_n_s_29;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_31;
static PyObject *__pyx_kp_s_32;
static PyObject *__pyx_n_s_33;
static PyObject *__pyx_kp_s_34;
static PyObject *__pyx_kp_s_38;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_40;
static PyObject *__pyx_kp_s_42;
static PyObject *__pyx_kp_s_44;
static PyObject *__pyx_kp_s_49;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_51;
static PyObject *__pyx_n_s_54;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_61;
static PyObject *__pyx_kp_s_62;
static PyObject *__pyx_kp_s_64;
static PyObject *__pyx_kp_s_65;
static PyObject *__pyx_kp_s_67;
static PyObject *__pyx_kp_s_69;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_71;
static PyObject *__pyx_kp_s_73;
static PyObject *__pyx_kp_s_76;
static PyObject *__pyx_n_s_8;
static PyObject *__pyx_kp_s_81;
static PyObject *__pyx_n_s_82;
static PyObject *__pyx_n_s_83;
static PyObject *__pyx_n_s_84;
static PyObject *__pyx_kp_s_87;
static PyObject *__pyx_n_s_9;
static PyObject *__pyx_n_s__CFUNCTYPE;
static PyObject *__pyx_n_s__Connect_i_D_i;
static PyObject *__pyx_n_s__ConvergentConnect;
static PyObject *__pyx_n_s__DefaultOptions;
static PyObject *__pyx_n_s__DivergentConnect;
static PyObject *__pyx_n_s__EEXIST;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__GETMSFUNC;
static PyObject *__pyx_n_s__GETSCHEDULERVALUE;
static PyObject *__pyx_n_s__GETTICSORSTEPSFUNC;
static PyObject *__pyx_n_s__GetOptions;
static PyObject *__pyx_n_s__KeyboardInterrupt;
static PyObject *__pyx_n_s__NESTError;
static PyObject *__pyx_n_s__OSError;
static PyObject *__pyx_n_s__PyDLL;
static PyObject *__pyx_n_s__SIGINT;
static PyObject *__pyx_n_s__SetOptions;
static PyObject *__pyx_n_s____file__;
static PyObject *__pyx_n_s____init__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__arg1;
static PyObject *__pyx_n_s__arg2;
static PyObject *__pyx_n_s__arg3;
static PyObject *__pyx_n_s__arg4;
static PyObject *__pyx_n_s__argtypes;
static PyObject *__pyx_n_s__argv;
static PyObject *__pyx_n_s__bin;
static PyObject *__pyx_n_s__broadcast;
static PyObject *__pyx_n_s__byref;
static PyObject *__pyx_n_s__cD;
static PyObject *__pyx_n_s__cDR;
static PyObject *__pyx_n_s__c_double;
static PyObject *__pyx_n_s__c_int;
static PyObject *__pyx_n_s__c_long;
static PyObject *__pyx_n_s__c_uint;
static PyObject *__pyx_n_s__c_void_p;
static PyObject *__pyx_n_s__calibrate;
static PyObject *__pyx_n_s__cmd;
static PyObject *__pyx_n_s__createNeuron;
static PyObject *__pyx_n_s__ctypes;
static PyObject *__pyx_n_s__cynest;
static PyObject *__pyx_n_s__cython_models;
static PyObject *__pyx_n_s__data_connect2;
static PyObject *__pyx_n_s__delay;
static PyObject *__pyx_n_s__destroy;
static PyObject *__pyx_n_s__dirname;
static PyObject *__pyx_n_s__encode;
static PyObject *__pyx_n_s__errno;
static PyObject *__pyx_n_s__esD;
static PyObject *__pyx_n_s__esDR;
static PyObject *__pyx_n_s__frame;
static PyObject *__pyx_n_s__getNbNeurons;
static PyObject *__pyx_n_s__getNeuronParams;
static PyObject *__pyx_n_s__getStatus;
static PyObject *__pyx_n_s__getStdVars;
static PyObject *__pyx_n_s__get_ms;
static PyObject *__pyx_n_s__get_scheduler_value;
static PyObject *__pyx_n_s__get_tics_or_steps;
static PyObject *__pyx_n_s__getmsFCT;
static PyObject *__pyx_n_s__getticsorstepsFCT;
static PyObject *__pyx_n_s__group;
static PyObject *__pyx_n_s__has_key;
static PyObject *__pyx_n_s__include;
static PyObject *__pyx_n_s__isD;
static PyObject *__pyx_n_s__isDR;
static PyObject *__pyx_n_s__isdir;
static PyObject *__pyx_n_s__lI;
static PyObject *__pyx_n_s__lIR;
static PyObject *__pyx_n_s__lib;
static PyObject *__pyx_n_s__libc;
static PyObject *__pyx_n_s__listSo;
static PyObject *__pyx_n_s__listdir;
static PyObject *__pyx_n_s__litconv;
static PyObject *__pyx_n_s__loadNewNeuron;
static PyObject *__pyx_n_s__loadedNeurons;
static PyObject *__pyx_n_s__m;
static PyObject *__pyx_n_s__makedirs;
static PyObject *__pyx_n_s__match;
static PyObject *__pyx_n_s__model;
static PyObject *__pyx_n_s__modulepath;
static PyObject *__pyx_n_s__msg;
static PyObject *__pyx_n_s__n;
static PyObject *__pyx_n_s__nList;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__options;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__params;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__post;
static PyObject *__pyx_n_s__pre;
static PyObject *__pyx_n_s__push;
static PyObject *__pyx_n_s__push_pytoken;
static PyObject *__pyx_n_s__putSpecialFunctions;
static PyObject *__pyx_n_s__py_object;
static PyObject *__pyx_n_s__re;
static PyObject *__pyx_n_s__realpath;
static PyObject *__pyx_n_s__restype;
static PyObject *__pyx_n_s__returnNeuronName;
static PyObject *__pyx_n_s__run;
static PyObject *__pyx_n_s__run_pytoken;
static PyObject *__pyx_n_s__sI;
static PyObject *__pyx_n_s__sIR;
static PyObject *__pyx_n_s__search;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__sep;
static PyObject *__pyx_n_s__setNeuronParams;
static PyObject *__pyx_n_s__setStatus;
static PyObject *__pyx_n_s__setStdVars;
static PyObject *__pyx_n_s__share;
static PyObject *__pyx_n_s__signal;
static PyObject *__pyx_n_s__sli_func;
static PyObject *__pyx_n_s__so;
static PyObject *__pyx_n_s__split;
static PyObject *__pyx_n_s__synapsedict;
static PyObject *__pyx_n_s__sys;
static PyObject *__pyx_n_s__target;
static PyObject *__pyx_n_s__update;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__weight;
static PyObject *__pyx_n_s__zip;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_11;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_13;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_15;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_23;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_28;
static PyObject *__pyx_k_tuple_30;
static PyObject *__pyx_k_tuple_35;
static PyObject *__pyx_k_tuple_36;
static PyObject *__pyx_k_tuple_37;
static PyObject *__pyx_k_tuple_39;
static PyObject *__pyx_k_tuple_41;
static PyObject *__pyx_k_tuple_43;
static PyObject *__pyx_k_tuple_45;
static PyObject *__pyx_k_tuple_46;
static PyObject *__pyx_k_tuple_47;
static PyObject *__pyx_k_tuple_48;
static PyObject *__pyx_k_tuple_50;
static PyObject *__pyx_k_tuple_52;
static PyObject *__pyx_k_tuple_53;
static PyObject *__pyx_k_tuple_55;
static PyObject *__pyx_k_tuple_56;
static PyObject *__pyx_k_tuple_57;
static PyObject *__pyx_k_tuple_58;
static PyObject *__pyx_k_tuple_59;
static PyObject *__pyx_k_tuple_60;
static PyObject *__pyx_k_tuple_63;
static PyObject *__pyx_k_tuple_66;
static PyObject *__pyx_k_tuple_68;
static PyObject *__pyx_k_tuple_70;
static PyObject *__pyx_k_tuple_72;
static PyObject *__pyx_k_tuple_74;
static PyObject *__pyx_k_tuple_75;
static PyObject *__pyx_k_tuple_77;
static PyObject *__pyx_k_tuple_78;
static PyObject *__pyx_k_tuple_79;
static PyObject *__pyx_k_tuple_85;
static PyObject *__pyx_k_tuple_88;
static PyObject *__pyx_k_tuple_90;
static PyObject *__pyx_k_tuple_92;
static PyObject *__pyx_k_tuple_94;
static PyObject *__pyx_k_tuple_96;
static PyObject *__pyx_k_tuple_98;
static PyObject *__pyx_k_tuple_101;
static PyObject *__pyx_k_tuple_103;
static PyObject *__pyx_k_tuple_105;
static PyObject *__pyx_k_tuple_106;
static PyObject *__pyx_k_codeobj_80;
static PyObject *__pyx_k_codeobj_86;
static PyObject *__pyx_k_codeobj_89;
static PyObject *__pyx_k_codeobj_91;
static PyObject *__pyx_k_codeobj_93;
static PyObject *__pyx_k_codeobj_95;
static PyObject *__pyx_k_codeobj_97;
static PyObject *__pyx_k_codeobj_99;
static PyObject *__pyx_k_codeobj_107;

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_9NESTError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cynest_6kernel_9NESTError_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_6cynest_6kernel_9NESTError_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6cynest_6kernel_9NESTError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_msg = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__msg,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__msg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_msg = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.NESTError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_9NESTError___init__(__pyx_self, __pyx_v_self, __pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":9
 * 
 * class NESTError(Exception):
 *     def __init__(self, msg) :             # <<<<<<<<<<<<<<
 *         Exception.__init__(self, msg)
 * 
 */

static PyObject *__pyx_pf_6cynest_6kernel_9NESTError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cynest/kernel.pyx":10
 * class NESTError(Exception):
 *     def __init__(self, msg) :
 *         Exception.__init__(self, msg)             # <<<<<<<<<<<<<<
 * 
 * # This imports the C++ class wrappers
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_builtin_Exception, __pyx_n_s____init__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __Pyx_INCREF(__pyx_v_msg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_msg);
  __Pyx_GIVEREF(__pyx_v_msg);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.NESTError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_6cynest_6kernel_7PyToken_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6cynest_6kernel_7PyToken_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6cynest_6kernel_7PyToken___dealloc__(((struct PyToken *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "cynest/kernel.pyx":20
 *      """
 *      cdef classes.Token *thisptr
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          if self.thisptr:
 *             del self.thisptr
 */

static void __pyx_pf_6cynest_6kernel_7PyToken___dealloc__(struct PyToken *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cynest/kernel.pyx":21
 *      cdef classes.Token *thisptr
 *      def __dealloc__(self):
 *          if self.thisptr:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (__pyx_t_1) {

    /* "cynest/kernel.pyx":22
 *      def __dealloc__(self):
 *          if self.thisptr:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * include "dynamicneuronssync.pyx"
 */
    delete __pyx_v_self->thisptr;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static int __pyx_pw_6cynest_6kernel_13DataConverter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6cynest_6kernel_13DataConverter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6cynest_6kernel_13DataConverter___cinit__(((struct __pyx_obj_6cynest_6kernel_DataConverter *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":15
 *     cdef classes.NESTEngine *pTd
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.dTp = new classes.DatumToPythonConverter()
 *         self.pTd = new classes.NESTEngine()
 */

static int __pyx_pf_6cynest_6kernel_13DataConverter___cinit__(struct __pyx_obj_6cynest_6kernel_DataConverter *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":16
 * 
 *     def __cinit__(self):
 *         self.dTp = new classes.DatumToPythonConverter()             # <<<<<<<<<<<<<<
 *         self.pTd = new classes.NESTEngine()
 * 
 */
  __pyx_v_self->dTp = new DatumToPythonConverter();

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":17
 *     def __cinit__(self):
 *         self.dTp = new classes.DatumToPythonConverter()
 *         self.pTd = new classes.NESTEngine()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->pTd = new NESTEngine();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_6cynest_6kernel_13DataConverter_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6cynest_6kernel_13DataConverter_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6cynest_6kernel_13DataConverter_2__dealloc__(((struct __pyx_obj_6cynest_6kernel_DataConverter *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":19
 *         self.pTd = new classes.NESTEngine()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.dTp
 *         del self.pTd
 */

static void __pyx_pf_6cynest_6kernel_13DataConverter_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_DataConverter *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":20
 * 
 *     def __dealloc__(self):
 *         del self.dTp             # <<<<<<<<<<<<<<
 *         del self.pTd
 * 
 */
  delete __pyx_v_self->dTp;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":21
 *     def __dealloc__(self):
 *         del self.dTp
 *         del self.pTd             # <<<<<<<<<<<<<<
 * 
 *     cdef object datumToObject(self, classes.Datum* d):
 */
  delete __pyx_v_self->pTd;

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":23
 *         del self.pTd
 * 
 *     cdef object datumToObject(self, classes.Datum* d):             # <<<<<<<<<<<<<<
 *         return self.dTp.convertDatum(d)
 * 
 */

static PyObject *__pyx_f_6cynest_6kernel_13DataConverter_datumToObject(struct __pyx_obj_6cynest_6kernel_DataConverter *__pyx_v_self, Datum *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("datumToObject", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":24
 * 
 *     cdef object datumToObject(self, classes.Datum* d):
 *         return self.dTp.convertDatum(d)             # <<<<<<<<<<<<<<
 * 
 *     cdef classes.Datum* objectToDatum(self, object o):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->dTp->convertDatum(__pyx_v_d); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.DataConverter.datumToObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":26
 *         return self.dTp.convertDatum(d)
 * 
 *     cdef classes.Datum* objectToDatum(self, object o):             # <<<<<<<<<<<<<<
 *         return self.pTd.PyObject_as_Datum(o)
 * 
 */

static Datum *__pyx_f_6cynest_6kernel_13DataConverter_objectToDatum(struct __pyx_obj_6cynest_6kernel_DataConverter *__pyx_v_self, PyObject *__pyx_v_o) {
  Datum *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("objectToDatum", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":27
 * 
 *     cdef classes.Datum* objectToDatum(self, object o):
 *         return self.pTd.PyObject_as_Datum(o)             # <<<<<<<<<<<<<<
 * 
 *     cdef void updateDictionary(self, classes.Datum* src, classes.Datum* dest):
 */
  __pyx_r = __pyx_v_self->pTd->PyObject_as_Datum(__pyx_v_o);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":29
 *         return self.pTd.PyObject_as_Datum(o)
 * 
 *     cdef void updateDictionary(self, classes.Datum* src, classes.Datum* dest):             # <<<<<<<<<<<<<<
 *         self.dTp.updateDictionary(src, dest)
 * 
 */

static void __pyx_f_6cynest_6kernel_13DataConverter_updateDictionary(struct __pyx_obj_6cynest_6kernel_DataConverter *__pyx_v_self, Datum *__pyx_v_src, Datum *__pyx_v_dest) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateDictionary", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":30
 * 
 *     cdef void updateDictionary(self, classes.Datum* src, classes.Datum* dest):
 *         self.dTp.updateDictionary(src, dest)             # <<<<<<<<<<<<<<
 * 
 * # This class contains the special functions needed by
 */
  __pyx_v_self->dTp->updateDictionary(__pyx_v_src, __pyx_v_dest);

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static int __pyx_pw_6cynest_6kernel_16SpecialFunctions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6cynest_6kernel_16SpecialFunctions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6cynest_6kernel_16SpecialFunctions___cinit__(((struct __pyx_obj_6cynest_6kernel_SpecialFunctions *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":41
 *     cdef string modelsFolder
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr= new classes.SpecialFunctions()
 * 
 */

static int __pyx_pf_6cynest_6kernel_16SpecialFunctions___cinit__(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":42
 * 
 *     def __cinit__(self):
 *         self.thisptr= new classes.SpecialFunctions()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = new SpecialFunctions();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_6cynest_6kernel_16SpecialFunctions_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6cynest_6kernel_16SpecialFunctions_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6cynest_6kernel_16SpecialFunctions_2__dealloc__(((struct __pyx_obj_6cynest_6kernel_SpecialFunctions *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":44
 *         self.thisptr= new classes.SpecialFunctions()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

static void __pyx_pf_6cynest_6kernel_16SpecialFunctions_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":45
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_ms(self, int arg1, long arg2, double arg3):
 */
  delete __pyx_v_self->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":47
 *         del self.thisptr
 * 
 *     cdef double get_ms(self, int arg1, long arg2, double arg3):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get_ms(arg1, arg2, arg3)
 * 
 */

static double __pyx_f_6cynest_6kernel_16SpecialFunctions_get_ms(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_self, int __pyx_v_arg1, long __pyx_v_arg2, double __pyx_v_arg3) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ms", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":48
 * 
 *     cdef double get_ms(self, int arg1, long arg2, double arg3):
 *         return self.thisptr.get_ms(arg1, arg2, arg3)             # <<<<<<<<<<<<<<
 * 
 *     cdef long get_tics_or_steps(self, int arg1, int arg2, long arg3, double arg4):
 */
  __pyx_r = __pyx_v_self->thisptr->get_ms(__pyx_v_arg1, __pyx_v_arg2, __pyx_v_arg3);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":50
 *         return self.thisptr.get_ms(arg1, arg2, arg3)
 * 
 *     cdef long get_tics_or_steps(self, int arg1, int arg2, long arg3, double arg4):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get_tics_or_steps(arg1, arg2, arg3, arg4)
 * 
 */

static long __pyx_f_6cynest_6kernel_16SpecialFunctions_get_tics_or_steps(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_self, int __pyx_v_arg1, int __pyx_v_arg2, long __pyx_v_arg3, double __pyx_v_arg4) {
  long __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tics_or_steps", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":51
 * 
 *     cdef long get_tics_or_steps(self, int arg1, int arg2, long arg3, double arg4):
 *         return self.thisptr.get_tics_or_steps(arg1, arg2, arg3, arg4)             # <<<<<<<<<<<<<<
 * 
 *     cdef unsigned int get_scheduler_value(self, int arg1, unsigned int arg2):
 */
  __pyx_r = __pyx_v_self->thisptr->get_tics_or_steps(__pyx_v_arg1, __pyx_v_arg2, __pyx_v_arg3, __pyx_v_arg4);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":53
 *         return self.thisptr.get_tics_or_steps(arg1, arg2, arg3, arg4)
 * 
 *     cdef unsigned int get_scheduler_value(self, int arg1, unsigned int arg2):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get_scheduler_value(arg1, arg2)
 * 
 */

static unsigned int __pyx_f_6cynest_6kernel_16SpecialFunctions_get_scheduler_value(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_self, int __pyx_v_arg1, unsigned int __pyx_v_arg2) {
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scheduler_value", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":54
 * 
 *     cdef unsigned int get_scheduler_value(self, int arg1, unsigned int arg2):
 *         return self.thisptr.get_scheduler_value(arg1, arg2)             # <<<<<<<<<<<<<<
 * 
 *     cdef void setModelsFolder(self, string value):
 */
  __pyx_r = __pyx_v_self->thisptr->get_scheduler_value(__pyx_v_arg1, __pyx_v_arg2);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":56
 *         return self.thisptr.get_scheduler_value(arg1, arg2)
 * 
 *     cdef void setModelsFolder(self, string value):             # <<<<<<<<<<<<<<
 *         self.modelsFolder = value
 * 
 */

static void __pyx_f_6cynest_6kernel_16SpecialFunctions_setModelsFolder(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_self, std::string __pyx_v_value) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setModelsFolder", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":57
 * 
 *     cdef void setModelsFolder(self, string value):
 *         self.modelsFolder = value             # <<<<<<<<<<<<<<
 * 
 *     cdef string getModelsFolder(self):
 */
  __pyx_v_self->modelsFolder = __pyx_v_value;

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":59
 *         self.modelsFolder = value
 * 
 *     cdef string getModelsFolder(self):             # <<<<<<<<<<<<<<
 *         return self.modelsFolder
 * 
 */

static std::string __pyx_f_6cynest_6kernel_16SpecialFunctions_getModelsFolder(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *__pyx_v_self) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getModelsFolder", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":60
 * 
 *     cdef string getModelsFolder(self):
 *         return self.modelsFolder             # <<<<<<<<<<<<<<
 * 
 * # Class for storing the pointer to Standard Parameters
 */
  __pyx_r = __pyx_v_self->modelsFolder;
  goto __pyx_L0;

  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cynest_6kernel_14StandardParams_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6cynest_6kernel_14StandardParams_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6cynest_6kernel_14StandardParams___cinit__(((struct __pyx_obj_6cynest_6kernel_StandardParams *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":70
 *     cdef long* lag
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static int __pyx_pf_6cynest_6kernel_14StandardParams___cinit__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_StandardParams *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_6cynest_6kernel_14StandardParams_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6cynest_6kernel_14StandardParams_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6cynest_6kernel_14StandardParams_2__dealloc__(((struct __pyx_obj_6cynest_6kernel_StandardParams *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":73
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static void __pyx_pf_6cynest_6kernel_14StandardParams_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_StandardParams *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":77
 * 
 * 
 *     cdef void setStdVars(self, long* spikeB, double* in_spikesD, double* ex_spikesD, double* currentsD, long* lagI):             # <<<<<<<<<<<<<<
 *         self.spike = spikeB
 *         self.in_spikes = in_spikesD
 */

static void __pyx_f_6cynest_6kernel_14StandardParams_setStdVars(struct __pyx_obj_6cynest_6kernel_StandardParams *__pyx_v_self, long *__pyx_v_spikeB, double *__pyx_v_in_spikesD, double *__pyx_v_ex_spikesD, double *__pyx_v_currentsD, long *__pyx_v_lagI) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setStdVars", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":78
 * 
 *     cdef void setStdVars(self, long* spikeB, double* in_spikesD, double* ex_spikesD, double* currentsD, long* lagI):
 *         self.spike = spikeB             # <<<<<<<<<<<<<<
 *         self.in_spikes = in_spikesD
 *         self.ex_spikes = ex_spikesD
 */
  __pyx_v_self->spike = __pyx_v_spikeB;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":79
 *     cdef void setStdVars(self, long* spikeB, double* in_spikesD, double* ex_spikesD, double* currentsD, long* lagI):
 *         self.spike = spikeB
 *         self.in_spikes = in_spikesD             # <<<<<<<<<<<<<<
 *         self.ex_spikes = ex_spikesD
 *         self.currents = currentsD
 */
  __pyx_v_self->in_spikes = __pyx_v_in_spikesD;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":80
 *         self.spike = spikeB
 *         self.in_spikes = in_spikesD
 *         self.ex_spikes = ex_spikesD             # <<<<<<<<<<<<<<
 *         self.currents = currentsD
 *         self.lag = lagI
 */
  __pyx_v_self->ex_spikes = __pyx_v_ex_spikesD;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":81
 *         self.in_spikes = in_spikesD
 *         self.ex_spikes = ex_spikesD
 *         self.currents = currentsD             # <<<<<<<<<<<<<<
 *         self.lag = lagI
 * 
 */
  __pyx_v_self->currents = __pyx_v_currentsD;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":82
 *         self.ex_spikes = ex_spikesD
 *         self.currents = currentsD
 *         self.lag = lagI             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->lag = __pyx_v_lagI;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static int __pyx_pw_6cynest_6kernel_11CythonEntry_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6cynest_6kernel_11CythonEntry_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6cynest_6kernel_11CythonEntry___cinit__(((struct __pyx_obj_6cynest_6kernel_CythonEntry *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":90
 * cdef class CythonEntry:
 *     cdef classes.CythonEntry *thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr= new classes.CythonEntry()
 * 
 */

static int __pyx_pf_6cynest_6kernel_11CythonEntry___cinit__(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":91
 *     cdef classes.CythonEntry *thisptr
 *     def __cinit__(self):
 *         self.thisptr= new classes.CythonEntry()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = new CythonEntry();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_6cynest_6kernel_11CythonEntry_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6cynest_6kernel_11CythonEntry_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6cynest_6kernel_11CythonEntry_2__dealloc__(((struct __pyx_obj_6cynest_6kernel_CythonEntry *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":93
 *         self.thisptr= new classes.CythonEntry()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

static void __pyx_pf_6cynest_6kernel_11CythonEntry_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":94
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef void putInit(self, void* value):
 */
  delete __pyx_v_self->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":96
 *         del self.thisptr
 * 
 *     cdef void putInit(self, void* value):             # <<<<<<<<<<<<<<
 *         self.thisptr.putInit(value)
 * 
 */

static void __pyx_f_6cynest_6kernel_11CythonEntry_putInit(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self, void *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("putInit", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":97
 * 
 *     cdef void putInit(self, void* value):
 *         self.thisptr.putInit(value)             # <<<<<<<<<<<<<<
 * 
 *     cdef void* getInit(self):
 */
  __pyx_v_self->thisptr->putInit(__pyx_v_value);

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":99
 *         self.thisptr.putInit(value)
 * 
 *     cdef void* getInit(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getInit()
 * 
 */

static void *__pyx_f_6cynest_6kernel_11CythonEntry_getInit(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self) {
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getInit", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":100
 * 
 *     cdef void* getInit(self):
 *         return self.thisptr.getInit()             # <<<<<<<<<<<<<<
 * 
 *     cdef void putCalibrate(self, void* value):
 */
  __pyx_r = __pyx_v_self->thisptr->getInit();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":102
 *         return self.thisptr.getInit()
 * 
 *     cdef void putCalibrate(self, void* value):             # <<<<<<<<<<<<<<
 *         self.thisptr.putCalibrate(value)
 * 
 */

static void __pyx_f_6cynest_6kernel_11CythonEntry_putCalibrate(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self, void *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("putCalibrate", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":103
 * 
 *     cdef void putCalibrate(self, void* value):
 *         self.thisptr.putCalibrate(value)             # <<<<<<<<<<<<<<
 * 
 *     cdef void* getCalibrate(self):
 */
  __pyx_v_self->thisptr->putCalibrate(__pyx_v_value);

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":105
 *         self.thisptr.putCalibrate(value)
 * 
 *     cdef void* getCalibrate(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getCalibrate()
 * 
 */

static void *__pyx_f_6cynest_6kernel_11CythonEntry_getCalibrate(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self) {
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCalibrate", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":106
 * 
 *     cdef void* getCalibrate(self):
 *         return self.thisptr.getCalibrate()             # <<<<<<<<<<<<<<
 * 
 *     cdef void putUpdate(self, void* value):
 */
  __pyx_r = __pyx_v_self->thisptr->getCalibrate();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":108
 *         return self.thisptr.getCalibrate()
 * 
 *     cdef void putUpdate(self, void* value):             # <<<<<<<<<<<<<<
 *         self.thisptr.putUpdate(value)
 * 
 */

static void __pyx_f_6cynest_6kernel_11CythonEntry_putUpdate(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self, void *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("putUpdate", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":109
 * 
 *     cdef void putUpdate(self, void* value):
 *         self.thisptr.putUpdate(value)             # <<<<<<<<<<<<<<
 * 
 *     cdef void* getUpdate(self):
 */
  __pyx_v_self->thisptr->putUpdate(__pyx_v_value);

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":111
 *         self.thisptr.putUpdate(value)
 * 
 *     cdef void* getUpdate(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getUpdate()
 * 
 */

static void *__pyx_f_6cynest_6kernel_11CythonEntry_getUpdate(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self) {
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getUpdate", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":112
 * 
 *     cdef void* getUpdate(self):
 *         return self.thisptr.getUpdate()             # <<<<<<<<<<<<<<
 * 
 *     cdef void putSetStatus(self, void* value):
 */
  __pyx_r = __pyx_v_self->thisptr->getUpdate();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":114
 *         return self.thisptr.getUpdate()
 * 
 *     cdef void putSetStatus(self, void* value):             # <<<<<<<<<<<<<<
 *         self.thisptr.putSetStatus(value)
 * 
 */

static void __pyx_f_6cynest_6kernel_11CythonEntry_putSetStatus(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self, void *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("putSetStatus", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":115
 * 
 *     cdef void putSetStatus(self, void* value):
 *         self.thisptr.putSetStatus(value)             # <<<<<<<<<<<<<<
 * 
 *     cdef void* getSetStatus(self):
 */
  __pyx_v_self->thisptr->putSetStatus(__pyx_v_value);

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":117
 *         self.thisptr.putSetStatus(value)
 * 
 *     cdef void* getSetStatus(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSetStatus()
 * 
 */

static void *__pyx_f_6cynest_6kernel_11CythonEntry_getSetStatus(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self) {
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSetStatus", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":118
 * 
 *     cdef void* getSetStatus(self):
 *         return self.thisptr.getSetStatus()             # <<<<<<<<<<<<<<
 * 
 *     cdef void putGetStatus(self, void* value):
 */
  __pyx_r = __pyx_v_self->thisptr->getSetStatus();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":120
 *         return self.thisptr.getSetStatus()
 * 
 *     cdef void putGetStatus(self, void* value):             # <<<<<<<<<<<<<<
 *         self.thisptr.putGetStatus(value)
 * 
 */

static void __pyx_f_6cynest_6kernel_11CythonEntry_putGetStatus(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self, void *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("putGetStatus", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":121
 * 
 *     cdef void putGetStatus(self, void* value):
 *         self.thisptr.putGetStatus(value)             # <<<<<<<<<<<<<<
 * 
 *     cdef void* getGetStatus(self):
 */
  __pyx_v_self->thisptr->putGetStatus(__pyx_v_value);

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":123
 *         self.thisptr.putGetStatus(value)
 * 
 *     cdef void* getGetStatus(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getGetStatus()
 * 
 */

static void *__pyx_f_6cynest_6kernel_11CythonEntry_getGetStatus(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self) {
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGetStatus", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":124
 * 
 *     cdef void* getGetStatus(self):
 *         return self.thisptr.getGetStatus()             # <<<<<<<<<<<<<<
 * 
 *     cdef void putStdVars(self, void* value):
 */
  __pyx_r = __pyx_v_self->thisptr->getGetStatus();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":126
 *         return self.thisptr.getGetStatus()
 * 
 *     cdef void putStdVars(self, void* value):             # <<<<<<<<<<<<<<
 *         self.thisptr.putStdVars(value)
 * 
 */

static void __pyx_f_6cynest_6kernel_11CythonEntry_putStdVars(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self, void *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("putStdVars", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":127
 * 
 *     cdef void putStdVars(self, void* value):
 *         self.thisptr.putStdVars(value)             # <<<<<<<<<<<<<<
 * 
 *     cdef void* getStdVars(self):
 */
  __pyx_v_self->thisptr->putStdVars(__pyx_v_value);

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":129
 *         self.thisptr.putStdVars(value)
 * 
 *     cdef void* getStdVars(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getStdVars()
 * 
 */

static void *__pyx_f_6cynest_6kernel_11CythonEntry_getStdVars(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self) {
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStdVars", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":130
 * 
 *     cdef void* getStdVars(self):
 *         return self.thisptr.getStdVars()             # <<<<<<<<<<<<<<
 * 
 *     cdef void putDestroy(self, void* value):
 */
  __pyx_r = __pyx_v_self->thisptr->getStdVars();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":132
 *         return self.thisptr.getStdVars()
 * 
 *     cdef void putDestroy(self, void* value):             # <<<<<<<<<<<<<<
 *         self.thisptr.putDestroy(value)
 * 
 */

static void __pyx_f_6cynest_6kernel_11CythonEntry_putDestroy(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self, void *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("putDestroy", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":133
 * 
 *     cdef void putDestroy(self, void* value):
 *         self.thisptr.putDestroy(value)             # <<<<<<<<<<<<<<
 * 
 *     cdef void* getDestroy(self):
 */
  __pyx_v_self->thisptr->putDestroy(__pyx_v_value);

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":135
 *         self.thisptr.putDestroy(value)
 * 
 *     cdef void* getDestroy(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestroy()
 * 
 */

static void *__pyx_f_6cynest_6kernel_11CythonEntry_getDestroy(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self) {
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDestroy", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":136
 * 
 *     cdef void* getDestroy(self):
 *         return self.thisptr.getDestroy()             # <<<<<<<<<<<<<<
 * 
 *     cdef void registerNeurons(self, string cDir):
 */
  __pyx_r = __pyx_v_self->thisptr->getDestroy();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":138
 *         return self.thisptr.getDestroy()
 * 
 *     cdef void registerNeurons(self, string cDir):             # <<<<<<<<<<<<<<
 *         self.thisptr.registerNeurons(cDir);
 * 
 */

static void __pyx_f_6cynest_6kernel_11CythonEntry_registerNeurons(struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_self, std::string __pyx_v_cDir) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("registerNeurons", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":139
 * 
 *     cdef void registerNeurons(self, string cDir):
 *         self.thisptr.registerNeurons(cDir);             # <<<<<<<<<<<<<<
 * 
 * # end of class wrappers
 */
  __pyx_v_self->thisptr->registerNeurons(__pyx_v_cDir);

  __Pyx_RefNannyFinishContext();
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":152
 * # This method tries to find the Cython_models folder based on
 * # the location of the executable
 * cdef void setModelsFolder(bytes kernelDir):             # <<<<<<<<<<<<<<
 *     path1, path2 = os.path.split(kernelDir)
 * 
 */

static void __pyx_f_6cynest_6kernel_setModelsFolder(PyObject *__pyx_v_kernelDir) {
  PyObject *__pyx_v_path1 = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_path2 = NULL;
  PyObject *__pyx_v_exception = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  std::string __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setModelsFolder", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":153
 * # the location of the executable
 * cdef void setModelsFolder(bytes kernelDir):
 *     path1, path2 = os.path.split(kernelDir)             # <<<<<<<<<<<<<<
 * 
 *     while not (os.path.isdir(path1 + os.sep + "bin") and os.path.isdir(path1 + os.sep + "include") and os.path.isdir(path1 + os.sep + "lib") and os.path.isdir(path1 + os.sep + "share")):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__split); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_kernelDir));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_kernelDir));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_kernelDir));
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_path1 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_path2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":155
 *     path1, path2 = os.path.split(kernelDir)
 * 
 *     while not (os.path.isdir(path1 + os.sep + "bin") and os.path.isdir(path1 + os.sep + "include") and os.path.isdir(path1 + os.sep + "lib") and os.path.isdir(path1 + os.sep + "share")):             # <<<<<<<<<<<<<<
 *         path1, path2 = os.path.split(path1)
 * 
 */
  while (1) {
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__isdir); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__sep); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_v_path1, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_n_s__bin)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__isdir); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__sep); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_v_path1, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_n_s__include)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__isdir); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__sep); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_v_path1, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_n_s__lib)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {
          __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__isdir); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__sep); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyNumber_Add(__pyx_v_path1, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_n_s__share)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_10 = __pyx_t_9;
        } else {
          __pyx_t_10 = __pyx_t_8;
        }
        __pyx_t_8 = __pyx_t_10;
      } else {
        __pyx_t_8 = __pyx_t_7;
      }
      __pyx_t_7 = __pyx_t_8;
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    __pyx_t_6 = (!__pyx_t_7);
    if (!__pyx_t_6) break;

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":156
 * 
 *     while not (os.path.isdir(path1 + os.sep + "bin") and os.path.isdir(path1 + os.sep + "include") and os.path.isdir(path1 + os.sep + "lib") and os.path.isdir(path1 + os.sep + "share")):
 *         path1, path2 = os.path.split(path1)             # <<<<<<<<<<<<<<
 * 
 *     spFct.setModelsFolder(path1 + os.sep + "cython_models")
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__split); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_path1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_path1);
    __Pyx_GIVEREF(__pyx_v_path1);
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_5 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L8_unpacking_done:;
    }
    __Pyx_DECREF(__pyx_v_path1);
    __pyx_v_path1 = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_path2);
    __pyx_v_path2 = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":158
 *         path1, path2 = os.path.split(path1)
 * 
 *     spFct.setModelsFolder(path1 + os.sep + "cython_models")             # <<<<<<<<<<<<<<
 *     # we try to create the folder (even if it already present)
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__sep); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_v_path1, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, ((PyObject *)__pyx_n_s__cython_models)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __pyx_convert_string_from_py_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  ((struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *)__pyx_v_6cynest_6kernel_spFct->__pyx_vtab)->setModelsFolder(__pyx_v_6cynest_6kernel_spFct, __pyx_t_11);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":162
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         os.makedirs(spFct.getModelsFolder())
 *     except OSError as exception:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
    __Pyx_XGOTREF(__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_14);
    /*try:*/ {

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":163
 * 
 *     try:
 *         os.makedirs(spFct.getModelsFolder())             # <<<<<<<<<<<<<<
 *     except OSError as exception:
 *         if exception.errno != errno.EEXIST:
 */
      __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L9_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__makedirs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L9_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_convert_string_to_py_(((struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *)__pyx_v_6cynest_6kernel_spFct->__pyx_vtab)->getModelsFolder(__pyx_v_6cynest_6kernel_spFct)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L9_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L9_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_3));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L9_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    goto __pyx_L16_try_end;
    __pyx_L9_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":164
 *     try:
 *         os.makedirs(spFct.getModelsFolder())
 *     except OSError as exception:             # <<<<<<<<<<<<<<
 *         if exception.errno != errno.EEXIST:
 *             raise
 */
    __pyx_t_15 = PyErr_ExceptionMatches(__pyx_builtin_OSError);
    if (__pyx_t_15) {
      __Pyx_AddTraceback("cynest.kernel.setModelsFolder", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L11_except_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_exception = __pyx_t_1;

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":165
 *         os.makedirs(spFct.getModelsFolder())
 *     except OSError as exception:
 *         if exception.errno != errno.EEXIST:             # <<<<<<<<<<<<<<
 *             raise
 * 
 */
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_exception, __pyx_n_s__errno); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L11_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_16 = __Pyx_GetName(__pyx_m, __pyx_n_s__errno); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L11_except_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = PyObject_GetAttr(__pyx_t_16, __pyx_n_s__EEXIST); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L11_except_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = PyObject_RichCompare(__pyx_t_4, __pyx_t_17, Py_NE); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L11_except_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L11_except_error;}
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (__pyx_t_6) {

        /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":166
 *     except OSError as exception:
 *         if exception.errno != errno.EEXIST:
 *             raise             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        __Pyx_ErrRestore(__pyx_t_3, __pyx_t_1, __pyx_t_2);
        __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_2 = 0; 
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L11_except_error;}
        goto __pyx_L19;
      }
      __pyx_L19:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L10_exception_handled;
    }
    __pyx_L11_except_error:;
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
    goto __pyx_L1_error;
    __pyx_L10_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
    __pyx_L16_try_end:;
  }

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_WriteUnraisable("cynest.kernel.setModelsFolder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path1);
  __Pyx_XDECREF(__pyx_v_path2);
  __Pyx_XDECREF(__pyx_v_exception);
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_1get_ms(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cynest_6kernel_1get_ms = {__Pyx_NAMESTR("get_ms"), (PyCFunction)__pyx_pw_6cynest_6kernel_1get_ms, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6cynest_6kernel_1get_ms(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_arg3 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ms (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg1,&__pyx_n_s__arg2,&__pyx_n_s__arg3,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_ms", 1, 3, 3, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_ms", 1, 3, 3, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_ms") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
    __pyx_v_arg3 = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_ms", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.get_ms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_get_ms(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_arg3);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":171
 * 
 * # Special Functions helpers (will point to the good C++ function)
 * def get_ms(arg1, arg2, arg3):             # <<<<<<<<<<<<<<
 *     return spFct.get_ms(arg1, arg2, arg3)
 * 
 */

static PyObject *__pyx_pf_6cynest_6kernel_get_ms(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_arg3) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ms", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":172
 * # Special Functions helpers (will point to the good C++ function)
 * def get_ms(arg1, arg2, arg3):
 *     return spFct.get_ms(arg1, arg2, arg3)             # <<<<<<<<<<<<<<
 * 
 * def get_tics_or_steps(arg1, arg2, arg3, arg4):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_arg1); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsLong(__pyx_v_arg2); if (unlikely((__pyx_t_2 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_arg3); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyFloat_FromDouble(((struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *)__pyx_v_6cynest_6kernel_spFct->__pyx_vtab)->get_ms(__pyx_v_6cynest_6kernel_spFct, __pyx_t_1, __pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cynest.kernel.get_ms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_3get_tics_or_steps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cynest_6kernel_3get_tics_or_steps = {__Pyx_NAMESTR("get_tics_or_steps"), (PyCFunction)__pyx_pw_6cynest_6kernel_3get_tics_or_steps, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6cynest_6kernel_3get_tics_or_steps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_arg3 = 0;
  PyObject *__pyx_v_arg4 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tics_or_steps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg1,&__pyx_n_s__arg2,&__pyx_n_s__arg3,&__pyx_n_s__arg4,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_tics_or_steps", 1, 4, 4, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_tics_or_steps", 1, 4, 4, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg4)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_tics_or_steps", 1, 4, 4, 3); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_tics_or_steps") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
    __pyx_v_arg3 = values[2];
    __pyx_v_arg4 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_tics_or_steps", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.get_tics_or_steps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_2get_tics_or_steps(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_arg3, __pyx_v_arg4);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":174
 *     return spFct.get_ms(arg1, arg2, arg3)
 * 
 * def get_tics_or_steps(arg1, arg2, arg3, arg4):             # <<<<<<<<<<<<<<
 *     return spFct.get_tics_or_steps(arg1, arg2, arg3, arg4)
 * 
 */

static PyObject *__pyx_pf_6cynest_6kernel_2get_tics_or_steps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_arg3, PyObject *__pyx_v_arg4) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tics_or_steps", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":175
 * 
 * def get_tics_or_steps(arg1, arg2, arg3, arg4):
 *     return spFct.get_tics_or_steps(arg1, arg2, arg3, arg4)             # <<<<<<<<<<<<<<
 * 
 * def get_scheduler_value(arg1, arg2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_arg1); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_arg2); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsLong(__pyx_v_arg3); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_arg4); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = PyInt_FromLong(((struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *)__pyx_v_6cynest_6kernel_spFct->__pyx_vtab)->get_tics_or_steps(__pyx_v_6cynest_6kernel_spFct, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cynest.kernel.get_tics_or_steps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_5get_scheduler_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cynest_6kernel_5get_scheduler_value = {__Pyx_NAMESTR("get_scheduler_value"), (PyCFunction)__pyx_pw_6cynest_6kernel_5get_scheduler_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6cynest_6kernel_5get_scheduler_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scheduler_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg1,&__pyx_n_s__arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_scheduler_value", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_scheduler_value") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_scheduler_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.get_scheduler_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_4get_scheduler_value(__pyx_self, __pyx_v_arg1, __pyx_v_arg2);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":177
 *     return spFct.get_tics_or_steps(arg1, arg2, arg3, arg4)
 * 
 * def get_scheduler_value(arg1, arg2):             # <<<<<<<<<<<<<<
 *     return spFct.get_scheduler_value(arg1, arg2)
 * 
 */

static PyObject *__pyx_pf_6cynest_6kernel_4get_scheduler_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  unsigned int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_scheduler_value", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":178
 * 
 * def get_scheduler_value(arg1, arg2):
 *     return spFct.get_scheduler_value(arg1, arg2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_arg1); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_arg2); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyLong_FromUnsignedLong(((struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *)__pyx_v_6cynest_6kernel_spFct->__pyx_vtab)->get_scheduler_value(__pyx_v_6cynest_6kernel_spFct, __pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.get_scheduler_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_7returnNeuronName(PyObject *__pyx_self, PyObject *__pyx_v_cmd); /*proto*/
static PyMethodDef __pyx_mdef_6cynest_6kernel_7returnNeuronName = {__Pyx_NAMESTR("returnNeuronName"), (PyCFunction)__pyx_pw_6cynest_6kernel_7returnNeuronName, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6cynest_6kernel_7returnNeuronName(PyObject *__pyx_self, PyObject *__pyx_v_cmd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("returnNeuronName (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_6returnNeuronName(__pyx_self, ((PyObject *)__pyx_v_cmd));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":192
 * # Matches a string of the type ... Create is order to find
 * # creations commands. It it's the case, returns the neuron name
 * def returnNeuronName(cmd):             # <<<<<<<<<<<<<<
 *     m = re.search('^{ /(.+?) .*Create }.*$', cmd)
 *     if hasattr(m, 'group'):
 */

static PyObject *__pyx_pf_6cynest_6kernel_6returnNeuronName(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cmd) {
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("returnNeuronName", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":193
 * # creations commands. It it's the case, returns the neuron name
 * def returnNeuronName(cmd):
 *     m = re.search('^{ /(.+?) .*Create }.*$', cmd)             # <<<<<<<<<<<<<<
 *     if hasattr(m, 'group'):
 *         return m.group(1)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__search); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_INCREF(__pyx_v_cmd);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_cmd);
  __Pyx_GIVEREF(__pyx_v_cmd);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_m = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":194
 * def returnNeuronName(cmd):
 *     m = re.search('^{ /(.+?) .*Create }.*$', cmd)
 *     if hasattr(m, 'group'):             # <<<<<<<<<<<<<<
 *         return m.group(1)
 *     else:
 */
  __pyx_t_4 = PyObject_HasAttr(__pyx_v_m, ((PyObject *)__pyx_n_s__group)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":195
 *     m = re.search('^{ /(.+?) .*Create }.*$', cmd)
 *     if hasattr(m, 'group'):
 *         return m.group(1)             # <<<<<<<<<<<<<<
 *     else:
 *         return ""
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__group); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":197
 *         return m.group(1)
 *     else:
 *         return ""             # <<<<<<<<<<<<<<
 * 
 * # Loads the list of the neuron names contained in the cython_models folder.
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
    __pyx_r = ((PyObject *)__pyx_kp_s_3);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.returnNeuronName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_9getDynamicNeuronsName(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6cynest_6kernel_9getDynamicNeuronsName = {__Pyx_NAMESTR("getDynamicNeuronsName"), (PyCFunction)__pyx_pw_6cynest_6kernel_9getDynamicNeuronsName, METH_NOARGS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6cynest_6kernel_9getDynamicNeuronsName(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDynamicNeuronsName (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_8getDynamicNeuronsName(__pyx_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":200
 * 
 * # Loads the list of the neuron names contained in the cython_models folder.
 * def getDynamicNeuronsName():             # <<<<<<<<<<<<<<
 *     listSo = listdir(spFct.getModelsFolder())
 *     return [so[0:len(so) - 3] for so in listSo if ".so" in so]
 */

static PyObject *__pyx_pf_6cynest_6kernel_8getDynamicNeuronsName(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_listSo = NULL;
  PyObject *__pyx_v_so = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDynamicNeuronsName", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":201
 * # Loads the list of the neuron names contained in the cython_models folder.
 * def getDynamicNeuronsName():
 *     listSo = listdir(spFct.getModelsFolder())             # <<<<<<<<<<<<<<
 *     return [so[0:len(so) - 3] for so in listSo if ".so" in so]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__listdir); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_to_py_(((struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *)__pyx_v_6cynest_6kernel_spFct->__pyx_vtab)->getModelsFolder(__pyx_v_6cynest_6kernel_spFct)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_listSo = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":202
 * def getDynamicNeuronsName():
 *     listSo = listdir(spFct.getModelsFolder())
 *     return [so[0:len(so) - 3] for so in listSo if ".so" in so]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_v_listSo) || PyTuple_CheckExact(__pyx_v_listSo)) {
    __pyx_t_3 = __pyx_v_listSo; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_listSo); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF(__pyx_v_so);
    __pyx_v_so = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_t_6 = (__Pyx_PySequence_Contains(((PyObject *)__pyx_kp_s_4), __pyx_v_so, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_6) {
      __pyx_t_7 = PyObject_Length(__pyx_v_so); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = __Pyx_PySequence_GetSlice(__pyx_v_so, 0, (__pyx_t_7 - 3)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__Pyx_PyList_Append(__pyx_t_2, (PyObject*)__pyx_t_1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.getDynamicNeuronsName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_listSo);
  __Pyx_XDECREF(__pyx_v_so);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_11loadNewNeuron(PyObject *__pyx_self, PyObject *__pyx_v_n); /*proto*/
static PyMethodDef __pyx_mdef_6cynest_6kernel_11loadNewNeuron = {__Pyx_NAMESTR("loadNewNeuron"), (PyCFunction)__pyx_pw_6cynest_6kernel_11loadNewNeuron, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6cynest_6kernel_11loadNewNeuron(PyObject *__pyx_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadNewNeuron (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_10loadNewNeuron(__pyx_self, ((PyObject *)__pyx_v_n));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":207
 * # Loads a new neuron type based on the name. It implies a file called
 * # <name>.so is present is the cython_models folder
 * def loadNewNeuron(n):             # <<<<<<<<<<<<<<
 *     if not loadedNeurons.has_key(n):
 *         try:
 */

static PyObject *__pyx_pf_6cynest_6kernel_10loadNewNeuron(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_v_libc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loadNewNeuron", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":208
 * # <name>.so is present is the cython_models folder
 * def loadNewNeuron(n):
 *     if not loadedNeurons.has_key(n):             # <<<<<<<<<<<<<<
 *         try:
 *             libc = PyDLL(spFct.getModelsFolder() + "/" + n + ".so")
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":209
 * def loadNewNeuron(n):
 *     if not loadedNeurons.has_key(n):
 *         try:             # <<<<<<<<<<<<<<
 *             libc = PyDLL(spFct.getModelsFolder() + "/" + n + ".so")
 *             exec("libc.init" + n + "()")
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":210
 *     if not loadedNeurons.has_key(n):
 *         try:
 *             libc = PyDLL(spFct.getModelsFolder() + "/" + n + ".so")             # <<<<<<<<<<<<<<
 *             exec("libc.init" + n + "()")
 *             loadedNeurons[n] = libc
 */
        __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyDLL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = __pyx_convert_string_to_py_(((struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *)__pyx_v_6cynest_6kernel_spFct->__pyx_vtab)->getModelsFolder(__pyx_v_6cynest_6kernel_spFct)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
        __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_kp_s_5)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_v_n); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_kp_s_4)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
        __pyx_v_libc = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":211
 *         try:
 *             libc = PyDLL(spFct.getModelsFolder() + "/" + n + ".so")
 *             exec("libc.init" + n + "()")             # <<<<<<<<<<<<<<
 *             loadedNeurons[n] = libc
 *             loadedNeurons[n].putSpecialFunctions.restype = None
 */
        __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_kp_s_6), __pyx_v_n); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyNumber_Add(__pyx_t_2, ((PyObject *)__pyx_kp_s_7)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_Globals(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        if (__pyx_v_libc) {
          if (PyDict_SetItem(__pyx_t_3, ((PyObject *)__pyx_n_s__libc), __pyx_v_libc) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        }
        if (__pyx_v_n) {
          if (PyDict_SetItem(__pyx_t_3, ((PyObject *)__pyx_n_s__n), __pyx_v_n) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        }
        __pyx_t_9 = __Pyx_PyExec3(__pyx_t_1, ((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_3));
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":212
 *             libc = PyDLL(spFct.getModelsFolder() + "/" + n + ".so")
 *             exec("libc.init" + n + "()")
 *             loadedNeurons[n] = libc             # <<<<<<<<<<<<<<
 *             loadedNeurons[n].putSpecialFunctions.restype = None
 *             loadedNeurons[n].putSpecialFunctions(getmsFCT, getticsorstepsFCT, getschedulervalueFCT)
 */
        __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_9);
        if (PyObject_SetItem(__pyx_t_9, __pyx_v_n, __pyx_v_libc) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":213
 *             exec("libc.init" + n + "()")
 *             loadedNeurons[n] = libc
 *             loadedNeurons[n].putSpecialFunctions.restype = None             # <<<<<<<<<<<<<<
 *             loadedNeurons[n].putSpecialFunctions(getmsFCT, getticsorstepsFCT, getschedulervalueFCT)
 *             stdParams[n] = [] # new neuron name creation for standard parameters
 */
        __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = PyObject_GetItem(__pyx_t_9, __pyx_v_n); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__putSpecialFunctions); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (PyObject_SetAttr(__pyx_t_9, __pyx_n_s__restype, Py_None) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":214
 *             loadedNeurons[n] = libc
 *             loadedNeurons[n].putSpecialFunctions.restype = None
 *             loadedNeurons[n].putSpecialFunctions(getmsFCT, getticsorstepsFCT, getschedulervalueFCT)             # <<<<<<<<<<<<<<
 *             stdParams[n] = [] # new neuron name creation for standard parameters
 *         except:
 */
        __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = PyObject_GetItem(__pyx_t_9, __pyx_v_n); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__putSpecialFunctions); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__getmsFCT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__getticsorstepsFCT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_3 = 0;
        __pyx_t_2 = 0;
        __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":215
 *             loadedNeurons[n].putSpecialFunctions.restype = None
 *             loadedNeurons[n].putSpecialFunctions(getmsFCT, getticsorstepsFCT, getschedulervalueFCT)
 *             stdParams[n] = [] # new neuron name creation for standard parameters             # <<<<<<<<<<<<<<
 *         except:
 *             pass
 */
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        if (PyObject_SetItem(__pyx_v_6cynest_6kernel_stdParams, __pyx_v_n, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":216
 *             loadedNeurons[n].putSpecialFunctions(getmsFCT, getticsorstepsFCT, getschedulervalueFCT)
 *             stdParams[n] = [] # new neuron name creation for standard parameters
 *         except:             # <<<<<<<<<<<<<<
 *             pass
 * 
 */
      /*except:*/ {
        PyErr_Restore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_L11_try_end:;
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cynest.kernel.loadNewNeuron", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_libc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_13processNeuronCreation(PyObject *__pyx_self, PyObject *__pyx_v_cmd); /*proto*/
static PyMethodDef __pyx_mdef_6cynest_6kernel_13processNeuronCreation = {__Pyx_NAMESTR("processNeuronCreation"), (PyCFunction)__pyx_pw_6cynest_6kernel_13processNeuronCreation, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6cynest_6kernel_13processNeuronCreation(PyObject *__pyx_self, PyObject *__pyx_v_cmd) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("processNeuronCreation (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_12processNeuronCreation(__pyx_self, ((PyObject *)__pyx_v_cmd));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":222
 * # this method is called at every execution of the cynest.Create() method and seeks for dynamic neurons.
 * #If the neuron is dynamic, it is loaded for further utilization
 * def processNeuronCreation(cmd):             # <<<<<<<<<<<<<<
 *     n = returnNeuronName(cmd)
 *     if n is not "":
 */

static PyObject *__pyx_pf_6cynest_6kernel_12processNeuronCreation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cmd) {
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_nList = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("processNeuronCreation", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":223
 * #If the neuron is dynamic, it is loaded for further utilization
 * def processNeuronCreation(cmd):
 *     n = returnNeuronName(cmd)             # <<<<<<<<<<<<<<
 *     if n is not "":
 *         nList = getDynamicNeuronsName()
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__returnNeuronName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_cmd);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_cmd);
  __Pyx_GIVEREF(__pyx_v_cmd);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_n = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":224
 * def processNeuronCreation(cmd):
 *     n = returnNeuronName(cmd)
 *     if n is not "":             # <<<<<<<<<<<<<<
 *         nList = getDynamicNeuronsName()
 *         if n in nList:
 */
  __pyx_t_4 = (__pyx_v_n != ((PyObject *)__pyx_kp_s_3));
  if (__pyx_t_4) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":225
 *     n = returnNeuronName(cmd)
 *     if n is not "":
 *         nList = getDynamicNeuronsName()             # <<<<<<<<<<<<<<
 *         if n in nList:
 *             loadNewNeuron(n)
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_9); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_nList = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":226
 *     if n is not "":
 *         nList = getDynamicNeuronsName()
 *         if n in nList:             # <<<<<<<<<<<<<<
 *             loadNewNeuron(n)
 * 
 */
    __pyx_t_4 = (__Pyx_PySequence_Contains(__pyx_v_n, __pyx_v_nList, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_4) {

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":227
 *         nList = getDynamicNeuronsName()
 *         if n in nList:
 *             loadNewNeuron(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadNewNeuron); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_n);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_n);
      __Pyx_GIVEREF(__pyx_v_n);
      __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.processNeuronCreation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_nList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":231
 * 
 * # this method updates the neuron members based on the parameters argument
 * cdef void setNeuronMembers(bytes neuronName, int neuronID, classes.Datum* parameters) with gil:             # <<<<<<<<<<<<<<
 *     cdef dict members = <dict>converter.datumToObject(parameters)
 *     loadedNeurons[neuronName].setNeuronParams.argtypes = [c_int, py_object]
 */

static void __pyx_f_6cynest_6kernel_setNeuronMembers(PyObject *__pyx_v_neuronName, int __pyx_v_neuronID, Datum *__pyx_v_parameters) {
  PyObject *__pyx_v_members = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("setNeuronMembers", 0);
  __Pyx_INCREF(__pyx_v_neuronName);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":232
 * # this method updates the neuron members based on the parameters argument
 * cdef void setNeuronMembers(bytes neuronName, int neuronID, classes.Datum* parameters) with gil:
 *     cdef dict members = <dict>converter.datumToObject(parameters)             # <<<<<<<<<<<<<<
 *     loadedNeurons[neuronName].setNeuronParams.argtypes = [c_int, py_object]
 *     loadedNeurons[neuronName].setNeuronParams(neuronID, py_object(members))
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_DataConverter *)__pyx_v_6cynest_6kernel_converter->__pyx_vtab)->datumToObject(__pyx_v_6cynest_6kernel_converter, __pyx_v_parameters); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_members = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":233
 * cdef void setNeuronMembers(bytes neuronName, int neuronID, classes.Datum* parameters) with gil:
 *     cdef dict members = <dict>converter.datumToObject(parameters)
 *     loadedNeurons[neuronName].setNeuronParams.argtypes = [c_int, py_object]             # <<<<<<<<<<<<<<
 *     loadedNeurons[neuronName].setNeuronParams(neuronID, py_object(members))
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_int); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__py_object); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, ((PyObject *)__pyx_v_neuronName)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__setNeuronParams); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_t_1, __pyx_n_s__argtypes, ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":234
 *     cdef dict members = <dict>converter.datumToObject(parameters)
 *     loadedNeurons[neuronName].setNeuronParams.argtypes = [c_int, py_object]
 *     loadedNeurons[neuronName].setNeuronParams(neuronID, py_object(members))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, ((PyObject *)__pyx_v_neuronName)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__setNeuronParams); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromLong(__pyx_v_neuronID); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__py_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_members));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_members));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_members));
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("cynest.kernel.setNeuronMembers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_members);
  __Pyx_XDECREF(__pyx_v_neuronName);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":238
 * 
 * # this method retrieves the neuron members and puts them in the parameters argument
 * cdef void retrieveNeuronMembers(bytes neuronName, int neuronID, classes.Datum* parameters) with gil:             # <<<<<<<<<<<<<<
 *     cdef string key
 *     loadedNeurons[neuronName].getNeuronParams.restype = py_object
 */

static void __pyx_f_6cynest_6kernel_retrieveNeuronMembers(PyObject *__pyx_v_neuronName, int __pyx_v_neuronID, Datum *__pyx_v_parameters) {
  Datum *__pyx_v_members;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("retrieveNeuronMembers", 0);
  __Pyx_INCREF(__pyx_v_neuronName);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":240
 * cdef void retrieveNeuronMembers(bytes neuronName, int neuronID, classes.Datum* parameters) with gil:
 *     cdef string key
 *     loadedNeurons[neuronName].getNeuronParams.restype = py_object             # <<<<<<<<<<<<<<
 * 
 *     cdef classes.Datum* members = converter.objectToDatum(loadedNeurons[neuronName].getNeuronParams(neuronID))
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__py_object); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_2, ((PyObject *)__pyx_v_neuronName)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__getNeuronParams); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_t_2, __pyx_n_s__restype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":242
 *     loadedNeurons[neuronName].getNeuronParams.restype = py_object
 * 
 *     cdef classes.Datum* members = converter.objectToDatum(loadedNeurons[neuronName].getNeuronParams(neuronID))             # <<<<<<<<<<<<<<
 *     converter.updateDictionary(members, parameters)
 *     del members
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, ((PyObject *)__pyx_v_neuronName)); if (!__pyx_t_1) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__getNeuronParams); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(__pyx_v_neuronID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_members = ((struct __pyx_vtabstruct_6cynest_6kernel_DataConverter *)__pyx_v_6cynest_6kernel_converter->__pyx_vtab)->objectToDatum(__pyx_v_6cynest_6kernel_converter, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":243
 * 
 *     cdef classes.Datum* members = converter.objectToDatum(loadedNeurons[neuronName].getNeuronParams(neuronID))
 *     converter.updateDictionary(members, parameters)             # <<<<<<<<<<<<<<
 *     del members
 * 
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_DataConverter *)__pyx_v_6cynest_6kernel_converter->__pyx_vtab)->updateDictionary(__pyx_v_6cynest_6kernel_converter, __pyx_v_members, __pyx_v_parameters);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":244
 *     cdef classes.Datum* members = converter.objectToDatum(loadedNeurons[neuronName].getNeuronParams(neuronID))
 *     converter.updateDictionary(members, parameters)
 *     del members             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_members;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cynest.kernel.retrieveNeuronMembers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_neuronName);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":259
 * lIR = byref(lI)
 * 
 * cdef void cUpdate(string nName, int neuronID) with gil:             # <<<<<<<<<<<<<<
 *     cdef bytes neuronName = nName.encode('UTF-8')
 * 
 */

static void __pyx_f_6cynest_6kernel_cUpdate(std::string __pyx_v_nName, int __pyx_v_neuronID) {
  PyObject *__pyx_v_neuronName = 0;
  struct __pyx_obj_6cynest_6kernel_StandardParams *__pyx_v_sp = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  long __pyx_t_11;
  double __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("cUpdate", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":260
 * 
 * cdef void cUpdate(string nName, int neuronID) with gil:
 *     cdef bytes neuronName = nName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     if not loadedNeurons.has_key(neuronName):
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_nName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_11), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_neuronName = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":262
 *     cdef bytes neuronName = nName.encode('UTF-8')
 * 
 *     if not loadedNeurons.has_key(neuronName):             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_neuronName));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_neuronName));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_neuronName));
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":263
 * 
 *     if not loadedNeurons.has_key(neuronName):
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef StandardParams sp = stdParams[neuronName][neuronID]
 */
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":265
 *         return
 * 
 *     cdef StandardParams sp = stdParams[neuronName][neuronID]             # <<<<<<<<<<<<<<
 *     loadedNeurons[neuronName].setStdVars(neuronID, sp.spike[0], sp.in_spikes[0], sp.ex_spikes[0], sp.currents[0], sp.lag[0])
 * 
 */
  __pyx_t_3 = PyObject_GetItem(__pyx_v_6cynest_6kernel_stdParams, ((PyObject *)__pyx_v_neuronName)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_neuronID, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6cynest_6kernel_StandardParams))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_sp = ((struct __pyx_obj_6cynest_6kernel_StandardParams *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":266
 * 
 *     cdef StandardParams sp = stdParams[neuronName][neuronID]
 *     loadedNeurons[neuronName].setStdVars(neuronID, sp.spike[0], sp.in_spikes[0], sp.ex_spikes[0], sp.currents[0], sp.lag[0])             # <<<<<<<<<<<<<<
 * 
 *     loadedNeurons[neuronName].update(neuronID)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, ((PyObject *)__pyx_v_neuronName)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__setStdVars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromLong(__pyx_v_neuronID); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong((__pyx_v_sp->spike[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_sp->in_spikes[0])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_sp->ex_spikes[0])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_sp->currents[0])); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyInt_FromLong((__pyx_v_sp->lag[0])); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(6); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":268
 *     loadedNeurons[neuronName].setStdVars(neuronID, sp.spike[0], sp.in_spikes[0], sp.ex_spikes[0], sp.currents[0], sp.lag[0])
 * 
 *     loadedNeurons[neuronName].update(neuronID)             # <<<<<<<<<<<<<<
 * 
 *     loadedNeurons[neuronName].getStdVars(neuronID, sIR, isDR, esDR, cDR, lIR)
 */
  __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyObject_GetItem(__pyx_t_9, ((PyObject *)__pyx_v_neuronName)); if (!__pyx_t_10) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_GetAttr(__pyx_t_10, __pyx_n_s__update); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyInt_FromLong(__pyx_v_neuronID); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":270
 *     loadedNeurons[neuronName].update(neuronID)
 * 
 *     loadedNeurons[neuronName].getStdVars(neuronID, sIR, isDR, esDR, cDR, lIR)             # <<<<<<<<<<<<<<
 *     sp.spike[0] = sI.value
 *     sp.in_spikes[0] = isD.value
 */
  __pyx_t_10 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_10, ((PyObject *)__pyx_v_neuronName)); if (!__pyx_t_1) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__getStdVars); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(__pyx_v_neuronID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__sIR); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__isDR); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__esDR); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__cDR); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__lIR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_9 = 0;
  __pyx_t_8 = 0;
  __pyx_t_7 = 0;
  __pyx_t_6 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_10, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":271
 * 
 *     loadedNeurons[neuronName].getStdVars(neuronID, sIR, isDR, esDR, cDR, lIR)
 *     sp.spike[0] = sI.value             # <<<<<<<<<<<<<<
 *     sp.in_spikes[0] = isD.value
 *     sp.ex_spikes[0] = esD.value
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sI); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyInt_AsLong(__pyx_t_3); if (unlikely((__pyx_t_11 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  (__pyx_v_sp->spike[0]) = __pyx_t_11;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":272
 *     loadedNeurons[neuronName].getStdVars(neuronID, sIR, isDR, esDR, cDR, lIR)
 *     sp.spike[0] = sI.value
 *     sp.in_spikes[0] = isD.value             # <<<<<<<<<<<<<<
 *     sp.ex_spikes[0] = esD.value
 *     sp.currents[0] = cD.value
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__isD); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_sp->in_spikes[0]) = __pyx_t_12;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":273
 *     sp.spike[0] = sI.value
 *     sp.in_spikes[0] = isD.value
 *     sp.ex_spikes[0] = esD.value             # <<<<<<<<<<<<<<
 *     sp.currents[0] = cD.value
 *     sp.lag[0] = lI.value
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__esD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  (__pyx_v_sp->ex_spikes[0]) = __pyx_t_12;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":274
 *     sp.in_spikes[0] = isD.value
 *     sp.ex_spikes[0] = esD.value
 *     sp.currents[0] = cD.value             # <<<<<<<<<<<<<<
 *     sp.lag[0] = lI.value
 * 
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__cD); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_sp->currents[0]) = __pyx_t_12;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":275
 *     sp.ex_spikes[0] = esD.value
 *     sp.currents[0] = cD.value
 *     sp.lag[0] = lI.value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__lI); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyInt_AsLong(__pyx_t_3); if (unlikely((__pyx_t_11 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  (__pyx_v_sp->lag[0]) = __pyx_t_11;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("cynest.kernel.cUpdate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_neuronName);
  __Pyx_XDECREF((PyObject *)__pyx_v_sp);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":281
 * # synchronizes the parameters (set and retrieve NeuronMembers)
 * # Returns the id of the new neuron
 * cdef int cInit(string neuronName, classes.Datum* args) with gil:             # <<<<<<<<<<<<<<
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 */

static int __pyx_f_6cynest_6kernel_cInit(std::string __pyx_v_neuronName, Datum *__pyx_v_args) {
  PyObject *__pyx_v_nNBytes = 0;
  int __pyx_v_nID;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("cInit", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":282
 * # Returns the id of the new neuron
 * cdef int cInit(string neuronName, classes.Datum* args) with gil:
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         loadNewNeuron(nNBytes)
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_neuronName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nNBytes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":284
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 *         loadNewNeuron(nNBytes)             # <<<<<<<<<<<<<<
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadNewNeuron); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_nNBytes));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_nNBytes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_nNBytes));
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":286
 *         loadNewNeuron(nNBytes)
 * 
 *         if not loadedNeurons.has_key(nNBytes):             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_nNBytes));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_nNBytes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_nNBytes));
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":287
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         # special initialization command
 */
    __pyx_r = -1;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":290
 * 
 *         # special initialization command
 *         nID =  <int>loadedNeurons[nNBytes].createNeuron()             # <<<<<<<<<<<<<<
 *         stdParams[nNBytes].append(StandardParams())
 *         loadedNeurons[nNBytes].getStdVars.argtypes = [c_int, c_void_p, c_void_p, c_void_p, c_void_p, c_void_p]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__createNeuron); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nID = ((int)__pyx_t_6);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":291
 *         # special initialization command
 *         nID =  <int>loadedNeurons[nNBytes].createNeuron()
 *         stdParams[nNBytes].append(StandardParams())             # <<<<<<<<<<<<<<
 *         loadedNeurons[nNBytes].getStdVars.argtypes = [c_int, c_void_p, c_void_p, c_void_p, c_void_p, c_void_p]
 *         loadedNeurons[nNBytes].setStdVars.argtypes = [c_int, c_long, c_double, c_double, c_double, c_long]
 */
  __pyx_t_3 = PyObject_GetItem(__pyx_v_6cynest_6kernel_stdParams, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_StandardParams)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":292
 *         nID =  <int>loadedNeurons[nNBytes].createNeuron()
 *         stdParams[nNBytes].append(StandardParams())
 *         loadedNeurons[nNBytes].getStdVars.argtypes = [c_int, c_void_p, c_void_p, c_void_p, c_void_p, c_void_p]             # <<<<<<<<<<<<<<
 *         loadedNeurons[nNBytes].setStdVars.argtypes = [c_int, c_long, c_double, c_double, c_double, c_long]
 *         setNeuronMembers(nNBytes, nID, args)
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_int); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_void_p); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_void_p); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_void_p); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_void_p); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_void_p); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyList_New(6); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_10, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_10, 4, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_10, 5, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = PyObject_GetItem(__pyx_t_9, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_8) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__getStdVars); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyObject_SetAttr(__pyx_t_9, __pyx_n_s__argtypes, ((PyObject *)__pyx_t_10)) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":293
 *         stdParams[nNBytes].append(StandardParams())
 *         loadedNeurons[nNBytes].getStdVars.argtypes = [c_int, c_void_p, c_void_p, c_void_p, c_void_p, c_void_p]
 *         loadedNeurons[nNBytes].setStdVars.argtypes = [c_int, c_long, c_double, c_double, c_double, c_long]             # <<<<<<<<<<<<<<
 *         setNeuronMembers(nNBytes, nID, args)
 * 
 */
  __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_int); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_long); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_double); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_double); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_double); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_long); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_8 = 0;
  __pyx_t_7 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__setStdVars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_t_1, __pyx_n_s__argtypes, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":294
 *         loadedNeurons[nNBytes].getStdVars.argtypes = [c_int, c_void_p, c_void_p, c_void_p, c_void_p, c_void_p]
 *         loadedNeurons[nNBytes].setStdVars.argtypes = [c_int, c_long, c_double, c_double, c_double, c_long]
 *         setNeuronMembers(nNBytes, nID, args)             # <<<<<<<<<<<<<<
 * 
 *         retrieveNeuronMembers(nNBytes, nID, args)
 */
  __pyx_f_6cynest_6kernel_setNeuronMembers(__pyx_v_nNBytes, __pyx_v_nID, __pyx_v_args);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":296
 *         setNeuronMembers(nNBytes, nID, args)
 * 
 *         retrieveNeuronMembers(nNBytes, nID, args)             # <<<<<<<<<<<<<<
 *         return nID
 * 
 */
  __pyx_f_6cynest_6kernel_retrieveNeuronMembers(__pyx_v_nNBytes, __pyx_v_nID, __pyx_v_args);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":297
 * 
 *         retrieveNeuronMembers(nNBytes, nID, args)
 *         return nID             # <<<<<<<<<<<<<<
 * 
 * # Calibration method. Called from the C++ side. Calls the
 */
  __pyx_r = __pyx_v_nID;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("cynest.kernel.cInit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nNBytes);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":301
 * # Calibration method. Called from the C++ side. Calls the
 * # calibrate method of the cython neuron
 * cdef void cCalibrate(string neuronName, int neuronID, classes.Datum* args) with gil:             # <<<<<<<<<<<<<<
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 */

static void __pyx_f_6cynest_6kernel_cCalibrate(std::string __pyx_v_neuronName, int __pyx_v_neuronID, Datum *__pyx_v_args) {
  PyObject *__pyx_v_nNBytes = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("cCalibrate", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":302
 * # calibrate method of the cython neuron
 * cdef void cCalibrate(string neuronName, int neuronID, classes.Datum* args) with gil:
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_neuronName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_13), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nNBytes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":304
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 *         if not loadedNeurons.has_key(nNBytes):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_nNBytes));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_nNBytes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_nNBytes));
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":305
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 *             return             # <<<<<<<<<<<<<<
 * 
 *         setNeuronMembers(nNBytes, neuronID, args)
 */
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":307
 *             return
 * 
 *         setNeuronMembers(nNBytes, neuronID, args)             # <<<<<<<<<<<<<<
 *         loadedNeurons[nNBytes].calibrate(neuronID)
 *         retrieveNeuronMembers(nNBytes, neuronID, args)
 */
  __pyx_f_6cynest_6kernel_setNeuronMembers(__pyx_v_nNBytes, __pyx_v_neuronID, __pyx_v_args);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":308
 * 
 *         setNeuronMembers(nNBytes, neuronID, args)
 *         loadedNeurons[nNBytes].calibrate(neuronID)             # <<<<<<<<<<<<<<
 *         retrieveNeuronMembers(nNBytes, neuronID, args)
 * 
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_1) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__calibrate); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(__pyx_v_neuronID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":309
 *         setNeuronMembers(nNBytes, neuronID, args)
 *         loadedNeurons[nNBytes].calibrate(neuronID)
 *         retrieveNeuronMembers(nNBytes, neuronID, args)             # <<<<<<<<<<<<<<
 * 
 * # SetStatus method. Called from the C++ side. Calls the
 */
  __pyx_f_6cynest_6kernel_retrieveNeuronMembers(__pyx_v_nNBytes, __pyx_v_neuronID, __pyx_v_args);

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cynest.kernel.cCalibrate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nNBytes);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":313
 * # SetStatus method. Called from the C++ side. Calls the
 * # setStatus method of the cython neuron
 * cdef void cSetStatus(string neuronName, int neuronID, classes.Datum* args) with gil:             # <<<<<<<<<<<<<<
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 */

static void __pyx_f_6cynest_6kernel_cSetStatus(std::string __pyx_v_neuronName, int __pyx_v_neuronID, Datum *__pyx_v_args) {
  PyObject *__pyx_v_nNBytes = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("cSetStatus", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":314
 * # setStatus method of the cython neuron
 * cdef void cSetStatus(string neuronName, int neuronID, classes.Datum* args) with gil:
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_neuronName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nNBytes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":316
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 *         if not loadedNeurons.has_key(nNBytes):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_nNBytes));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_nNBytes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_nNBytes));
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":317
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 *             return             # <<<<<<<<<<<<<<
 * 
 *         setNeuronMembers(nNBytes, neuronID, args)
 */
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":319
 *             return
 * 
 *         setNeuronMembers(nNBytes, neuronID, args)             # <<<<<<<<<<<<<<
 *         loadedNeurons[nNBytes].setStatus(neuronID)
 *         retrieveNeuronMembers(nNBytes, neuronID, args)
 */
  __pyx_f_6cynest_6kernel_setNeuronMembers(__pyx_v_nNBytes, __pyx_v_neuronID, __pyx_v_args);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":320
 * 
 *         setNeuronMembers(nNBytes, neuronID, args)
 *         loadedNeurons[nNBytes].setStatus(neuronID)             # <<<<<<<<<<<<<<
 *         retrieveNeuronMembers(nNBytes, neuronID, args)
 * 
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_1) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__setStatus); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(__pyx_v_neuronID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":321
 *         setNeuronMembers(nNBytes, neuronID, args)
 *         loadedNeurons[nNBytes].setStatus(neuronID)
 *         retrieveNeuronMembers(nNBytes, neuronID, args)             # <<<<<<<<<<<<<<
 * 
 * # GetStatus method. Called from the C++ side. Calls the
 */
  __pyx_f_6cynest_6kernel_retrieveNeuronMembers(__pyx_v_nNBytes, __pyx_v_neuronID, __pyx_v_args);

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cynest.kernel.cSetStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nNBytes);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":325
 * # GetStatus method. Called from the C++ side. Calls the
 * # getStatus method of the cython neuron
 * cdef void cGetStatus(string neuronName, int neuronID, classes.Datum* args) with gil:             # <<<<<<<<<<<<<<
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 */

static void __pyx_f_6cynest_6kernel_cGetStatus(std::string __pyx_v_neuronName, int __pyx_v_neuronID, Datum *__pyx_v_args) {
  PyObject *__pyx_v_nNBytes = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("cGetStatus", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":326
 * # getStatus method of the cython neuron
 * cdef void cGetStatus(string neuronName, int neuronID, classes.Datum* args) with gil:
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_neuronName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_15), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nNBytes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":328
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 *         if not loadedNeurons.has_key(nNBytes):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_nNBytes));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_nNBytes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_nNBytes));
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":329
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 *             return             # <<<<<<<<<<<<<<
 * 
 *         loadedNeurons[nNBytes].getStatus(neuronID)
 */
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":331
 *             return
 * 
 *         loadedNeurons[nNBytes].getStatus(neuronID)             # <<<<<<<<<<<<<<
 *         retrieveNeuronMembers(nNBytes, neuronID, args)
 * 
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_1) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__getStatus); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(__pyx_v_neuronID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":332
 * 
 *         loadedNeurons[nNBytes].getStatus(neuronID)
 *         retrieveNeuronMembers(nNBytes, neuronID, args)             # <<<<<<<<<<<<<<
 * 
 * # Standard Parameters method. Called from the C++ side.
 */
  __pyx_f_6cynest_6kernel_retrieveNeuronMembers(__pyx_v_nNBytes, __pyx_v_neuronID, __pyx_v_args);

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cynest.kernel.cGetStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nNBytes);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":337
 * # Puts the S.P. pointers into a temporary structure
 * # used when calling the update function.
 * cdef void cStdVars(string neuronName, int neuronID, long* spike, double* in_spikes, double* ex_spikes, double* currents, long* lag) with gil:             # <<<<<<<<<<<<<<
 *     cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 */

static void __pyx_f_6cynest_6kernel_cStdVars(std::string __pyx_v_neuronName, int __pyx_v_neuronID, long *__pyx_v_spike, double *__pyx_v_in_spikes, double *__pyx_v_ex_spikes, double *__pyx_v_currents, long *__pyx_v_lag) {
  PyObject *__pyx_v_nNBytes = 0;
  struct __pyx_obj_6cynest_6kernel_StandardParams *__pyx_v_sp = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("cStdVars", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":338
 * # used when calling the update function.
 * cdef void cStdVars(string neuronName, int neuronID, long* spike, double* in_spikes, double* ex_spikes, double* currents, long* lag) with gil:
 *     cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_neuronName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nNBytes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":340
 *     cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 *     if not loadedNeurons.has_key(nNBytes):             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_nNBytes));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_nNBytes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_nNBytes));
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":341
 * 
 *     if not loadedNeurons.has_key(nNBytes):
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef StandardParams sp = StandardParams()
 */
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":343
 *         return
 * 
 *     cdef StandardParams sp = StandardParams()             # <<<<<<<<<<<<<<
 *     sp.setStdVars(spike, in_spikes, ex_spikes, currents, lag)
 *     stdParams[nNBytes][neuronID] = sp
 */
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_StandardParams)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_sp = ((struct __pyx_obj_6cynest_6kernel_StandardParams *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":344
 * 
 *     cdef StandardParams sp = StandardParams()
 *     sp.setStdVars(spike, in_spikes, ex_spikes, currents, lag)             # <<<<<<<<<<<<<<
 *     stdParams[nNBytes][neuronID] = sp
 * 
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_StandardParams *)__pyx_v_sp->__pyx_vtab)->setStdVars(__pyx_v_sp, __pyx_v_spike, __pyx_v_in_spikes, __pyx_v_ex_spikes, __pyx_v_currents, __pyx_v_lag);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":345
 *     cdef StandardParams sp = StandardParams()
 *     sp.setStdVars(spike, in_spikes, ex_spikes, currents, lag)
 *     stdParams[nNBytes][neuronID] = sp             # <<<<<<<<<<<<<<
 * 
 * # Destroying method. Called from the C++ side. Calls the
 */
  __pyx_t_3 = PyObject_GetItem(__pyx_v_6cynest_6kernel_stdParams, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemInt(__pyx_t_3, __pyx_v_neuronID, ((PyObject *)__pyx_v_sp), sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cynest.kernel.cStdVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nNBytes);
  __Pyx_XDECREF((PyObject *)__pyx_v_sp);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":350
 * # destroyer of the neuron. Frees the library if no neuron
 * # of that type is present
 * cdef void cDestroy(string neuronName, int neuronID) with gil:             # <<<<<<<<<<<<<<
 *     cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 */

static void __pyx_f_6cynest_6kernel_cDestroy(std::string __pyx_v_neuronName, int __pyx_v_neuronID) {
  PyObject *__pyx_v_nNBytes = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("cDestroy", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":351
 * # of that type is present
 * cdef void cDestroy(string neuronName, int neuronID) with gil:
 *     cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_neuronName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_17), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nNBytes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":353
 *     cdef bytes nNBytes = neuronName.encode('UTF-8')
 * 
 *     if not loadedNeurons.has_key(nNBytes):             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_nNBytes));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_nNBytes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_nNBytes));
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":354
 * 
 *     if not loadedNeurons.has_key(nNBytes):
 *         return             # <<<<<<<<<<<<<<
 * 
 *     loadedNeurons[nNBytes].destroy(neuronID)
 */
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":356
 *         return
 * 
 *     loadedNeurons[nNBytes].destroy(neuronID)             # <<<<<<<<<<<<<<
 *     if loadedNeurons[nNBytes].getNbNeurons() == 0:
 *         del stdParams[nNBytes]
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_1) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__destroy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(__pyx_v_neuronID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":357
 * 
 *     loadedNeurons[nNBytes].destroy(neuronID)
 *     if loadedNeurons[nNBytes].getNbNeurons() == 0:             # <<<<<<<<<<<<<<
 *         del stdParams[nNBytes]
 *         del loadedNeurons[nNBytes]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, ((PyObject *)__pyx_v_nNBytes)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getNbNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":358
 *     loadedNeurons[nNBytes].destroy(neuronID)
 *     if loadedNeurons[nNBytes].getNbNeurons() == 0:
 *         del stdParams[nNBytes]             # <<<<<<<<<<<<<<
 *         del loadedNeurons[nNBytes]
 */
    if (unlikely(!__pyx_v_nNBytes)) { __Pyx_RaiseUnboundLocalError("nNBytes"); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    if (PyObject_DelItem(__pyx_v_6cynest_6kernel_stdParams, ((PyObject *)__pyx_v_nNBytes)) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":359
 *     if loadedNeurons[nNBytes].getNbNeurons() == 0:
 *         del stdParams[nNBytes]
 *         del loadedNeurons[nNBytes]             # <<<<<<<<<<<<<<
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__loadedNeurons); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(!__pyx_v_nNBytes)) { __Pyx_RaiseUnboundLocalError("nNBytes"); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    if (PyObject_DelItem(__pyx_t_1, ((PyObject *)__pyx_v_nNBytes)) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cynest.kernel.cDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nNBytes);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* Python wrapper */
static int __pyx_pw_6cynest_6kernel_16SLIDataContainer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6cynest_6kernel_16SLIDataContainer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6cynest_6kernel_16SLIDataContainer___cinit__(((struct __pyx_obj_6cynest_6kernel_SLIDataContainer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":11
 *     cdef commands
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.commands = {}
 * 
 */

static int __pyx_pf_6cynest_6kernel_16SLIDataContainer___cinit__(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":12
 * 
 *     def __cinit__(self):
 *         self.commands = {}             # <<<<<<<<<<<<<<
 * 
 *     cdef initialize(self, classes.NESTEngine *nest):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->commands);
  __Pyx_DECREF(__pyx_v_self->commands);
  __pyx_v_self->commands = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.SLIDataContainer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":14
 *         self.commands = {}
 * 
 *     cdef initialize(self, classes.NESTEngine *nest):             # <<<<<<<<<<<<<<
 *         self.nest_engine = nest
 * 
 */

static PyObject *__pyx_f_6cynest_6kernel_16SLIDataContainer_initialize(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *__pyx_v_self, NESTEngine *__pyx_v_nest) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":15
 * 
 *     cdef initialize(self, classes.NESTEngine *nest):
 *         self.nest_engine = nest             # <<<<<<<<<<<<<<
 * 
 *     cdef PyToken generate_func_pytoken(self, bytes cmd):
 */
  __pyx_v_self->nest_engine = __pyx_v_nest;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":17
 *         self.nest_engine = nest
 * 
 *     cdef PyToken generate_func_pytoken(self, bytes cmd):             # <<<<<<<<<<<<<<
 *         cdef PyToken t = PyToken()
 * 
 */

static struct PyToken *__pyx_f_6cynest_6kernel_16SLIDataContainer_generate_func_pytoken(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *__pyx_v_self, PyObject *__pyx_v_cmd) {
  struct PyToken *__pyx_v_t = 0;
  PyObject *__pyx_v_result = NULL;
  struct PyToken *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_func_pytoken", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":18
 * 
 *     cdef PyToken generate_func_pytoken(self, bytes cmd):
 *         cdef PyToken t = PyToken()             # <<<<<<<<<<<<<<
 * 
 *         self.nest_engine.run('/' + cmd + ' lookup')
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_PyToken)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct PyToken *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":20
 *         cdef PyToken t = PyToken()
 * 
 *         self.nest_engine.run('/' + cmd + ' lookup')             # <<<<<<<<<<<<<<
 *         result = self.nest_engine.pop()
 * 
 */
  __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_kp_s_5), ((PyObject *)__pyx_v_cmd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_kp_s_18)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->nest_engine->run(__pyx_t_3);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":21
 * 
 *         self.nest_engine.run('/' + cmd + ' lookup')
 *         result = self.nest_engine.pop()             # <<<<<<<<<<<<<<
 * 
 *         if result is True:
 */
  __pyx_t_2 = __pyx_v_self->nest_engine->pop(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":23
 *         result = self.nest_engine.pop()
 * 
 *         if result is True:             # <<<<<<<<<<<<<<
 *             t.thisptr = self.nest_engine.pop_token()
 * 
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_result == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":24
 * 
 *         if result is True:
 *             t.thisptr = self.nest_engine.pop_token()             # <<<<<<<<<<<<<<
 * 
 *         return t
 */
    __pyx_v_t->thisptr = __pyx_v_self->nest_engine->pop_token();
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":26
 *             t.thisptr = self.nest_engine.pop_token()
 * 
 *         return t             # <<<<<<<<<<<<<<
 * 
 *     cdef PyToken generate_arg_pytoken(self, bytes cmd):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  __pyx_r = ((struct PyToken *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cynest.kernel.SLIDataContainer.generate_func_pytoken", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":28
 *         return t
 * 
 *     cdef PyToken generate_arg_pytoken(self, bytes cmd):             # <<<<<<<<<<<<<<
 *         cdef PyToken t = PyToken()
 * 
 */

static struct PyToken *__pyx_f_6cynest_6kernel_16SLIDataContainer_generate_arg_pytoken(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *__pyx_v_self, PyObject *__pyx_v_cmd) {
  struct PyToken *__pyx_v_t = 0;
  struct PyToken *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_arg_pytoken", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":29
 * 
 *     cdef PyToken generate_arg_pytoken(self, bytes cmd):
 *         cdef PyToken t = PyToken()             # <<<<<<<<<<<<<<
 * 
 *         self.nest_engine.run("/ajvehwlksjdbjds " + cmd + " def")
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_PyToken)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct PyToken *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":31
 *         cdef PyToken t = PyToken()
 * 
 *         self.nest_engine.run("/ajvehwlksjdbjds " + cmd + " def")             # <<<<<<<<<<<<<<
 *         self.nest_engine.run("/ajvehwlksjdbjds lookup")
 * 
 */
  __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_kp_s_19), ((PyObject *)__pyx_v_cmd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_kp_s_20)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->nest_engine->run(__pyx_t_3);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":32
 * 
 *         self.nest_engine.run("/ajvehwlksjdbjds " + cmd + " def")
 *         self.nest_engine.run("/ajvehwlksjdbjds lookup")             # <<<<<<<<<<<<<<
 * 
 *         if self.nest_engine.pop():
 */
  __pyx_t_3 = __pyx_convert_string_from_py_(((PyObject *)__pyx_kp_b_21)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->nest_engine->run(__pyx_t_3);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":34
 *         self.nest_engine.run("/ajvehwlksjdbjds lookup")
 * 
 *         if self.nest_engine.pop():             # <<<<<<<<<<<<<<
 *             t.thisptr= self.nest_engine.pop_token()
 * 
 */
  __pyx_t_2 = __pyx_v_self->nest_engine->pop(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":35
 * 
 *         if self.nest_engine.pop():
 *             t.thisptr= self.nest_engine.pop_token()             # <<<<<<<<<<<<<<
 * 
 *         return t
 */
    __pyx_v_t->thisptr = __pyx_v_self->nest_engine->pop_token();
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":37
 *             t.thisptr= self.nest_engine.pop_token()
 * 
 *         return t             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  __pyx_r = ((struct PyToken *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cynest.kernel.SLIDataContainer.generate_arg_pytoken", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":40
 * 
 * 
 *     cdef bint add_command(self, bytes cmd):             # <<<<<<<<<<<<<<
 *         cdef PyToken token
 *         if not self.commands.has_key(cmd):
 */

static int __pyx_f_6cynest_6kernel_16SLIDataContainer_add_command(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *__pyx_v_self, PyObject *__pyx_v_cmd) {
  struct PyToken *__pyx_v_token = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_command", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":42
 *     cdef bint add_command(self, bytes cmd):
 *         cdef PyToken token
 *         if not self.commands.has_key(cmd):             # <<<<<<<<<<<<<<
 *             token = self.generate_func_pytoken(cmd)
 *             if token.thisptr:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self->commands, __pyx_n_s__has_key); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_cmd));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_cmd));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cmd));
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":43
 *         cdef PyToken token
 *         if not self.commands.has_key(cmd):
 *             token = self.generate_func_pytoken(cmd)             # <<<<<<<<<<<<<<
 *             if token.thisptr:
 *                 self.commands[cmd] = token
 */
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->__pyx_vtab)->generate_func_pytoken(__pyx_v_self, __pyx_v_cmd)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_token = ((struct PyToken *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":44
 *         if not self.commands.has_key(cmd):
 *             token = self.generate_func_pytoken(cmd)
 *             if token.thisptr:             # <<<<<<<<<<<<<<
 *                 self.commands[cmd] = token
 *                 return True
 */
    __pyx_t_5 = (__pyx_v_token->thisptr != 0);
    if (__pyx_t_5) {

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":45
 *             token = self.generate_func_pytoken(cmd)
 *             if token.thisptr:
 *                 self.commands[cmd] = token             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
      if (PyObject_SetItem(__pyx_v_self->commands, ((PyObject *)__pyx_v_cmd), ((PyObject *)__pyx_v_token)) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":46
 *             if token.thisptr:
 *                 self.commands[cmd] = token
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 return False
 */
      __pyx_r = 1;
      goto __pyx_L0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":48
 *                 return True
 *             else:
 *                 return False             # <<<<<<<<<<<<<<
 *         else:
 *             return True
 */
      __pyx_r = 0;
      goto __pyx_L0;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":50
 *                 return False
 *         else:
 *             return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cynest.kernel.SLIDataContainer.add_command", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":53
 * 
 * 
 *     cdef PyToken get_pytoken(self, bytes cmd):             # <<<<<<<<<<<<<<
 *         if self.commands.has_key(cmd):
 *             return self.commands[cmd]
 */

static struct PyToken *__pyx_f_6cynest_6kernel_16SLIDataContainer_get_pytoken(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *__pyx_v_self, PyObject *__pyx_v_cmd) {
  struct PyToken *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_pytoken", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":54
 * 
 *     cdef PyToken get_pytoken(self, bytes cmd):
 *         if self.commands.has_key(cmd):             # <<<<<<<<<<<<<<
 *             return self.commands[cmd]
 *         else:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self->commands, __pyx_n_s__has_key); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_cmd));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_cmd));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cmd));
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":55
 *     cdef PyToken get_pytoken(self, bytes cmd):
 *         if self.commands.has_key(cmd):
 *             return self.commands[cmd]             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_3 = PyObject_GetItem(__pyx_v_self->commands, ((PyObject *)__pyx_v_cmd)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6cynest_6kernel_PyToken))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((struct PyToken *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":57
 *             return self.commands[cmd]
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     cdef run(self, bytes cmd):
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(Py_None);
    __pyx_r = ((struct PyToken *)Py_None);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = ((struct PyToken *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.SLIDataContainer.get_pytoken", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":59
 *             return None
 * 
 *     cdef run(self, bytes cmd):             # <<<<<<<<<<<<<<
 *         cdef bytes command
 *         cdef PyToken t
 */

static PyObject *__pyx_f_6cynest_6kernel_16SLIDataContainer_run(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *__pyx_v_self, PyObject *__pyx_v_cmd) {
  PyObject *__pyx_v_command = 0;
  struct PyToken *__pyx_v_t = 0;
  PyObject *__pyx_v_composed_cmd = 0;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":64
 *         cdef composed_cmd
 * 
 *         m = re.search('^{ (.+?) } runprotected$', cmd)             # <<<<<<<<<<<<<<
 *         if hasattr(m, 'group'):
 *             command = m.group(1).encode('UTF-8')
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__search); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_22));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_22));
  __Pyx_INCREF(((PyObject *)__pyx_v_cmd));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_cmd));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_cmd));
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_m = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":65
 * 
 *         m = re.search('^{ (.+?) } runprotected$', cmd)
 *         if hasattr(m, 'group'):             # <<<<<<<<<<<<<<
 *             command = m.group(1).encode('UTF-8')
 *             composed_cmd = composed_protected_cmd
 */
  __pyx_t_4 = PyObject_HasAttr(__pyx_v_m, ((PyObject *)__pyx_n_s__group)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":66
 *         m = re.search('^{ (.+?) } runprotected$', cmd)
 *         if hasattr(m, 'group'):
 *             command = m.group(1).encode('UTF-8')             # <<<<<<<<<<<<<<
 *             composed_cmd = composed_protected_cmd
 *         else:
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__group); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_23), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__encode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_command = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":67
 *         if hasattr(m, 'group'):
 *             command = m.group(1).encode('UTF-8')
 *             composed_cmd = composed_protected_cmd             # <<<<<<<<<<<<<<
 *         else:
 *             command = cmd
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_6cynest_6kernel_composed_protected_cmd));
    __pyx_v_composed_cmd = ((PyObject *)__pyx_v_6cynest_6kernel_composed_protected_cmd);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":69
 *             composed_cmd = composed_protected_cmd
 *         else:
 *             command = cmd             # <<<<<<<<<<<<<<
 *             composed_cmd = composed_unprotected_cmd
 * 
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_cmd));
    __pyx_v_command = __pyx_v_cmd;

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":70
 *         else:
 *             command = cmd
 *             composed_cmd = composed_unprotected_cmd             # <<<<<<<<<<<<<<
 * 
 *         if re.match('^[^ /]+$', command):
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_6cynest_6kernel_composed_unprotected_cmd));
    __pyx_v_composed_cmd = ((PyObject *)__pyx_v_6cynest_6kernel_composed_unprotected_cmd);
  }
  __pyx_L3:;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":72
 *             composed_cmd = composed_unprotected_cmd
 * 
 *         if re.match('^[^ /]+$', command):             # <<<<<<<<<<<<<<
 *             if self.add_command(command):
 *                 t = self.commands[command]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__match); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_25));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_25));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_25));
  __Pyx_INCREF(((PyObject *)__pyx_v_command));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_command));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_command));
  __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":73
 * 
 *         if re.match('^[^ /]+$', command):
 *             if self.add_command(command):             # <<<<<<<<<<<<<<
 *                 t = self.commands[command]
 *                 return self.nest_engine.run_token(t.thisptr[0])
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->__pyx_vtab)->add_command(__pyx_v_self, __pyx_v_command);
    if (__pyx_t_4) {

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":74
 *         if re.match('^[^ /]+$', command):
 *             if self.add_command(command):
 *                 t = self.commands[command]             # <<<<<<<<<<<<<<
 *                 return self.nest_engine.run_token(t.thisptr[0])
 *             else:
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_self->commands, ((PyObject *)__pyx_v_command)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6cynest_6kernel_PyToken))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_t = ((struct PyToken *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":75
 *             if self.add_command(command):
 *                 t = self.commands[command]
 *                 return self.nest_engine.run_token(t.thisptr[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 return invalid_cmd
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->nest_engine->run_token((__pyx_v_t->thisptr[0]))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":77
 *                 return self.nest_engine.run_token(t.thisptr[0])
 *             else:
 *                 return invalid_cmd             # <<<<<<<<<<<<<<
 *         else:
 *             return composed_cmd
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_6cynest_6kernel_invalid_cmd));
      __pyx_r = ((PyObject *)__pyx_v_6cynest_6kernel_invalid_cmd);
      goto __pyx_L0;
    }
    __pyx_L5:;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":79
 *                 return invalid_cmd
 *         else:
 *             return composed_cmd             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_composed_cmd);
    __pyx_r = __pyx_v_composed_cmd;
    goto __pyx_L0;
  }
  __pyx_L4:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.SLIDataContainer.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_command);
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_composed_cmd);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_15cynest_signal_handler(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cynest_6kernel_15cynest_signal_handler = {__Pyx_NAMESTR("cynest_signal_handler"), (PyCFunction)__pyx_pw_6cynest_6kernel_15cynest_signal_handler, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6cynest_6kernel_15cynest_signal_handler(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_signal = 0;
  CYTHON_UNUSED PyObject *__pyx_v_frame = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cynest_signal_handler (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__signal,&__pyx_n_s__frame,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__signal)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__frame)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cynest_signal_handler", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cynest_signal_handler") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_signal = values[0];
    __pyx_v_frame = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cynest_signal_handler", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.cynest_signal_handler", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_14cynest_signal_handler(__pyx_self, __pyx_v_signal, __pyx_v_frame);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":31
 * 
 * 
 * def cynest_signal_handler(signal,frame):             # <<<<<<<<<<<<<<
 *     raise KeyboardInterrupt()
 * 
 */

static PyObject *__pyx_pf_6cynest_6kernel_14cynest_signal_handler(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_signal, CYTHON_UNUSED PyObject *__pyx_v_frame) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cynest_signal_handler", 0);

  /* "cynest/kernel.pyx":32
 * 
 * def cynest_signal_handler(signal,frame):
 *     raise KeyboardInterrupt()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_KeyboardInterrupt, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.cynest_signal_handler", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cynest_6kernel_10NESTEngine_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6cynest_6kernel_10NESTEngine_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine___cinit__(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":40
 *     cdef bint _protected
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr= new classes.NESTEngine()
 *         self.sli_container = SLIDataContainer()
 */

static int __pyx_pf_6cynest_6kernel_10NESTEngine___cinit__(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cynest/kernel.pyx":41
 * 
 *     def __cinit__(self):
 *         self.thisptr= new classes.NESTEngine()             # <<<<<<<<<<<<<<
 *         self.sli_container = SLIDataContainer()
 *         self.sli_container.initialize(self.thisptr)
 */
  __pyx_v_self->thisptr = new NESTEngine();

  /* "cynest/kernel.pyx":42
 *     def __cinit__(self):
 *         self.thisptr= new classes.NESTEngine()
 *         self.sli_container = SLIDataContainer()             # <<<<<<<<<<<<<<
 *         self.sli_container.initialize(self.thisptr)
 *         self._protected = True
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_SLIDataContainer)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sli_container);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->sli_container));
  __pyx_v_self->sli_container = ((struct __pyx_obj_6cynest_6kernel_SLIDataContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":43
 *         self.thisptr= new classes.NESTEngine()
 *         self.sli_container = SLIDataContainer()
 *         self.sli_container.initialize(self.thisptr)             # <<<<<<<<<<<<<<
 *         self._protected = True
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->initialize(__pyx_v_self->sli_container, __pyx_v_self->thisptr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":44
 *         self.sli_container = SLIDataContainer()
 *         self.sli_container.initialize(self.thisptr)
 *         self._protected = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_protected = 1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_6cynest_6kernel_10NESTEngine_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6cynest_6kernel_10NESTEngine_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6cynest_6kernel_10NESTEngine_2__dealloc__(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "cynest/kernel.pyx":46
 *         self._protected = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         print ("CyNEST says good bye.")
 *         del self.thisptr
 */

static void __pyx_pf_6cynest_6kernel_10NESTEngine_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cynest/kernel.pyx":47
 * 
 *     def __dealloc__(self):
 *         print ("CyNEST says good bye.")             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */
  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_26)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cynest/kernel.pyx":48
 *     def __dealloc__(self):
 *         print ("CyNEST says good bye.")
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def run_protected (self):
 */
  delete __pyx_v_self->thisptr;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_5run_protected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_5run_protected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_protected (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_4run_protected(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":50
 *         del self.thisptr
 * 
 *     def run_protected (self):             # <<<<<<<<<<<<<<
 *         if self._protected:
 *             return True
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_4run_protected(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_protected", 0);

  /* "cynest/kernel.pyx":51
 * 
 *     def run_protected (self):
 *         if self._protected:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  if (__pyx_v_self->_protected) {

    /* "cynest/kernel.pyx":52
 *     def run_protected (self):
 *         if self._protected:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "cynest/kernel.pyx":54
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def init(self, argv, modulepath):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.run_protected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_7init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6cynest_6kernel_10NESTEngine_6init[] = "\n        Startup the NEST engine.\n        argv: list of strings with NEST's command line arguments\n        modulepath: the path to CyNEST's startup file\n        The function will return true if startup succeded and\n        false otherwise.\n        This function is part of the low-level API.\n        ";
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_7init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_argv = 0;
  PyObject *__pyx_v_modulepath = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__argv,&__pyx_n_s__modulepath,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__argv)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__modulepath)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_argv = values[0];
    __pyx_v_modulepath = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_6init(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), __pyx_v_argv, __pyx_v_modulepath);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":56
 *             return False
 * 
 *     def init(self, argv, modulepath):             # <<<<<<<<<<<<<<
 *         """
 *         Startup the NEST engine.
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_6init(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_argv, PyObject *__pyx_v_modulepath) {
  PyObject *__pyx_v_argv_bytes = NULL;
  PyObject *__pyx_v_modulepath_bytes = 0;
  int __pyx_v_result;
  struct __pyx_obj_6cynest_6kernel_CythonEntry *__pyx_v_cE = NULL;
  PyObject *__pyx_v_str = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  std::vector<std::string> __pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "cynest/kernel.pyx":65
 *         This function is part of the low-level API.
 *         """
 *         if len(argv[0]) == 0:             # <<<<<<<<<<<<<<
 *             argv[0]='cynest'
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_argv, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 == 0);
  if (__pyx_t_3) {

    /* "cynest/kernel.pyx":66
 *         """
 *         if len(argv[0]) == 0:
 *             argv[0]='cynest'             # <<<<<<<<<<<<<<
 * 
 *         argv_bytes= [ str.encode('UTF-8') for str in argv]
 */
    if (__Pyx_SetItemInt(__pyx_v_argv, 0, ((PyObject *)__pyx_n_s__cynest), sizeof(long), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "cynest/kernel.pyx":68
 *             argv[0]='cynest'
 * 
 *         argv_bytes= [ str.encode('UTF-8') for str in argv]             # <<<<<<<<<<<<<<
 *         cdef bytes modulepath_bytes=modulepath.encode('UTF-8')
 *         result= self.thisptr.init(argv_bytes, modulepath_bytes)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(__pyx_v_argv) || PyTuple_CheckExact(__pyx_v_argv)) {
    __pyx_t_4 = __pyx_v_argv; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_argv); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_4);
      if (unlikely(!__pyx_t_6)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF(__pyx_v_str);
    __pyx_v_str = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_str, __pyx_n_s__encode); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_argv_bytes = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cynest/kernel.pyx":69
 * 
 *         argv_bytes= [ str.encode('UTF-8') for str in argv]
 *         cdef bytes modulepath_bytes=modulepath.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         result= self.thisptr.init(argv_bytes, modulepath_bytes)
 * 
 */
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_modulepath, __pyx_n_s__encode); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_k_tuple_28), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_modulepath_bytes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":70
 *         argv_bytes= [ str.encode('UTF-8') for str in argv]
 *         cdef bytes modulepath_bytes=modulepath.encode('UTF-8')
 *         result= self.thisptr.init(argv_bytes, modulepath_bytes)             # <<<<<<<<<<<<<<
 * 
 *         # These methods initialize the system for cython neurons
 */
  __pyx_t_8 = __pyx_convert_vector_from_py_std_3a__3a_string(((PyObject *)__pyx_v_argv_bytes)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_9 = __pyx_convert_string_from_py_(((PyObject *)__pyx_v_modulepath_bytes)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = __pyx_v_self->thisptr->init(__pyx_t_8, __pyx_t_9);

  /* "cynest/kernel.pyx":73
 * 
 *         # These methods initialize the system for cython neurons
 *         cE = CythonEntry()             # <<<<<<<<<<<<<<
 *         cE.putInit(&cInit)
 *         cE.putCalibrate(&cCalibrate)
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_CythonEntry)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cE = ((struct __pyx_obj_6cynest_6kernel_CythonEntry *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":74
 *         # These methods initialize the system for cython neurons
 *         cE = CythonEntry()
 *         cE.putInit(&cInit)             # <<<<<<<<<<<<<<
 *         cE.putCalibrate(&cCalibrate)
 *         cE.putUpdate(&cUpdate)
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *)__pyx_v_cE->__pyx_vtab)->putInit(__pyx_v_cE, (&__pyx_f_6cynest_6kernel_cInit));

  /* "cynest/kernel.pyx":75
 *         cE = CythonEntry()
 *         cE.putInit(&cInit)
 *         cE.putCalibrate(&cCalibrate)             # <<<<<<<<<<<<<<
 *         cE.putUpdate(&cUpdate)
 *         cE.putSetStatus(&cSetStatus)
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *)__pyx_v_cE->__pyx_vtab)->putCalibrate(__pyx_v_cE, (&__pyx_f_6cynest_6kernel_cCalibrate));

  /* "cynest/kernel.pyx":76
 *         cE.putInit(&cInit)
 *         cE.putCalibrate(&cCalibrate)
 *         cE.putUpdate(&cUpdate)             # <<<<<<<<<<<<<<
 *         cE.putSetStatus(&cSetStatus)
 *         cE.putGetStatus(&cGetStatus)
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *)__pyx_v_cE->__pyx_vtab)->putUpdate(__pyx_v_cE, (&__pyx_f_6cynest_6kernel_cUpdate));

  /* "cynest/kernel.pyx":77
 *         cE.putCalibrate(&cCalibrate)
 *         cE.putUpdate(&cUpdate)
 *         cE.putSetStatus(&cSetStatus)             # <<<<<<<<<<<<<<
 *         cE.putGetStatus(&cGetStatus)
 *         cE.putStdVars(&cStdVars)
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *)__pyx_v_cE->__pyx_vtab)->putSetStatus(__pyx_v_cE, (&__pyx_f_6cynest_6kernel_cSetStatus));

  /* "cynest/kernel.pyx":78
 *         cE.putUpdate(&cUpdate)
 *         cE.putSetStatus(&cSetStatus)
 *         cE.putGetStatus(&cGetStatus)             # <<<<<<<<<<<<<<
 *         cE.putStdVars(&cStdVars)
 *         cE.putDestroy(&cDestroy)
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *)__pyx_v_cE->__pyx_vtab)->putGetStatus(__pyx_v_cE, (&__pyx_f_6cynest_6kernel_cGetStatus));

  /* "cynest/kernel.pyx":79
 *         cE.putSetStatus(&cSetStatus)
 *         cE.putGetStatus(&cGetStatus)
 *         cE.putStdVars(&cStdVars)             # <<<<<<<<<<<<<<
 *         cE.putDestroy(&cDestroy)
 * 
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *)__pyx_v_cE->__pyx_vtab)->putStdVars(__pyx_v_cE, (&__pyx_f_6cynest_6kernel_cStdVars));

  /* "cynest/kernel.pyx":80
 *         cE.putGetStatus(&cGetStatus)
 *         cE.putStdVars(&cStdVars)
 *         cE.putDestroy(&cDestroy)             # <<<<<<<<<<<<<<
 * 
 *         setModelsFolder(os.path.dirname(os.path.realpath(__file__)))
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *)__pyx_v_cE->__pyx_vtab)->putDestroy(__pyx_v_cE, (&__pyx_f_6cynest_6kernel_cDestroy));

  /* "cynest/kernel.pyx":82
 *         cE.putDestroy(&cDestroy)
 * 
 *         setModelsFolder(os.path.dirname(os.path.realpath(__file__)))             # <<<<<<<<<<<<<<
 *         cE.registerNeurons(spFct.getModelsFolder())
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__dirname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__path); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__realpath); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s____file__); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_7)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_6cynest_6kernel_setModelsFolder(((PyObject*)__pyx_t_7));
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "cynest/kernel.pyx":83
 * 
 *         setModelsFolder(os.path.dirname(os.path.realpath(__file__)))
 *         cE.registerNeurons(spFct.getModelsFolder())             # <<<<<<<<<<<<<<
 * 
 *         if result:
 */
  ((struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry *)__pyx_v_cE->__pyx_vtab)->registerNeurons(__pyx_v_cE, ((struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions *)__pyx_v_6cynest_6kernel_spFct->__pyx_vtab)->getModelsFolder(__pyx_v_6cynest_6kernel_spFct));

  /* "cynest/kernel.pyx":85
 *         cE.registerNeurons(spFct.getModelsFolder())
 * 
 *         if result:             # <<<<<<<<<<<<<<
 *            signal.signal(signal.SIGINT, cynest_signal_handler)
 *         return result
 */
  if (__pyx_v_result) {

    /* "cynest/kernel.pyx":86
 * 
 *         if result:
 *            signal.signal(signal.SIGINT, cynest_signal_handler)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
    __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__signal); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__signal); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__signal); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__SIGINT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s_29); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_1 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "cynest/kernel.pyx":87
 *         if result:
 *            signal.signal(signal.SIGINT, cynest_signal_handler)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def push(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_argv_bytes);
  __Pyx_XDECREF(__pyx_v_modulepath_bytes);
  __Pyx_XDECREF((PyObject *)__pyx_v_cE);
  __Pyx_XDECREF(__pyx_v_str);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_9push(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_6cynest_6kernel_10NESTEngine_8push[] = "\n        Push a Python object onto NEST's operand stack.\n        value can be almost any Python object.\n        Not pushable are dictionaries with non-string keys.\n        This function is part of the low-level API.\n        ";
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_9push(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_8push(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), ((PyObject *)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":89
 *         return result
 * 
 *     def push(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         Push a Python object onto NEST's operand stack.
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_8push(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push", 0);

  /* "cynest/kernel.pyx":97
 *         """
 * 
 *         return self.thisptr.push(value)             # <<<<<<<<<<<<<<
 * 
 *     def pop(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->push(__pyx_v_value)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.push", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_11pop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6cynest_6kernel_10NESTEngine_10pop[] = "\n        Pop the top value from NEST's operand stack and return it as\n        Python object.\n        If the stack is empty, a NESTError exception is raised.\n        This function is part of the low-level API.\n        ";
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_11pop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_10pop(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":99
 *         return self.thisptr.push(value)
 * 
 *     def pop(self):             # <<<<<<<<<<<<<<
 *         """
 *         Pop the top value from NEST's operand stack and return it as
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_10pop(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop", 0);

  /* "cynest/kernel.pyx":106
 *         This function is part of the low-level API.
 *         """
 *         return self.thisptr.pop()             # <<<<<<<<<<<<<<
 * 
 *     def run(self, command):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->thisptr->pop(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_13run(PyObject *__pyx_v_self, PyObject *__pyx_v_command); /*proto*/
static char __pyx_doc_6cynest_6kernel_10NESTEngine_12run[] = "\n        Execute a SLI command string.\n        SLI is the native language of NEST. This function takes a string which is then parsed and executed by\n        NEST. The string may contain an arbitrary sequence of NEST commands.\n        If errors occur during execution, they are reported back to Python as NESTError exections.\n        This function is part of the low-level API.\n        ";
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_13run(PyObject *__pyx_v_self, PyObject *__pyx_v_command) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_12run(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), ((PyObject *)__pyx_v_command));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":108
 *         return self.thisptr.pop()
 * 
 *     def run(self, command):             # <<<<<<<<<<<<<<
 *         """
 *         Execute a SLI command string.
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_12run(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_command) {
  PyObject *__pyx_v_command_bytes = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "cynest/kernel.pyx":116
 *         This function is part of the low-level API.
 *         """
 *         cdef bytes command_bytes=command.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         result = self.sli_container.run(command_bytes)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_command, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_30), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_command_bytes = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":118
 *         cdef bytes command_bytes=command.encode('UTF-8')
 * 
 *         result = self.sli_container.run(command_bytes)             # <<<<<<<<<<<<<<
 *         self._protected = False
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->run(__pyx_v_self->sli_container, __pyx_v_command_bytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":119
 * 
 *         result = self.sli_container.run(command_bytes)
 *         self._protected = False             # <<<<<<<<<<<<<<
 * 
 *         if result is invalid_cmd:
 */
  __pyx_v_self->_protected = 0;

  /* "cynest/kernel.pyx":121
 *         self._protected = False
 * 
 *         if result is invalid_cmd:             # <<<<<<<<<<<<<<
 *             print NESTError("Cannot generate PyToken for the following command: " + command + "\nThe command will be executed in standard mode.")
 *             result = self.thisptr.run(command_bytes)
 */
  __pyx_t_3 = (__pyx_v_result == ((PyObject *)__pyx_v_6cynest_6kernel_invalid_cmd));
  if (__pyx_t_3) {

    /* "cynest/kernel.pyx":122
 * 
 *         if result is invalid_cmd:
 *             print NESTError("Cannot generate PyToken for the following command: " + command + "\nThe command will be executed in standard mode.")             # <<<<<<<<<<<<<<
 *             result = self.thisptr.run(command_bytes)
 *             self._protected = True
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_kp_s_31), __pyx_v_command); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_kp_s_32)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cynest/kernel.pyx":123
 *         if result is invalid_cmd:
 *             print NESTError("Cannot generate PyToken for the following command: " + command + "\nThe command will be executed in standard mode.")
 *             result = self.thisptr.run(command_bytes)             # <<<<<<<<<<<<<<
 *             self._protected = True
 *         elif result is composed_protected_cmd:
 */
    __pyx_t_5 = __pyx_convert_string_from_py_(((PyObject *)__pyx_v_command_bytes)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->run(__pyx_t_5)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_result);
    __pyx_v_result = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cynest/kernel.pyx":124
 *             print NESTError("Cannot generate PyToken for the following command: " + command + "\nThe command will be executed in standard mode.")
 *             result = self.thisptr.run(command_bytes)
 *             self._protected = True             # <<<<<<<<<<<<<<
 *         elif result is composed_protected_cmd:
 *             result = self.thisptr.run(command_bytes)
 */
    __pyx_v_self->_protected = 1;
    goto __pyx_L3;
  }

  /* "cynest/kernel.pyx":125
 *             result = self.thisptr.run(command_bytes)
 *             self._protected = True
 *         elif result is composed_protected_cmd:             # <<<<<<<<<<<<<<
 *             result = self.thisptr.run(command_bytes)
 *             self._protected = True
 */
  __pyx_t_3 = (__pyx_v_result == ((PyObject *)__pyx_v_6cynest_6kernel_composed_protected_cmd));
  if (__pyx_t_3) {

    /* "cynest/kernel.pyx":126
 *             self._protected = True
 *         elif result is composed_protected_cmd:
 *             result = self.thisptr.run(command_bytes)             # <<<<<<<<<<<<<<
 *             self._protected = True
 *         elif result is composed_unprotected_cmd:
 */
    __pyx_t_5 = __pyx_convert_string_from_py_(((PyObject *)__pyx_v_command_bytes)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->run(__pyx_t_5)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_result);
    __pyx_v_result = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cynest/kernel.pyx":127
 *         elif result is composed_protected_cmd:
 *             result = self.thisptr.run(command_bytes)
 *             self._protected = True             # <<<<<<<<<<<<<<
 *         elif result is composed_unprotected_cmd:
 *             result = self.thisptr.run(command_bytes)
 */
    __pyx_v_self->_protected = 1;
    goto __pyx_L3;
  }

  /* "cynest/kernel.pyx":128
 *             result = self.thisptr.run(command_bytes)
 *             self._protected = True
 *         elif result is composed_unprotected_cmd:             # <<<<<<<<<<<<<<
 *             result = self.thisptr.run(command_bytes)
 *             self._protected = False
 */
  __pyx_t_3 = (__pyx_v_result == ((PyObject *)__pyx_v_6cynest_6kernel_composed_unprotected_cmd));
  if (__pyx_t_3) {

    /* "cynest/kernel.pyx":129
 *             self._protected = True
 *         elif result is composed_unprotected_cmd:
 *             result = self.thisptr.run(command_bytes)             # <<<<<<<<<<<<<<
 *             self._protected = False
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_(((PyObject *)__pyx_v_command_bytes)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->run(__pyx_t_5)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_result);
    __pyx_v_result = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cynest/kernel.pyx":130
 *         elif result is composed_unprotected_cmd:
 *             result = self.thisptr.run(command_bytes)
 *             self._protected = False             # <<<<<<<<<<<<<<
 * 
 *         signal.signal(signal.SIGINT, cynest_signal_handler)
 */
    __pyx_v_self->_protected = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "cynest/kernel.pyx":132
 *             self._protected = False
 * 
 *         signal.signal(signal.SIGINT, cynest_signal_handler)             # <<<<<<<<<<<<<<
 * 
 *         processNeuronCreation(command_bytes) # checks if the command is a creation one and if the neuron parameter is a dynamic one
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__signal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__signal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__signal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__SIGINT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s_29); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cynest/kernel.pyx":134
 *         signal.signal(signal.SIGINT, cynest_signal_handler)
 * 
 *         processNeuronCreation(command_bytes) # checks if the command is a creation one and if the neuron parameter is a dynamic one             # <<<<<<<<<<<<<<
 * 
 *         return result
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s_33); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_command_bytes));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_command_bytes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_command_bytes));
  __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":136
 *         processNeuronCreation(command_bytes) # checks if the command is a creation one and if the neuron parameter is a dynamic one
 * 
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     cpdef run_pytoken(self, PyToken command):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_command_bytes);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":138
 *         return result
 * 
 *     cpdef run_pytoken(self, PyToken command):             # <<<<<<<<<<<<<<
 *         """
 *         Execute a PyDatum object.
 */

static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_15run_pytoken(PyObject *__pyx_v_self, PyObject *__pyx_v_command); /*proto*/
static PyObject *__pyx_f_6cynest_6kernel_10NESTEngine_run_pytoken(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, struct PyToken *__pyx_v_command, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_pytoken", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__run_pytoken); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_15run_pytoken)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_command));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_command));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_command));
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cynest/kernel.pyx":143
 *         This function is part of the low-level API.
 *         """
 *         return self.thisptr.run_token(command.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 *     def pop_pytoken(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->run_token((__pyx_v_command->thisptr[0]))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.run_pytoken", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_15run_pytoken(PyObject *__pyx_v_self, PyObject *__pyx_v_command); /*proto*/
static char __pyx_doc_6cynest_6kernel_10NESTEngine_14run_pytoken[] = "\n        Execute a PyDatum object.\n        This function is part of the low-level API.\n        ";
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_15run_pytoken(PyObject *__pyx_v_self, PyObject *__pyx_v_command) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_pytoken (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_command), __pyx_ptype_6cynest_6kernel_PyToken, 1, "command", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_14run_pytoken(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), ((struct PyToken *)__pyx_v_command));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":138
 *         return result
 * 
 *     cpdef run_pytoken(self, PyToken command):             # <<<<<<<<<<<<<<
 *         """
 *         Execute a PyDatum object.
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_14run_pytoken(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, struct PyToken *__pyx_v_command) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_pytoken", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->run_pytoken(__pyx_v_self, __pyx_v_command, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.run_pytoken", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_17pop_pytoken(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_17pop_pytoken(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_pytoken (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_16pop_pytoken(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":145
 *         return self.thisptr.run_token(command.thisptr[0])
 * 
 *     def pop_pytoken(self):             # <<<<<<<<<<<<<<
 *          t= PyToken()
 *          t.thisptr= self.thisptr.pop_token()
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_16pop_pytoken(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self) {
  struct PyToken *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_pytoken", 0);

  /* "cynest/kernel.pyx":146
 * 
 *     def pop_pytoken(self):
 *          t= PyToken()             # <<<<<<<<<<<<<<
 *          t.thisptr= self.thisptr.pop_token()
 *          return t
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_PyToken)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct PyToken *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":147
 *     def pop_pytoken(self):
 *          t= PyToken()
 *          t.thisptr= self.thisptr.pop_token()             # <<<<<<<<<<<<<<
 *          return t
 * 
 */
  __pyx_v_t->thisptr = __pyx_v_self->thisptr->pop_token();

  /* "cynest/kernel.pyx":148
 *          t= PyToken()
 *          t.thisptr= self.thisptr.pop_token()
 *          return t             # <<<<<<<<<<<<<<
 * 
 *     cpdef push_pytoken(self, PyToken obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = ((PyObject *)__pyx_v_t);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.pop_pytoken", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":150
 *          return t
 * 
 *     cpdef push_pytoken(self, PyToken obj):             # <<<<<<<<<<<<<<
 *           """
 *           Push a token to NEST's operand stack.
 */

static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_19push_pytoken(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_f_6cynest_6kernel_10NESTEngine_push_pytoken(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, struct PyToken *__pyx_v_obj, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_pytoken", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push_pytoken); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_19push_pytoken)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_obj));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_obj));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_obj));
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cynest/kernel.pyx":155
 *           This function is part of the low-level API.
 *           """
 *           if obj.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.push_token(obj.thisptr[0])
 *           else:
 */
  __pyx_t_4 = (__pyx_v_obj->thisptr != 0);
  if (__pyx_t_4) {

    /* "cynest/kernel.pyx":156
 *           """
 *           if obj.thisptr:
 *             return self.thisptr.push_token(obj.thisptr[0])             # <<<<<<<<<<<<<<
 *           else:
 *             raise NESTError("Cannot push empty PyToken.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->push_token((__pyx_v_obj->thisptr[0]))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "cynest/kernel.pyx":158
 *             return self.thisptr.push_token(obj.thisptr[0])
 *           else:
 *             raise NESTError("Cannot push empty PyToken.")             # <<<<<<<<<<<<<<
 * 
 *     def push_connections(self, connectome):
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_35), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.push_pytoken", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_19push_pytoken(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static char __pyx_doc_6cynest_6kernel_10NESTEngine_18push_pytoken[] = "\n          Push a token to NEST's operand stack.\n          This function is part of the low-level API.\n          ";
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_19push_pytoken(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_pytoken (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), __pyx_ptype_6cynest_6kernel_PyToken, 1, "obj", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_18push_pytoken(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), ((struct PyToken *)__pyx_v_obj));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":150
 *          return t
 * 
 *     cpdef push_pytoken(self, PyToken obj):             # <<<<<<<<<<<<<<
 *           """
 *           Push a token to NEST's operand stack.
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_18push_pytoken(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, struct PyToken *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_pytoken", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->push_pytoken(__pyx_v_self, __pyx_v_obj, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.push_pytoken", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_21push_connections(PyObject *__pyx_v_self, PyObject *__pyx_v_connectome); /*proto*/
static char __pyx_doc_6cynest_6kernel_10NESTEngine_20push_connections[] = "\n        Push a list of dictionaries with connection information to NEST. Each dictionary is converted to a NEST ConnectionDatum\n        which encapsulates the five-tuple defining a connection.\n        This function is part of the low-level API.\n        ";
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_21push_connections(PyObject *__pyx_v_self, PyObject *__pyx_v_connectome) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_connections (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_20push_connections(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), ((PyObject *)__pyx_v_connectome));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":160
 *             raise NESTError("Cannot push empty PyToken.")
 * 
 *     def push_connections(self, connectome):             # <<<<<<<<<<<<<<
 *         """
 *         Push a list of dictionaries with connection information to NEST. Each dictionary is converted to a NEST ConnectionDatum
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_20push_connections(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_connectome) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_connections", 0);

  /* "cynest/kernel.pyx":166
 *         This function is part of the low-level API.
 *         """
 *         return self.thisptr.push_connections(connectome)             # <<<<<<<<<<<<<<
 * 
 *     def check_engine(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->push_connections(__pyx_v_connectome)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.push_connections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_23check_engine(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6cynest_6kernel_10NESTEngine_22check_engine[] = "\n        Returns true if the object is properly initialized and false otherwise.\n        ";
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_23check_engine(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_engine (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_22check_engine(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":168
 *         return self.thisptr.push_connections(connectome)
 * 
 *     def check_engine(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns true if the object is properly initialized and false otherwise.
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_22check_engine(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_engine", 0);

  /* "cynest/kernel.pyx":172
 *         Returns true if the object is properly initialized and false otherwise.
 *         """
 *         return self.thisptr.check_engine()             # <<<<<<<<<<<<<<
 * 
 *     def convergent_connect(self, pre, post, weight, delay, model):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->check_engine()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.check_engine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_25convergent_connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_25convergent_connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pre = 0;
  PyObject *__pyx_v_post = 0;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_v_delay = 0;
  PyObject *__pyx_v_model = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convergent_connect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pre,&__pyx_n_s__post,&__pyx_n_s__weight,&__pyx_n_s__delay,&__pyx_n_s__model,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pre)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__post)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convergent_connect", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__weight)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convergent_connect", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__delay)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convergent_connect", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__model)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convergent_connect", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "convergent_connect") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_pre = values[0];
    __pyx_v_post = values[1];
    __pyx_v_weight = values[2];
    __pyx_v_delay = values[3];
    __pyx_v_model = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convergent_connect", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.convergent_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_24convergent_connect(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), __pyx_v_pre, __pyx_v_post, __pyx_v_weight, __pyx_v_delay, __pyx_v_model);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":174
 *         return self.thisptr.check_engine()
 * 
 *     def convergent_connect(self, pre, post, weight, delay, model):             # <<<<<<<<<<<<<<
 *         self.sli_container.add_command('ConvergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('ConvergentConnect'.encode('UTF-8'))
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_24convergent_connect(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_post, PyObject *__pyx_v_weight, PyObject *__pyx_v_delay, PyObject *__pyx_v_model) {
  struct PyToken *__pyx_v_cmd = 0;
  struct PyToken *__pyx_v_m = 0;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convergent_connect", 0);
  __Pyx_INCREF(__pyx_v_weight);
  __Pyx_INCREF(__pyx_v_delay);

  /* "cynest/kernel.pyx":175
 * 
 *     def convergent_connect(self, pre, post, weight, delay, model):
 *         self.sli_container.add_command('ConvergentConnect'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken cmd = self.sli_container.get_pytoken('ConvergentConnect'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_n_s__ConvergentConnect), __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_36), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->add_command(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":176
 *     def convergent_connect(self, pre, post, weight, delay, model):
 *         self.sli_container.add_command('ConvergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('ConvergentConnect'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 * 
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_n_s__ConvergentConnect), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_37), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->get_pytoken(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cmd = ((struct PyToken *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":177
 *         self.sli_container.add_command('ConvergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('ConvergentConnect'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 *         if weight == None and delay == None:
 */
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_38), __pyx_v_model); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_t_2), __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_39), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->generate_arg_pytoken(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_m = ((struct PyToken *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":179
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 * 
 *         if weight == None and delay == None:             # <<<<<<<<<<<<<<
 *             for d in post :
 *                 self.push(pre)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_weight, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_delay, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_3;
  }
  if (__pyx_t_5) {

    /* "cynest/kernel.pyx":180
 * 
 *         if weight == None and delay == None:
 *             for d in post :             # <<<<<<<<<<<<<<
 *                 self.push(pre)
 *                 self.push(d)
 */
    if (PyList_CheckExact(__pyx_v_post) || PyTuple_CheckExact(__pyx_v_post)) {
      __pyx_t_1 = __pyx_v_post; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_post); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_1)) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_1)) {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF(__pyx_v_d);
      __pyx_v_d = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "cynest/kernel.pyx":181
 *         if weight == None and delay == None:
 *             for d in post :
 *                 self.push(pre)             # <<<<<<<<<<<<<<
 *                 self.push(d)
 *                 self.push_pytoken(m)
 */
      __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_pre);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_pre);
      __Pyx_GIVEREF(__pyx_v_pre);
      __pyx_t_9 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "cynest/kernel.pyx":182
 *             for d in post :
 *                 self.push(pre)
 *                 self.push(d)             # <<<<<<<<<<<<<<
 *                 self.push_pytoken(m)
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 */
      __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_d);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_d);
      __Pyx_GIVEREF(__pyx_v_d);
      __pyx_t_2 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "cynest/kernel.pyx":183
 *                 self.push(pre)
 *                 self.push(d)
 *                 self.push_pytoken(m)             # <<<<<<<<<<<<<<
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 * 
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->push_pytoken(__pyx_v_self, __pyx_v_m, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "cynest/kernel.pyx":184
 *                 self.push(d)
 *                 self.push_pytoken(m)
 *                 self.run_pytoken(cmd) # always run in unprotected mode             # <<<<<<<<<<<<<<
 * 
 *         elif weight != None and delay != None:
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->run_pytoken(__pyx_v_self, __pyx_v_cmd, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }

  /* "cynest/kernel.pyx":186
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 * 
 *         elif weight != None and delay != None:             # <<<<<<<<<<<<<<
 *             weight = broadcast(weight, len(pre), (float,), "weight")
 *             if len(weight) != len(pre):
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_weight, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_delay, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_5;
  }
  if (__pyx_t_4) {

    /* "cynest/kernel.pyx":187
 * 
 *         elif weight != None and delay != None:
 *             weight = broadcast(weight, len(pre), (float,), "weight")             # <<<<<<<<<<<<<<
 *             if len(weight) != len(pre):
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(pre)")
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__broadcast); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_Length(__pyx_v_pre); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)((PyObject*)(&PyFloat_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_weight);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_weight);
    __Pyx_GIVEREF(__pyx_v_weight);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 2, ((PyObject *)__pyx_t_8));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__weight));
    PyTuple_SET_ITEM(__pyx_t_9, 3, ((PyObject *)__pyx_n_s__weight));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__weight));
    __pyx_t_2 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_v_weight);
    __pyx_v_weight = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "cynest/kernel.pyx":188
 *         elif weight != None and delay != None:
 *             weight = broadcast(weight, len(pre), (float,), "weight")
 *             if len(weight) != len(pre):             # <<<<<<<<<<<<<<
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(pre)")
 *             delay = broadcast(delay, len(pre), (float,), "delay")
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_weight); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = PyObject_Length(__pyx_v_pre); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_t_6 != __pyx_t_10);
    if (__pyx_t_4) {

      /* "cynest/kernel.pyx":189
 *             weight = broadcast(weight, len(pre), (float,), "weight")
 *             if len(weight) != len(pre):
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(pre)")             # <<<<<<<<<<<<<<
 *             delay = broadcast(delay, len(pre), (float,), "delay")
 *             if len(delay) != len(pre):
 */
      __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_k_tuple_41), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "cynest/kernel.pyx":190
 *             if len(weight) != len(pre):
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(pre)")
 *             delay = broadcast(delay, len(pre), (float,), "delay")             # <<<<<<<<<<<<<<
 *             if len(delay) != len(pre):
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(pre)")
 */
    __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__broadcast); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyObject_Length(__pyx_v_pre); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)(&PyFloat_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_delay);
    __Pyx_GIVEREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__delay));
    PyTuple_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_n_s__delay));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__delay));
    __pyx_t_8 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_v_delay);
    __pyx_v_delay = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cynest/kernel.pyx":191
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(pre)")
 *             delay = broadcast(delay, len(pre), (float,), "delay")
 *             if len(delay) != len(pre):             # <<<<<<<<<<<<<<
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(pre)")
 * 
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_delay); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = PyObject_Length(__pyx_v_pre); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_t_10 != __pyx_t_6);
    if (__pyx_t_4) {

      /* "cynest/kernel.pyx":192
 *             delay = broadcast(delay, len(pre), (float,), "delay")
 *             if len(delay) != len(pre):
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(pre)")             # <<<<<<<<<<<<<<
 * 
 *             for d in post:
 */
      __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_43), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "cynest/kernel.pyx":194
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(pre)")
 * 
 *             for d in post:             # <<<<<<<<<<<<<<
 *                 self.push(pre)
 *                 self.push(d)
 */
    if (PyList_CheckExact(__pyx_v_post) || PyTuple_CheckExact(__pyx_v_post)) {
      __pyx_t_2 = __pyx_v_post; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_post); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF(__pyx_v_d);
      __pyx_v_d = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "cynest/kernel.pyx":195
 * 
 *             for d in post:
 *                 self.push(pre)             # <<<<<<<<<<<<<<
 *                 self.push(d)
 *                 self.push(weight)
 */
      __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_pre);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_pre);
      __Pyx_GIVEREF(__pyx_v_pre);
      __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "cynest/kernel.pyx":196
 *             for d in post:
 *                 self.push(pre)
 *                 self.push(d)             # <<<<<<<<<<<<<<
 *                 self.push(weight)
 *                 self.push(delay)
 */
      __pyx_t_8 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_d);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_d);
      __Pyx_GIVEREF(__pyx_v_d);
      __pyx_t_1 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cynest/kernel.pyx":197
 *                 self.push(pre)
 *                 self.push(d)
 *                 self.push(weight)             # <<<<<<<<<<<<<<
 *                 self.push(delay)
 *                 self.push_pytoken(m)
 */
      __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_weight);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_weight);
      __Pyx_GIVEREF(__pyx_v_weight);
      __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "cynest/kernel.pyx":198
 *                 self.push(d)
 *                 self.push(weight)
 *                 self.push(delay)             # <<<<<<<<<<<<<<
 *                 self.push_pytoken(m)
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 */
      __pyx_t_8 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_delay);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_delay);
      __Pyx_GIVEREF(__pyx_v_delay);
      __pyx_t_1 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cynest/kernel.pyx":199
 *                 self.push(weight)
 *                 self.push(delay)
 *                 self.push_pytoken(m)             # <<<<<<<<<<<<<<
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 * 
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->push_pytoken(__pyx_v_self, __pyx_v_m, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cynest/kernel.pyx":200
 *                 self.push(delay)
 *                 self.push_pytoken(m)
 *                 self.run_pytoken(cmd) # always run in unprotected mode             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->run_pytoken(__pyx_v_self, __pyx_v_cmd, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "cynest/kernel.pyx":203
 * 
 *         else:
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")             # <<<<<<<<<<<<<<
 * 
 *     def divergent_connect(self, pre, post, weight, delay, model):
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_45), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.convergent_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cmd);
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_weight);
  __Pyx_XDECREF(__pyx_v_delay);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_27divergent_connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_27divergent_connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pre = 0;
  PyObject *__pyx_v_post = 0;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_v_delay = 0;
  PyObject *__pyx_v_model = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("divergent_connect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pre,&__pyx_n_s__post,&__pyx_n_s__weight,&__pyx_n_s__delay,&__pyx_n_s__model,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pre)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__post)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("divergent_connect", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__weight)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("divergent_connect", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__delay)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("divergent_connect", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__model)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("divergent_connect", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "divergent_connect") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_pre = values[0];
    __pyx_v_post = values[1];
    __pyx_v_weight = values[2];
    __pyx_v_delay = values[3];
    __pyx_v_model = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("divergent_connect", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.divergent_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_26divergent_connect(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), __pyx_v_pre, __pyx_v_post, __pyx_v_weight, __pyx_v_delay, __pyx_v_model);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":205
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")
 * 
 *     def divergent_connect(self, pre, post, weight, delay, model):             # <<<<<<<<<<<<<<
 *         self.sli_container.add_command('DivergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('DivergentConnect'.encode('UTF-8'))
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_26divergent_connect(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_post, PyObject *__pyx_v_weight, PyObject *__pyx_v_delay, PyObject *__pyx_v_model) {
  struct PyToken *__pyx_v_cmd = 0;
  struct PyToken *__pyx_v_m = 0;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("divergent_connect", 0);
  __Pyx_INCREF(__pyx_v_weight);
  __Pyx_INCREF(__pyx_v_delay);

  /* "cynest/kernel.pyx":206
 * 
 *     def divergent_connect(self, pre, post, weight, delay, model):
 *         self.sli_container.add_command('DivergentConnect'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken cmd = self.sli_container.get_pytoken('DivergentConnect'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_n_s__DivergentConnect), __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_46), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->add_command(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":207
 *     def divergent_connect(self, pre, post, weight, delay, model):
 *         self.sli_container.add_command('DivergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('DivergentConnect'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 * 
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_n_s__DivergentConnect), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_47), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->get_pytoken(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cmd = ((struct PyToken *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":208
 *         self.sli_container.add_command('DivergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('DivergentConnect'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 *         if weight == None and delay == None:
 */
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_38), __pyx_v_model); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_t_2), __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_48), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->generate_arg_pytoken(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_m = ((struct PyToken *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":210
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 * 
 *         if weight == None and delay == None:             # <<<<<<<<<<<<<<
 *             for s in pre :
 *                 self.push(s)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_weight, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_delay, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_3;
  }
  if (__pyx_t_5) {

    /* "cynest/kernel.pyx":211
 * 
 *         if weight == None and delay == None:
 *             for s in pre :             # <<<<<<<<<<<<<<
 *                 self.push(s)
 *                 self.push(post)
 */
    if (PyList_CheckExact(__pyx_v_pre) || PyTuple_CheckExact(__pyx_v_pre)) {
      __pyx_t_1 = __pyx_v_pre; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pre); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_1)) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_1)) {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF(__pyx_v_s);
      __pyx_v_s = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "cynest/kernel.pyx":212
 *         if weight == None and delay == None:
 *             for s in pre :
 *                 self.push(s)             # <<<<<<<<<<<<<<
 *                 self.push(post)
 *                 self.push_pytoken(m)
 */
      __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_s);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_s);
      __Pyx_GIVEREF(__pyx_v_s);
      __pyx_t_9 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "cynest/kernel.pyx":213
 *             for s in pre :
 *                 self.push(s)
 *                 self.push(post)             # <<<<<<<<<<<<<<
 *                 self.push_pytoken(m)
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 */
      __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_post);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_post);
      __Pyx_GIVEREF(__pyx_v_post);
      __pyx_t_2 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "cynest/kernel.pyx":214
 *                 self.push(s)
 *                 self.push(post)
 *                 self.push_pytoken(m)             # <<<<<<<<<<<<<<
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 * 
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->push_pytoken(__pyx_v_self, __pyx_v_m, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "cynest/kernel.pyx":215
 *                 self.push(post)
 *                 self.push_pytoken(m)
 *                 self.run_pytoken(cmd) # always run in unprotected mode             # <<<<<<<<<<<<<<
 * 
 *         elif weight != None and delay != None:
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->run_pytoken(__pyx_v_self, __pyx_v_cmd, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }

  /* "cynest/kernel.pyx":217
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 * 
 *         elif weight != None and delay != None:             # <<<<<<<<<<<<<<
 *             weight = broadcast(weight, len(post), (float,), "weight")
 *             if len(weight) != len(post):
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_weight, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_delay, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_5;
  }
  if (__pyx_t_4) {

    /* "cynest/kernel.pyx":218
 * 
 *         elif weight != None and delay != None:
 *             weight = broadcast(weight, len(post), (float,), "weight")             # <<<<<<<<<<<<<<
 *             if len(weight) != len(post):
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(post)")
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__broadcast); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_Length(__pyx_v_post); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)((PyObject*)(&PyFloat_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_weight);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_weight);
    __Pyx_GIVEREF(__pyx_v_weight);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 2, ((PyObject *)__pyx_t_8));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__weight));
    PyTuple_SET_ITEM(__pyx_t_9, 3, ((PyObject *)__pyx_n_s__weight));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__weight));
    __pyx_t_2 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_v_weight);
    __pyx_v_weight = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "cynest/kernel.pyx":219
 *         elif weight != None and delay != None:
 *             weight = broadcast(weight, len(post), (float,), "weight")
 *             if len(weight) != len(post):             # <<<<<<<<<<<<<<
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(post)")
 *             delay = broadcast(delay, len(post), (float,), "delay")
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_weight); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = PyObject_Length(__pyx_v_post); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_t_6 != __pyx_t_10);
    if (__pyx_t_4) {

      /* "cynest/kernel.pyx":220
 *             weight = broadcast(weight, len(post), (float,), "weight")
 *             if len(weight) != len(post):
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(post)")             # <<<<<<<<<<<<<<
 *             delay = broadcast(delay, len(post), (float,), "delay")
 *             if len(delay) != len(post):
 */
      __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_k_tuple_50), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "cynest/kernel.pyx":221
 *             if len(weight) != len(post):
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(post)")
 *             delay = broadcast(delay, len(post), (float,), "delay")             # <<<<<<<<<<<<<<
 *             if len(delay) != len(post):
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(post)")
 */
    __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__broadcast); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyObject_Length(__pyx_v_post); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)(&PyFloat_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_delay);
    __Pyx_GIVEREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__delay));
    PyTuple_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_n_s__delay));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__delay));
    __pyx_t_8 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_v_delay);
    __pyx_v_delay = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cynest/kernel.pyx":222
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(post)")
 *             delay = broadcast(delay, len(post), (float,), "delay")
 *             if len(delay) != len(post):             # <<<<<<<<<<<<<<
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(post)")
 * 
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_delay); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = PyObject_Length(__pyx_v_post); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_t_10 != __pyx_t_6);
    if (__pyx_t_4) {

      /* "cynest/kernel.pyx":223
 *             delay = broadcast(delay, len(post), (float,), "delay")
 *             if len(delay) != len(post):
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(post)")             # <<<<<<<<<<<<<<
 * 
 *             for s in pre :
 */
      __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_52), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "cynest/kernel.pyx":225
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(post)")
 * 
 *             for s in pre :             # <<<<<<<<<<<<<<
 *                 self.push(s)
 *                 self.push(post)
 */
    if (PyList_CheckExact(__pyx_v_pre) || PyTuple_CheckExact(__pyx_v_pre)) {
      __pyx_t_2 = __pyx_v_pre; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_pre); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF(__pyx_v_s);
      __pyx_v_s = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "cynest/kernel.pyx":226
 * 
 *             for s in pre :
 *                 self.push(s)             # <<<<<<<<<<<<<<
 *                 self.push(post)
 *                 self.push(weight)
 */
      __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_s);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_s);
      __Pyx_GIVEREF(__pyx_v_s);
      __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "cynest/kernel.pyx":227
 *             for s in pre :
 *                 self.push(s)
 *                 self.push(post)             # <<<<<<<<<<<<<<
 *                 self.push(weight)
 *                 self.push(delay)
 */
      __pyx_t_8 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_post);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_post);
      __Pyx_GIVEREF(__pyx_v_post);
      __pyx_t_1 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cynest/kernel.pyx":228
 *                 self.push(s)
 *                 self.push(post)
 *                 self.push(weight)             # <<<<<<<<<<<<<<
 *                 self.push(delay)
 *                 self.push_pytoken(m)
 */
      __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_weight);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_weight);
      __Pyx_GIVEREF(__pyx_v_weight);
      __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "cynest/kernel.pyx":229
 *                 self.push(post)
 *                 self.push(weight)
 *                 self.push(delay)             # <<<<<<<<<<<<<<
 *                 self.push_pytoken(m)
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 */
      __pyx_t_8 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_delay);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_delay);
      __Pyx_GIVEREF(__pyx_v_delay);
      __pyx_t_1 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cynest/kernel.pyx":230
 *                 self.push(weight)
 *                 self.push(delay)
 *                 self.push_pytoken(m)             # <<<<<<<<<<<<<<
 *                 self.run_pytoken(cmd) # always run in unprotected mode
 * 
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->push_pytoken(__pyx_v_self, __pyx_v_m, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cynest/kernel.pyx":231
 *                 self.push(delay)
 *                 self.push_pytoken(m)
 *                 self.run_pytoken(cmd) # always run in unprotected mode             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->run_pytoken(__pyx_v_self, __pyx_v_cmd, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "cynest/kernel.pyx":234
 * 
 *         else:
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_53), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.divergent_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cmd);
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_weight);
  __Pyx_XDECREF(__pyx_v_delay);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_29data_connect1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_29data_connect1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pre = 0;
  PyObject *__pyx_v_params = 0;
  std::string __pyx_v_model;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("data_connect1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pre,&__pyx_n_s__params,&__pyx_n_s__model,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pre)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("data_connect1", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__model)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("data_connect1", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "data_connect1") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_pre = ((PyObject*)values[0]);
    __pyx_v_params = ((PyObject*)values[1]);
    __pyx_v_model = __pyx_convert_string_from_py_(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("data_connect1", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.data_connect1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pre), (&PyList_Type), 1, "pre", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), (&PyList_Type), 1, "params", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_28data_connect1(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), __pyx_v_pre, __pyx_v_params, __pyx_v_model);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":237
 * 
 * 
 *     def data_connect1(self, list pre, list params, string model):             # <<<<<<<<<<<<<<
 *         self.sli_container.add_command('DataConnect_i_dict_s'.encode('UTF-8'))
 *         cdef PyToken cmd1 = self.sli_container.get_pytoken('DataConnect_i_dict_s'.encode('UTF-8'))
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_28data_connect1(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_params, std::string __pyx_v_model) {
  struct PyToken *__pyx_v_cmd1 = 0;
  struct PyToken *__pyx_v_m = 0;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("data_connect1", 0);

  /* "cynest/kernel.pyx":238
 * 
 *     def data_connect1(self, list pre, list params, string model):
 *         self.sli_container.add_command('DataConnect_i_dict_s'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken cmd1 = self.sli_container.get_pytoken('DataConnect_i_dict_s'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_n_s_54), __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_55), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->add_command(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":239
 *     def data_connect1(self, list pre, list params, string model):
 *         self.sli_container.add_command('DataConnect_i_dict_s'.encode('UTF-8'))
 *         cdef PyToken cmd1 = self.sli_container.get_pytoken('DataConnect_i_dict_s'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 * 
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_n_s_54), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_56), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->get_pytoken(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cmd1 = ((struct PyToken *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":240
 *         self.sli_container.add_command('DataConnect_i_dict_s'.encode('UTF-8'))
 *         cdef PyToken cmd1 = self.sli_container.get_pytoken('DataConnect_i_dict_s'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_model); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_38), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_57), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->generate_arg_pytoken(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_m = ((struct PyToken *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":243
 * 
 * 
 *         for s,p in zip(pre,params):             # <<<<<<<<<<<<<<
 *             self.push(s)
 *             self.push(p)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_pre));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_pre));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_pre));
  __Pyx_INCREF(((PyObject *)__pyx_v_params));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_params));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_params));
  __pyx_t_1 = PyObject_Call(__pyx_builtin_zip, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF(__pyx_v_s);
    __pyx_v_s = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_v_p);
    __pyx_v_p = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "cynest/kernel.pyx":244
 * 
 *         for s,p in zip(pre,params):
 *             self.push(s)             # <<<<<<<<<<<<<<
 *             self.push(p)
 *             self.push_pytoken(m)
 */
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_s);
    __Pyx_GIVEREF(__pyx_v_s);
    __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "cynest/kernel.pyx":245
 *         for s,p in zip(pre,params):
 *             self.push(s)
 *             self.push(p)             # <<<<<<<<<<<<<<
 *             self.push_pytoken(m)
 *             self.run_pytoken(cmd1) # sure it is not run_protected
 */
    __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__push); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_p);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_p);
    __Pyx_GIVEREF(__pyx_v_p);
    __pyx_t_1 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cynest/kernel.pyx":246
 *             self.push(s)
 *             self.push(p)
 *             self.push_pytoken(m)             # <<<<<<<<<<<<<<
 *             self.run_pytoken(cmd1) # sure it is not run_protected
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->push_pytoken(__pyx_v_self, __pyx_v_m, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cynest/kernel.pyx":247
 *             self.push(p)
 *             self.push_pytoken(m)
 *             self.run_pytoken(cmd1) # sure it is not run_protected             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->run_pytoken(__pyx_v_self, __pyx_v_cmd1, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.data_connect1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cmd1);
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":251
 * 
 * 
 *     cpdef data_connect2(self, list pre, list params, string model):             # <<<<<<<<<<<<<<
 *         self.sli_container.add_command('Connect_i_D_i'.encode('UTF-8'))
 *         cdef PyToken cmd2 = self.sli_container.get_pytoken('Connect_i_D_i'.encode('UTF-8'))
 */

static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_31data_connect2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6cynest_6kernel_10NESTEngine_data_connect2(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_params, std::string __pyx_v_model, int __pyx_skip_dispatch) {
  struct PyToken *__pyx_v_cmd2 = 0;
  int __pyx_v_model_id;
  PyObject *__pyx_v_params_dict = 0;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_length;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("data_connect2", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__data_connect2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_31data_connect2)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_model); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_pre));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_pre));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_pre));
      __Pyx_INCREF(((PyObject *)__pyx_v_params));
      PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_params));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_params));
      PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cynest/kernel.pyx":252
 * 
 *     cpdef data_connect2(self, list pre, list params, string model):
 *         self.sli_container.add_command('Connect_i_D_i'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken cmd2 = self.sli_container.get_pytoken('Connect_i_D_i'.encode('UTF-8'))
 *         self.run('synapsedict') #sure unprotected
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_n_s__Connect_i_D_i), __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_58), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->add_command(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":253
 *     cpdef data_connect2(self, list pre, list params, string model):
 *         self.sli_container.add_command('Connect_i_D_i'.encode('UTF-8'))
 *         cdef PyToken cmd2 = self.sli_container.get_pytoken('Connect_i_D_i'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         self.run('synapsedict') #sure unprotected
 *         self.run('/%s get'%model)
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_n_s__Connect_i_D_i), __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_59), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer *)__pyx_v_self->sli_container->__pyx_vtab)->get_pytoken(__pyx_v_self->sli_container, ((PyObject*)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cmd2 = ((struct PyToken *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":254
 *         self.sli_container.add_command('Connect_i_D_i'.encode('UTF-8'))
 *         cdef PyToken cmd2 = self.sli_container.get_pytoken('Connect_i_D_i'.encode('UTF-8'))
 *         self.run('synapsedict') #sure unprotected             # <<<<<<<<<<<<<<
 *         self.run('/%s get'%model)
 *         cdef int model_id = self.pop()
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__run); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_60), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":255
 *         cdef PyToken cmd2 = self.sli_container.get_pytoken('Connect_i_D_i'.encode('UTF-8'))
 *         self.run('synapsedict') #sure unprotected
 *         self.run('/%s get'%model)             # <<<<<<<<<<<<<<
 *         cdef int model_id = self.pop()
 *         cdef dict params_dict = {}
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__run); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_model); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_61), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cynest/kernel.pyx":256
 *         self.run('synapsedict') #sure unprotected
 *         self.run('/%s get'%model)
 *         cdef int model_id = self.pop()             # <<<<<<<<<<<<<<
 *         cdef dict params_dict = {}
 *         cdef int i = 0
 */
  __pyx_t_3 = __Pyx_PyObject_Pop(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_model_id = __pyx_t_4;

  /* "cynest/kernel.pyx":257
 *         self.run('/%s get'%model)
 *         cdef int model_id = self.pop()
 *         cdef dict params_dict = {}             # <<<<<<<<<<<<<<
 *         cdef int i = 0
 *         cdef int j = 0
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v_params_dict = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cynest/kernel.pyx":258
 *         cdef int model_id = self.pop()
 *         cdef dict params_dict = {}
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int j = 0
 *         cdef int length = min(len(pre), len(params))
 */
  __pyx_v_i = 0;

  /* "cynest/kernel.pyx":259
 *         cdef dict params_dict = {}
 *         cdef int i = 0
 *         cdef int j = 0             # <<<<<<<<<<<<<<
 *         cdef int length = min(len(pre), len(params))
 * 
 */
  __pyx_v_j = 0;

  /* "cynest/kernel.pyx":260
 *         cdef int i = 0
 *         cdef int j = 0
 *         cdef int length = min(len(pre), len(params))             # <<<<<<<<<<<<<<
 * 
 *         for j from 0 <= j < length by 1:
 */
  if (unlikely(((PyObject *)__pyx_v_params) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyList_GET_SIZE(((PyObject *)__pyx_v_params)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_pre) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyList_GET_SIZE(((PyObject *)__pyx_v_pre)); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if ((__pyx_t_5 < __pyx_t_6)) {
    __pyx_t_7 = __pyx_t_5;
  } else {
    __pyx_t_7 = __pyx_t_6;
  }
  __pyx_v_length = __pyx_t_7;

  /* "cynest/kernel.pyx":262
 *         cdef int length = min(len(pre), len(params))
 * 
 *         for j from 0 <= j < length by 1:             # <<<<<<<<<<<<<<
 *             for i from 0 <= i < len(params[j]['target']) by 1:
 *                 for key in params[j]:
 */
  __pyx_t_4 = __pyx_v_length;
  for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_4; __pyx_v_j+=1) {

    /* "cynest/kernel.pyx":263
 * 
 *         for j from 0 <= j < length by 1:
 *             for i from 0 <= i < len(params[j]['target']) by 1:             # <<<<<<<<<<<<<<
 *                 for key in params[j]:
 *                     params_dict[key] = params[j][key][i]
 */
    if (unlikely(((PyObject *)__pyx_v_params) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(((PyObject *)__pyx_v_params), __pyx_v_j, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_GetItem(__pyx_t_3, ((PyObject *)__pyx_n_s__target)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_7; __pyx_v_i+=1) {

      /* "cynest/kernel.pyx":264
 *         for j from 0 <= j < length by 1:
 *             for i from 0 <= i < len(params[j]['target']) by 1:
 *                 for key in params[j]:             # <<<<<<<<<<<<<<
 *                     params_dict[key] = params[j][key][i]
 * 
 */
      if (unlikely(((PyObject *)__pyx_v_params) == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = __Pyx_GetItemInt_List(((PyObject *)__pyx_v_params), __pyx_v_j, sizeof(int), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_3)) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_3)) {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_2 = __pyx_t_8(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF(__pyx_v_key);
        __pyx_v_key = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "cynest/kernel.pyx":265
 *             for i from 0 <= i < len(params[j]['target']) by 1:
 *                 for key in params[j]:
 *                     params_dict[key] = params[j][key][i]             # <<<<<<<<<<<<<<
 * 
 *                 self.thisptr.push(pre[j])
 */
        if (unlikely(((PyObject *)__pyx_v_params) == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_2 = __Pyx_GetItemInt_List(((PyObject *)__pyx_v_params), __pyx_v_j, sizeof(int), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_v_key); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (PyDict_SetItem(((PyObject *)__pyx_v_params_dict), __pyx_v_key, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cynest/kernel.pyx":267
 *                     params_dict[key] = params[j][key][i]
 * 
 *                 self.thisptr.push(pre[j])             # <<<<<<<<<<<<<<
 *                 self.thisptr.push(params_dict)
 *                 self.thisptr.push(model_id)
 */
      if (unlikely(((PyObject *)__pyx_v_pre) == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(((PyObject *)__pyx_v_pre), __pyx_v_j, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_self->thisptr->push(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cynest/kernel.pyx":268
 * 
 *                 self.thisptr.push(pre[j])
 *                 self.thisptr.push(params_dict)             # <<<<<<<<<<<<<<
 *                 self.thisptr.push(model_id)
 *                 self.thisptr.run_token(cmd2.thisptr[0])
 */
      __pyx_v_self->thisptr->push(((PyObject *)__pyx_v_params_dict));

      /* "cynest/kernel.pyx":269
 *                 self.thisptr.push(pre[j])
 *                 self.thisptr.push(params_dict)
 *                 self.thisptr.push(model_id)             # <<<<<<<<<<<<<<
 *                 self.thisptr.run_token(cmd2.thisptr[0])
 * 
 */
      __pyx_t_3 = PyInt_FromLong(__pyx_v_model_id); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_self->thisptr->push(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cynest/kernel.pyx":270
 *                 self.thisptr.push(params_dict)
 *                 self.thisptr.push(model_id)
 *                 self.thisptr.run_token(cmd2.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_self->thisptr->run_token((__pyx_v_cmd2->thisptr[0]));
    }
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.data_connect2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cmd2);
  __Pyx_XDECREF(__pyx_v_params_dict);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_31data_connect2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_31data_connect2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pre = 0;
  PyObject *__pyx_v_params = 0;
  std::string __pyx_v_model;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("data_connect2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pre,&__pyx_n_s__params,&__pyx_n_s__model,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pre)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("data_connect2", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__model)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("data_connect2", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "data_connect2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_pre = ((PyObject*)values[0]);
    __pyx_v_params = ((PyObject*)values[1]);
    __pyx_v_model = __pyx_convert_string_from_py_(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("data_connect2", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.data_connect2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pre), (&PyList_Type), 1, "pre", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), (&PyList_Type), 1, "params", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_30data_connect2(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), __pyx_v_pre, __pyx_v_params, __pyx_v_model);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":251
 * 
 * 
 *     cpdef data_connect2(self, list pre, list params, string model):             # <<<<<<<<<<<<<<
 *         self.sli_container.add_command('Connect_i_D_i'.encode('UTF-8'))
 *         cdef PyToken cmd2 = self.sli_container.get_pytoken('Connect_i_D_i'.encode('UTF-8'))
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_30data_connect2(struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_params, std::string __pyx_v_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("data_connect2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine *)__pyx_v_self->__pyx_vtab)->data_connect2(__pyx_v_self, __pyx_v_pre, __pyx_v_params, __pyx_v_model, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.data_connect2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_33random_convergent_connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_33random_convergent_connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pre = 0;
  PyObject *__pyx_v_post = 0;
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_v_delay = 0;
  PyObject *__pyx_v_model = 0;
  PyObject *__pyx_v_options = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random_convergent_connect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pre,&__pyx_n_s__post,&__pyx_n_s__n,&__pyx_n_s__weight,&__pyx_n_s__delay,&__pyx_n_s__model,&__pyx_n_s__options,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pre)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__post)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_convergent_connect", 1, 7, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_convergent_connect", 1, 7, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__weight)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_convergent_connect", 1, 7, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__delay)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_convergent_connect", 1, 7, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__model)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_convergent_connect", 1, 7, 7, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__options)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_convergent_connect", 1, 7, 7, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_convergent_connect") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_pre = values[0];
    __pyx_v_post = values[1];
    __pyx_v_n = values[2];
    __pyx_v_weight = values[3];
    __pyx_v_delay = values[4];
    __pyx_v_model = values[5];
    __pyx_v_options = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_convergent_connect", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.random_convergent_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_32random_convergent_connect(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), __pyx_v_pre, __pyx_v_post, __pyx_v_n, __pyx_v_weight, __pyx_v_delay, __pyx_v_model, __pyx_v_options);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":274
 * 
 * 
 *     def random_convergent_connect(self, pre, post, n, weight, delay, model, options):             # <<<<<<<<<<<<<<
 *         # store current options, set desired options
 *         old_options = None
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_32random_convergent_connect(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_post, PyObject *__pyx_v_n, PyObject *__pyx_v_weight, PyObject *__pyx_v_delay, PyObject *__pyx_v_model, PyObject *__pyx_v_options) {
  PyObject *__pyx_v_old_options = NULL;
  int __pyx_v_error;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("random_convergent_connect", 0);
  __Pyx_INCREF(__pyx_v_weight);
  __Pyx_INCREF(__pyx_v_delay);

  /* "cynest/kernel.pyx":276
 *     def random_convergent_connect(self, pre, post, n, weight, delay, model, options):
 *         # store current options, set desired options
 *         old_options = None             # <<<<<<<<<<<<<<
 *         error = False
 *         if options:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_old_options = Py_None;

  /* "cynest/kernel.pyx":277
 *         # store current options, set desired options
 *         old_options = None
 *         error = False             # <<<<<<<<<<<<<<
 *         if options:
 *             old_options = sli_func('GetOptions', '/RandomConvergentConnect', litconv=True)
 */
  __pyx_v_error = 0;

  /* "cynest/kernel.pyx":278
 *         old_options = None
 *         error = False
 *         if options:             # <<<<<<<<<<<<<<
 *             old_options = sli_func('GetOptions', '/RandomConvergentConnect', litconv=True)
 *             del old_options['DefaultOptions'] # in the way when restoring
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_options); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "cynest/kernel.pyx":279
 *         error = False
 *         if options:
 *             old_options = sli_func('GetOptions', '/RandomConvergentConnect', litconv=True)             # <<<<<<<<<<<<<<
 *             del old_options['DefaultOptions'] # in the way when restoring
 *             sli_func('SetOptions', '/RandomConvergentConnect', options,
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_t_4 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, ((PyObject *)__pyx_n_s__litconv), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_63), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_old_options);
    __pyx_v_old_options = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cynest/kernel.pyx":280
 *         if options:
 *             old_options = sli_func('GetOptions', '/RandomConvergentConnect', litconv=True)
 *             del old_options['DefaultOptions'] # in the way when restoring             # <<<<<<<<<<<<<<
 *             sli_func('SetOptions', '/RandomConvergentConnect', options,
 *                  litconv=True)
 */
    if (unlikely(!__pyx_v_old_options)) { __Pyx_RaiseUnboundLocalError("old_options"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    if (PyObject_DelItem(__pyx_v_old_options, ((PyObject *)__pyx_n_s__DefaultOptions)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "cynest/kernel.pyx":281
 *             old_options = sli_func('GetOptions', '/RandomConvergentConnect', litconv=True)
 *             del old_options['DefaultOptions'] # in the way when restoring
 *             sli_func('SetOptions', '/RandomConvergentConnect', options,             # <<<<<<<<<<<<<<
 *                  litconv=True)
 * 
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_n_s__SetOptions));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__SetOptions));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__SetOptions));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_62));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_kp_s_62));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_62));
    __Pyx_INCREF(__pyx_v_options);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_options);
    __Pyx_GIVEREF(__pyx_v_options);
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));

    /* "cynest/kernel.pyx":282
 *             del old_options['DefaultOptions'] # in the way when restoring
 *             sli_func('SetOptions', '/RandomConvergentConnect', options,
 *                  litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         if weight == None and delay == None:
 */
    __pyx_t_5 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__litconv), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "cynest/kernel.pyx":284
 *                  litconv=True)
 * 
 *         if weight == None and delay == None:             # <<<<<<<<<<<<<<
 *             sli_func(
 *                 '/m Set /n Set /pre Set { pre exch n m RandomConvergentConnect } forall',
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_weight, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_delay, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __pyx_t_6;
  } else {
    __pyx_t_7 = __pyx_t_1;
  }
  if (__pyx_t_7) {

    /* "cynest/kernel.pyx":285
 * 
 *         if weight == None and delay == None:
 *             sli_func(             # <<<<<<<<<<<<<<
 *                 '/m Set /n Set /pre Set { pre exch n m RandomConvergentConnect } forall',
 *                 post, pre, n, '/'+model, litconv=True)
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);

    /* "cynest/kernel.pyx":287
 *             sli_func(
 *                 '/m Set /n Set /pre Set { pre exch n m RandomConvergentConnect } forall',
 *                 post, pre, n, '/'+model, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         elif weight != None and delay != None:
 */
    __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_kp_s_5), __pyx_v_model); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_64));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_kp_s_64));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_64));
    __Pyx_INCREF(__pyx_v_post);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_post);
    __Pyx_GIVEREF(__pyx_v_post);
    __Pyx_INCREF(__pyx_v_pre);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_pre);
    __Pyx_GIVEREF(__pyx_v_pre);
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cynest/kernel.pyx":285
 * 
 *         if weight == None and delay == None:
 *             sli_func(             # <<<<<<<<<<<<<<
 *                 '/m Set /n Set /pre Set { pre exch n m RandomConvergentConnect } forall',
 *                 post, pre, n, '/'+model, litconv=True)
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));

    /* "cynest/kernel.pyx":287
 *             sli_func(
 *                 '/m Set /n Set /pre Set { pre exch n m RandomConvergentConnect } forall',
 *                 post, pre, n, '/'+model, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         elif weight != None and delay != None:
 */
    __pyx_t_4 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__litconv), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4;
  }

  /* "cynest/kernel.pyx":289
 *                 post, pre, n, '/'+model, litconv=True)
 * 
 *         elif weight != None and delay != None:             # <<<<<<<<<<<<<<
 *             weight = broadcast(weight, n, (float,), "weight")
 *             if len(weight) != n:
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_weight, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_7) {
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_delay, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_t_1;
  } else {
    __pyx_t_6 = __pyx_t_7;
  }
  if (__pyx_t_6) {

    /* "cynest/kernel.pyx":290
 * 
 *         elif weight != None and delay != None:
 *             weight = broadcast(weight, n, (float,), "weight")             # <<<<<<<<<<<<<<
 *             if len(weight) != n:
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__broadcast); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)(&PyFloat_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_weight);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_weight);
    __Pyx_GIVEREF(__pyx_v_weight);
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__weight));
    PyTuple_SET_ITEM(__pyx_t_3, 3, ((PyObject *)__pyx_n_s__weight));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__weight));
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_weight);
    __pyx_v_weight = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cynest/kernel.pyx":291
 *         elif weight != None and delay != None:
 *             weight = broadcast(weight, n, (float,), "weight")
 *             if len(weight) != n:             # <<<<<<<<<<<<<<
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")
 *             delay = broadcast(delay, n, (float,), "delay")
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_weight); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_n, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {

      /* "cynest/kernel.pyx":292
 *             weight = broadcast(weight, n, (float,), "weight")
 *             if len(weight) != n:
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")             # <<<<<<<<<<<<<<
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:
 */
      __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_66), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "cynest/kernel.pyx":293
 *             if len(weight) != n:
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")
 *             delay = broadcast(delay, n, (float,), "delay")             # <<<<<<<<<<<<<<
 *             if len(delay) != n:
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__broadcast); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)((PyObject*)(&PyFloat_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_delay);
    __Pyx_GIVEREF(__pyx_v_delay);
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_t_3));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__delay));
    PyTuple_SET_ITEM(__pyx_t_4, 3, ((PyObject *)__pyx_n_s__delay));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__delay));
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_delay);
    __pyx_v_delay = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cynest/kernel.pyx":294
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:             # <<<<<<<<<<<<<<
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")
 * 
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_delay); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_n, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {

      /* "cynest/kernel.pyx":295
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")             # <<<<<<<<<<<<<<
 * 
 *             sli_func(
 */
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_k_tuple_68), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "cynest/kernel.pyx":297
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")
 * 
 *             sli_func(             # <<<<<<<<<<<<<<
 *                 '/m Set /d Set /w Set /n Set /pre Set { pre exch n w d m RandomConvergentConnect } forall',
 *                 post, pre, n, weight, delay, '/'+model, litconv=True)
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "cynest/kernel.pyx":299
 *             sli_func(
 *                 '/m Set /d Set /w Set /n Set /pre Set { pre exch n w d m RandomConvergentConnect } forall',
 *                 post, pre, n, weight, delay, '/'+model, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_kp_s_5), __pyx_v_model); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_69));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_kp_s_69));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_69));
    __Pyx_INCREF(__pyx_v_post);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_post);
    __Pyx_GIVEREF(__pyx_v_post);
    __Pyx_INCREF(__pyx_v_pre);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_pre);
    __Pyx_GIVEREF(__pyx_v_pre);
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    __Pyx_INCREF(__pyx_v_weight);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_weight);
    __Pyx_GIVEREF(__pyx_v_weight);
    __Pyx_INCREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_delay);
    __Pyx_GIVEREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "cynest/kernel.pyx":297
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")
 * 
 *             sli_func(             # <<<<<<<<<<<<<<
 *                 '/m Set /d Set /w Set /n Set /pre Set { pre exch n w d m RandomConvergentConnect } forall',
 *                 post, pre, n, weight, delay, '/'+model, litconv=True)
 */
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));

    /* "cynest/kernel.pyx":299
 *             sli_func(
 *                 '/m Set /d Set /w Set /n Set /pre Set { pre exch n w d m RandomConvergentConnect } forall',
 *                 post, pre, n, weight, delay, '/'+model, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_5 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_4, ((PyObject *)__pyx_n_s__litconv), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "cynest/kernel.pyx":302
 * 
 *         else:
 *             error = True             # <<<<<<<<<<<<<<
 * 
 *         # restore old options
 */
    __pyx_v_error = 1;
  }
  __pyx_L4:;

  /* "cynest/kernel.pyx":305
 * 
 *         # restore old options
 *         if old_options:             # <<<<<<<<<<<<<<
 *             sli_func('SetOptions', '/RandomConvergentConnect', old_options, litconv=True)
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_old_options); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_6) {

    /* "cynest/kernel.pyx":306
 *         # restore old options
 *         if old_options:
 *             sli_func('SetOptions', '/RandomConvergentConnect', old_options, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         if error:
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_n_s__SetOptions));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_n_s__SetOptions));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__SetOptions));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_62));
    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_kp_s_62));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_62));
    __Pyx_INCREF(__pyx_v_old_options);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_old_options);
    __Pyx_GIVEREF(__pyx_v_old_options);
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_3 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__litconv), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_4), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "cynest/kernel.pyx":308
 *             sli_func('SetOptions', '/RandomConvergentConnect', old_options, litconv=True)
 * 
 *         if error:             # <<<<<<<<<<<<<<
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")
 * 
 */
  if (__pyx_v_error) {

    /* "cynest/kernel.pyx":309
 * 
 *         if error:
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_70), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L8;
  }
  __pyx_L8:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.random_convergent_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_old_options);
  __Pyx_XDECREF(__pyx_v_weight);
  __Pyx_XDECREF(__pyx_v_delay);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_35random_divergent_connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6cynest_6kernel_10NESTEngine_35random_divergent_connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pre = 0;
  PyObject *__pyx_v_post = 0;
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_v_delay = 0;
  PyObject *__pyx_v_model = 0;
  PyObject *__pyx_v_options = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random_divergent_connect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pre,&__pyx_n_s__post,&__pyx_n_s__n,&__pyx_n_s__weight,&__pyx_n_s__delay,&__pyx_n_s__model,&__pyx_n_s__options,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pre)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__post)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_divergent_connect", 1, 7, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_divergent_connect", 1, 7, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__weight)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_divergent_connect", 1, 7, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__delay)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_divergent_connect", 1, 7, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__model)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_divergent_connect", 1, 7, 7, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__options)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_divergent_connect", 1, 7, 7, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_divergent_connect") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_pre = values[0];
    __pyx_v_post = values[1];
    __pyx_v_n = values[2];
    __pyx_v_weight = values[3];
    __pyx_v_delay = values[4];
    __pyx_v_model = values[5];
    __pyx_v_options = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_divergent_connect", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.random_divergent_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_10NESTEngine_34random_divergent_connect(((struct __pyx_obj_6cynest_6kernel_NESTEngine *)__pyx_v_self), __pyx_v_pre, __pyx_v_post, __pyx_v_n, __pyx_v_weight, __pyx_v_delay, __pyx_v_model, __pyx_v_options);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":312
 * 
 * 
 *     def random_divergent_connect(self, pre, post, n, weight, delay, model, options):             # <<<<<<<<<<<<<<
 *         # store current options, set desired options
 *         old_options = None
 */

static PyObject *__pyx_pf_6cynest_6kernel_10NESTEngine_34random_divergent_connect(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_NESTEngine *__pyx_v_self, PyObject *__pyx_v_pre, PyObject *__pyx_v_post, PyObject *__pyx_v_n, PyObject *__pyx_v_weight, PyObject *__pyx_v_delay, PyObject *__pyx_v_model, PyObject *__pyx_v_options) {
  PyObject *__pyx_v_old_options = NULL;
  int __pyx_v_error;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("random_divergent_connect", 0);
  __Pyx_INCREF(__pyx_v_weight);
  __Pyx_INCREF(__pyx_v_delay);

  /* "cynest/kernel.pyx":314
 *     def random_divergent_connect(self, pre, post, n, weight, delay, model, options):
 *         # store current options, set desired options
 *         old_options = None             # <<<<<<<<<<<<<<
 *         error = False
 *         if options:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_old_options = Py_None;

  /* "cynest/kernel.pyx":315
 *         # store current options, set desired options
 *         old_options = None
 *         error = False             # <<<<<<<<<<<<<<
 *         if options:
 *             old_options = sli_func('GetOptions', '/RandomDivergentConnect', litconv=True)
 */
  __pyx_v_error = 0;

  /* "cynest/kernel.pyx":316
 *         old_options = None
 *         error = False
 *         if options:             # <<<<<<<<<<<<<<
 *             old_options = sli_func('GetOptions', '/RandomDivergentConnect', litconv=True)
 *             del old_options['DefaultOptions'] # in the way when restoring
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_options); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "cynest/kernel.pyx":317
 *         error = False
 *         if options:
 *             old_options = sli_func('GetOptions', '/RandomDivergentConnect', litconv=True)             # <<<<<<<<<<<<<<
 *             del old_options['DefaultOptions'] # in the way when restoring
 *             sli_func('SetOptions', '/RandomDivergentConnect', options, litconv=True)
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_t_4 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, ((PyObject *)__pyx_n_s__litconv), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_72), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_old_options);
    __pyx_v_old_options = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cynest/kernel.pyx":318
 *         if options:
 *             old_options = sli_func('GetOptions', '/RandomDivergentConnect', litconv=True)
 *             del old_options['DefaultOptions'] # in the way when restoring             # <<<<<<<<<<<<<<
 *             sli_func('SetOptions', '/RandomDivergentConnect', options, litconv=True)
 * 
 */
    if (unlikely(!__pyx_v_old_options)) { __Pyx_RaiseUnboundLocalError("old_options"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    if (PyObject_DelItem(__pyx_v_old_options, ((PyObject *)__pyx_n_s__DefaultOptions)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "cynest/kernel.pyx":319
 *             old_options = sli_func('GetOptions', '/RandomDivergentConnect', litconv=True)
 *             del old_options['DefaultOptions'] # in the way when restoring
 *             sli_func('SetOptions', '/RandomDivergentConnect', options, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         if weight == None and delay == None:
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_n_s__SetOptions));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__SetOptions));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__SetOptions));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_71));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_kp_s_71));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_71));
    __Pyx_INCREF(__pyx_v_options);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_options);
    __Pyx_GIVEREF(__pyx_v_options);
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_5 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__litconv), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "cynest/kernel.pyx":321
 *             sli_func('SetOptions', '/RandomDivergentConnect', options, litconv=True)
 * 
 *         if weight == None and delay == None:             # <<<<<<<<<<<<<<
 *             sli_func(
 *                 '/m Set /n Set /post Set { n post m RandomDivergentConnect } forall',
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_weight, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_delay, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __pyx_t_6;
  } else {
    __pyx_t_7 = __pyx_t_1;
  }
  if (__pyx_t_7) {

    /* "cynest/kernel.pyx":322
 * 
 *         if weight == None and delay == None:
 *             sli_func(             # <<<<<<<<<<<<<<
 *                 '/m Set /n Set /post Set { n post m RandomDivergentConnect } forall',
 *                 pre, post, n, '/'+model, litconv=True)
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);

    /* "cynest/kernel.pyx":324
 *             sli_func(
 *                 '/m Set /n Set /post Set { n post m RandomDivergentConnect } forall',
 *                 pre, post, n, '/'+model, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         elif weight != None and delay != None:
 */
    __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_kp_s_5), __pyx_v_model); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_73));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_kp_s_73));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_73));
    __Pyx_INCREF(__pyx_v_pre);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_pre);
    __Pyx_GIVEREF(__pyx_v_pre);
    __Pyx_INCREF(__pyx_v_post);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_post);
    __Pyx_GIVEREF(__pyx_v_post);
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cynest/kernel.pyx":322
 * 
 *         if weight == None and delay == None:
 *             sli_func(             # <<<<<<<<<<<<<<
 *                 '/m Set /n Set /post Set { n post m RandomDivergentConnect } forall',
 *                 pre, post, n, '/'+model, litconv=True)
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));

    /* "cynest/kernel.pyx":324
 *             sli_func(
 *                 '/m Set /n Set /post Set { n post m RandomDivergentConnect } forall',
 *                 pre, post, n, '/'+model, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         elif weight != None and delay != None:
 */
    __pyx_t_4 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__litconv), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4;
  }

  /* "cynest/kernel.pyx":326
 *                 pre, post, n, '/'+model, litconv=True)
 * 
 *         elif weight != None and delay != None:             # <<<<<<<<<<<<<<
 *             weight = broadcast(weight, n, (float,), "weight")
 *             if len(weight) != n:
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_weight, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_7) {
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_delay, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_t_1;
  } else {
    __pyx_t_6 = __pyx_t_7;
  }
  if (__pyx_t_6) {

    /* "cynest/kernel.pyx":327
 * 
 *         elif weight != None and delay != None:
 *             weight = broadcast(weight, n, (float,), "weight")             # <<<<<<<<<<<<<<
 *             if len(weight) != n:
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__broadcast); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)(&PyFloat_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_weight);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_weight);
    __Pyx_GIVEREF(__pyx_v_weight);
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__weight));
    PyTuple_SET_ITEM(__pyx_t_3, 3, ((PyObject *)__pyx_n_s__weight));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__weight));
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_weight);
    __pyx_v_weight = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cynest/kernel.pyx":328
 *         elif weight != None and delay != None:
 *             weight = broadcast(weight, n, (float,), "weight")
 *             if len(weight) != n:             # <<<<<<<<<<<<<<
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")
 *             delay = broadcast(delay, n, (float,), "delay")
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_weight); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_n, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {

      /* "cynest/kernel.pyx":329
 *             weight = broadcast(weight, n, (float,), "weight")
 *             if len(weight) != n:
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")             # <<<<<<<<<<<<<<
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:
 */
      __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_74), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "cynest/kernel.pyx":330
 *             if len(weight) != n:
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")
 *             delay = broadcast(delay, n, (float,), "delay")             # <<<<<<<<<<<<<<
 *             if len(delay) != n:
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__broadcast); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)((PyObject*)(&PyFloat_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyFloat_Type))));
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_delay);
    __Pyx_GIVEREF(__pyx_v_delay);
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_t_3));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__delay));
    PyTuple_SET_ITEM(__pyx_t_4, 3, ((PyObject *)__pyx_n_s__delay));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__delay));
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_delay);
    __pyx_v_delay = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cynest/kernel.pyx":331
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:             # <<<<<<<<<<<<<<
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")
 * 
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_delay); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_n, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {

      /* "cynest/kernel.pyx":332
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")             # <<<<<<<<<<<<<<
 * 
 *             sli_func(
 */
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_k_tuple_75), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "cynest/kernel.pyx":334
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")
 * 
 *             sli_func(             # <<<<<<<<<<<<<<
 *                 '/m Set /d Set /w Set /n Set /post Set { n post w d m RandomDivergentConnect } forall',
 *                 pre, post, n, weight, delay, '/'+model, litconv=True)
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "cynest/kernel.pyx":336
 *             sli_func(
 *                 '/m Set /d Set /w Set /n Set /post Set { n post w d m RandomDivergentConnect } forall',
 *                 pre, post, n, weight, delay, '/'+model, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_kp_s_5), __pyx_v_model); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_76));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_kp_s_76));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_76));
    __Pyx_INCREF(__pyx_v_pre);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_pre);
    __Pyx_GIVEREF(__pyx_v_pre);
    __Pyx_INCREF(__pyx_v_post);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_post);
    __Pyx_GIVEREF(__pyx_v_post);
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    __Pyx_INCREF(__pyx_v_weight);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_weight);
    __Pyx_GIVEREF(__pyx_v_weight);
    __Pyx_INCREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_delay);
    __Pyx_GIVEREF(__pyx_v_delay);
    PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "cynest/kernel.pyx":334
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")
 * 
 *             sli_func(             # <<<<<<<<<<<<<<
 *                 '/m Set /d Set /w Set /n Set /post Set { n post w d m RandomDivergentConnect } forall',
 *                 pre, post, n, weight, delay, '/'+model, litconv=True)
 */
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));

    /* "cynest/kernel.pyx":336
 *             sli_func(
 *                 '/m Set /d Set /w Set /n Set /post Set { n post w d m RandomDivergentConnect } forall',
 *                 pre, post, n, weight, delay, '/'+model, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_5 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_4, ((PyObject *)__pyx_n_s__litconv), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "cynest/kernel.pyx":339
 * 
 *         else:
 *             error = True             # <<<<<<<<<<<<<<
 * 
 *         # restore old options
 */
    __pyx_v_error = 1;
  }
  __pyx_L4:;

  /* "cynest/kernel.pyx":342
 * 
 *         # restore old options
 *         if old_options:             # <<<<<<<<<<<<<<
 *             sli_func('SetOptions', '/RandomDivergentConnect', old_options, litconv=True)
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_old_options); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_6) {

    /* "cynest/kernel.pyx":343
 *         # restore old options
 *         if old_options:
 *             sli_func('SetOptions', '/RandomDivergentConnect', old_options, litconv=True)             # <<<<<<<<<<<<<<
 * 
 *         if error:
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sli_func); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_n_s__SetOptions));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_n_s__SetOptions));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__SetOptions));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_71));
    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_kp_s_71));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_71));
    __Pyx_INCREF(__pyx_v_old_options);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_old_options);
    __Pyx_GIVEREF(__pyx_v_old_options);
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_3 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__litconv), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_4), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "cynest/kernel.pyx":345
 *             sli_func('SetOptions', '/RandomDivergentConnect', old_options, litconv=True)
 * 
 *         if error:             # <<<<<<<<<<<<<<
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")
 * 
 */
  if (__pyx_v_error) {

    /* "cynest/kernel.pyx":346
 * 
 *         if error:
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__NESTError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_77), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L8;
  }
  __pyx_L8:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cynest.kernel.NESTEngine.random_divergent_connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_old_options);
  __Pyx_XDECREF(__pyx_v_weight);
  __Pyx_XDECREF(__pyx_v_delay);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6cynest_6kernel_9NameDatum_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6cynest_6kernel_9NameDatum_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cynest.kernel.NameDatum.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6cynest_6kernel_9NameDatum___cinit__(((struct __pyx_obj_6cynest_6kernel_NameDatum *)__pyx_v_self), __pyx_v_name);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":356
 *      """
 *      cdef classes.NameDatum *thisptr
 *      def __cinit__(self, name):             # <<<<<<<<<<<<<<
 *          cdef string name_b=name.encode('UTF-8')
 *          self.thisptr = new classes.NameDatum(name_b)
 */

static int __pyx_pf_6cynest_6kernel_9NameDatum___cinit__(struct __pyx_obj_6cynest_6kernel_NameDatum *__pyx_v_self, PyObject *__pyx_v_name) {
  std::string __pyx_v_name_b;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cynest/kernel.pyx":357
 *      cdef classes.NameDatum *thisptr
 *      def __cinit__(self, name):
 *          cdef string name_b=name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *          self.thisptr = new classes.NameDatum(name_b)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_name, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_78), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_name_b = __pyx_t_3;

  /* "cynest/kernel.pyx":358
 *      def __cinit__(self, name):
 *          cdef string name_b=name.encode('UTF-8')
 *          self.thisptr = new classes.NameDatum(name_b)             # <<<<<<<<<<<<<<
 * 
 *      def __dealloc__(self):
 */
  __pyx_v_self->thisptr = new NameDatum(__pyx_v_name_b);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cynest.kernel.NameDatum.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_6cynest_6kernel_9NameDatum_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6cynest_6kernel_9NameDatum_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6cynest_6kernel_9NameDatum_2__dealloc__(((struct __pyx_obj_6cynest_6kernel_NameDatum *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "cynest/kernel.pyx":360
 *          self.thisptr = new classes.NameDatum(name_b)
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          del self.thisptr
 * 
 */

static void __pyx_pf_6cynest_6kernel_9NameDatum_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6cynest_6kernel_NameDatum *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cynest/kernel.pyx":361
 * 
 *      def __dealloc__(self):
 *          del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *      def as_PyToken(self):
 */
  delete __pyx_v_self->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_9NameDatum_5as_PyToken(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6cynest_6kernel_9NameDatum_4as_PyToken[] = "\n         Create a new Token with the NameDatum.\n         ";
static PyObject *__pyx_pw_6cynest_6kernel_9NameDatum_5as_PyToken(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_PyToken (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_9NameDatum_4as_PyToken(((struct __pyx_obj_6cynest_6kernel_NameDatum *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":363
 *          del self.thisptr
 * 
 *      def as_PyToken(self):             # <<<<<<<<<<<<<<
 *          """
 *          Create a new Token with the NameDatum.
 */

static PyObject *__pyx_pf_6cynest_6kernel_9NameDatum_4as_PyToken(struct __pyx_obj_6cynest_6kernel_NameDatum *__pyx_v_self) {
  struct PyToken *__pyx_v_t = NULL;
  NameDatum *__pyx_v_name_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_PyToken", 0);

  /* "cynest/kernel.pyx":367
 *          Create a new Token with the NameDatum.
 *          """
 *          t=PyToken()             # <<<<<<<<<<<<<<
 *          cdef classes.NameDatum *name_ptr=new classes.NameDatum(self.thisptr[0])
 *          t.thisptr= new classes.Token(<classes.Datum *>name_ptr)
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_PyToken)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct PyToken *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":368
 *          """
 *          t=PyToken()
 *          cdef classes.NameDatum *name_ptr=new classes.NameDatum(self.thisptr[0])             # <<<<<<<<<<<<<<
 *          t.thisptr= new classes.Token(<classes.Datum *>name_ptr)
 *          return t
 */
  __pyx_v_name_ptr = new NameDatum((__pyx_v_self->thisptr[0]));

  /* "cynest/kernel.pyx":369
 *          t=PyToken()
 *          cdef classes.NameDatum *name_ptr=new classes.NameDatum(self.thisptr[0])
 *          t.thisptr= new classes.Token(<classes.Datum *>name_ptr)             # <<<<<<<<<<<<<<
 *          return t
 * 
 */
  __pyx_v_t->thisptr = new Token(((Datum *)__pyx_v_name_ptr));

  /* "cynest/kernel.pyx":370
 *          cdef classes.NameDatum *name_ptr=new classes.NameDatum(self.thisptr[0])
 *          t.thisptr= new classes.Token(<classes.Datum *>name_ptr)
 *          return t             # <<<<<<<<<<<<<<
 * 
 *      def str(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = ((PyObject *)__pyx_v_t);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NameDatum.as_PyToken", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6cynest_6kernel_9NameDatum_7str(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6cynest_6kernel_9NameDatum_6str[] = "\n         Return a string representation of the NameDatum.\n         ";
static PyObject *__pyx_pw_6cynest_6kernel_9NameDatum_7str(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("str (wrapper)", 0);
  __pyx_r = __pyx_pf_6cynest_6kernel_9NameDatum_6str(((struct __pyx_obj_6cynest_6kernel_NameDatum *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":372
 *          return t
 * 
 *      def str(self):             # <<<<<<<<<<<<<<
 *          """
 *          Return a string representation of the NameDatum.
 */

static PyObject *__pyx_pf_6cynest_6kernel_9NameDatum_6str(struct __pyx_obj_6cynest_6kernel_NameDatum *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("str", 0);

  /* "cynest/kernel.pyx":376
 *          Return a string representation of the NameDatum.
 *          """
 *          return self.thisptr.toString()             # <<<<<<<<<<<<<<
 * 
 * cdef public object Token_to_PyObject(classes.Token *arg):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_self->thisptr->toString()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.NameDatum.str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cynest/kernel.pyx":378
 *          return self.thisptr.toString()
 * 
 * cdef public object Token_to_PyObject(classes.Token *arg):             # <<<<<<<<<<<<<<
 *      """
 *      Convert a Datum pointer to a Python object.
 */

PyObject *Token_to_PyObject(Token *__pyx_v_arg) {
  struct PyToken *__pyx_v_dat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Token_to_PyObject", 0);

  /* "cynest/kernel.pyx":384
 *      encapsulate arbitrary Tokens in PyToken objects.
 *      """
 *      dat=PyToken()             # <<<<<<<<<<<<<<
 *      dat.thisptr=arg
 *      return dat
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_PyToken)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dat = ((struct PyToken *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":385
 *      """
 *      dat=PyToken()
 *      dat.thisptr=arg             # <<<<<<<<<<<<<<
 *      return dat
 * 
 */
  __pyx_v_dat->thisptr = __pyx_v_arg;

  /* "cynest/kernel.pyx":386
 *      dat=PyToken()
 *      dat.thisptr=arg
 *      return dat             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dat));
  __pyx_r = ((PyObject *)__pyx_v_dat);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cynest.kernel.Token_to_PyObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":12
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     return string(<char*>o, len(o))
 * 
 */

static std::string __pyx_convert_string_from_py_(PyObject *__pyx_v_o) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_", 0);

  /* "string.from_py":13
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:
 *     return string(<char*>o, len(o))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_o); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = std::string(((char *)__pyx_t_1), __pyx_t_2);
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":26
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return s.data()[:s.size()]
 * 
 */

static PyObject *__pyx_convert_string_to_py_(const std::string &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_to_py_", 0);

  /* "string.to_py":27
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):
 *     return s.data()[:s.size()]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromStringAndSize(((const char*)__pyx_v_s.data()) + 0, __pyx_v_s.size() - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_string_to_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":42
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::string> __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string> __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string> __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);

  /* "vector.from_py":44
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (PyList_CheckExact(__pyx_v_o) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF(__pyx_v_item);
    __pyx_v_item = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "vector.from_py":45
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_item); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":46
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6cynest_6kernel_PyToken(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6cynest_6kernel_PyToken(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6cynest_6kernel_7PyToken_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6cynest_6kernel_PyToken[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyToken = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyToken = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyToken = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyToken = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

DL_EXPORT(PyTypeObject) PyTokenType = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cynest.kernel.PyToken"), /*tp_name*/
  sizeof(struct PyToken), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cynest_6kernel_PyToken, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyToken, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyToken, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyToken, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyToken, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n     Python wrapper of SLI's Token class.\n     "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cynest_6kernel_PyToken, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cynest_6kernel_PyToken, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_6cynest_6kernel_DataConverter __pyx_vtable_6cynest_6kernel_DataConverter;

static PyObject *__pyx_tp_new_6cynest_6kernel_DataConverter(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6cynest_6kernel_DataConverter *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6cynest_6kernel_DataConverter *)o);
  p->__pyx_vtab = __pyx_vtabptr_6cynest_6kernel_DataConverter;
  if (__pyx_pw_6cynest_6kernel_13DataConverter_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6cynest_6kernel_DataConverter(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6cynest_6kernel_13DataConverter_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6cynest_6kernel_DataConverter[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_DataConverter = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_DataConverter = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_DataConverter = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_DataConverter = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6cynest_6kernel_DataConverter = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cynest.kernel.DataConverter"), /*tp_name*/
  sizeof(struct __pyx_obj_6cynest_6kernel_DataConverter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cynest_6kernel_DataConverter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_DataConverter, /*tp_as_number*/
  &__pyx_tp_as_sequence_DataConverter, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_DataConverter, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_DataConverter, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cynest_6kernel_DataConverter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cynest_6kernel_DataConverter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_6cynest_6kernel_SpecialFunctions __pyx_vtable_6cynest_6kernel_SpecialFunctions;

static PyObject *__pyx_tp_new_6cynest_6kernel_SpecialFunctions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6cynest_6kernel_SpecialFunctions *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6cynest_6kernel_SpecialFunctions *)o);
  p->__pyx_vtab = __pyx_vtabptr_6cynest_6kernel_SpecialFunctions;
  new((void*)&(p->modelsFolder)) std::string();
  if (__pyx_pw_6cynest_6kernel_16SpecialFunctions_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6cynest_6kernel_SpecialFunctions(PyObject *o) {
  struct __pyx_obj_6cynest_6kernel_SpecialFunctions *p = (struct __pyx_obj_6cynest_6kernel_SpecialFunctions *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6cynest_6kernel_16SpecialFunctions_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  p->modelsFolder.std::string::~string();
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6cynest_6kernel_SpecialFunctions[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SpecialFunctions = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SpecialFunctions = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SpecialFunctions = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SpecialFunctions = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6cynest_6kernel_SpecialFunctions = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cynest.kernel.SpecialFunctions"), /*tp_name*/
  sizeof(struct __pyx_obj_6cynest_6kernel_SpecialFunctions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cynest_6kernel_SpecialFunctions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SpecialFunctions, /*tp_as_number*/
  &__pyx_tp_as_sequence_SpecialFunctions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SpecialFunctions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SpecialFunctions, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cynest_6kernel_SpecialFunctions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cynest_6kernel_SpecialFunctions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_6cynest_6kernel_StandardParams __pyx_vtable_6cynest_6kernel_StandardParams;

static PyObject *__pyx_tp_new_6cynest_6kernel_StandardParams(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6cynest_6kernel_StandardParams *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6cynest_6kernel_StandardParams *)o);
  p->__pyx_vtab = __pyx_vtabptr_6cynest_6kernel_StandardParams;
  if (__pyx_pw_6cynest_6kernel_14StandardParams_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6cynest_6kernel_StandardParams(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6cynest_6kernel_14StandardParams_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6cynest_6kernel_StandardParams[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_StandardParams = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_StandardParams = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_StandardParams = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_StandardParams = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6cynest_6kernel_StandardParams = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cynest.kernel.StandardParams"), /*tp_name*/
  sizeof(struct __pyx_obj_6cynest_6kernel_StandardParams), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cynest_6kernel_StandardParams, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_StandardParams, /*tp_as_number*/
  &__pyx_tp_as_sequence_StandardParams, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_StandardParams, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_StandardParams, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cynest_6kernel_StandardParams, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cynest_6kernel_StandardParams, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_6cynest_6kernel_CythonEntry __pyx_vtable_6cynest_6kernel_CythonEntry;

static PyObject *__pyx_tp_new_6cynest_6kernel_CythonEntry(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6cynest_6kernel_CythonEntry *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6cynest_6kernel_CythonEntry *)o);
  p->__pyx_vtab = __pyx_vtabptr_6cynest_6kernel_CythonEntry;
  if (__pyx_pw_6cynest_6kernel_11CythonEntry_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6cynest_6kernel_CythonEntry(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6cynest_6kernel_11CythonEntry_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6cynest_6kernel_CythonEntry[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CythonEntry = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_CythonEntry = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CythonEntry = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_CythonEntry = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6cynest_6kernel_CythonEntry = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cynest.kernel.CythonEntry"), /*tp_name*/
  sizeof(struct __pyx_obj_6cynest_6kernel_CythonEntry), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cynest_6kernel_CythonEntry, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CythonEntry, /*tp_as_number*/
  &__pyx_tp_as_sequence_CythonEntry, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CythonEntry, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_CythonEntry, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cynest_6kernel_CythonEntry, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cynest_6kernel_CythonEntry, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_6cynest_6kernel_SLIDataContainer __pyx_vtable_6cynest_6kernel_SLIDataContainer;

static PyObject *__pyx_tp_new_6cynest_6kernel_SLIDataContainer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6cynest_6kernel_SLIDataContainer *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6cynest_6kernel_SLIDataContainer *)o);
  p->__pyx_vtab = __pyx_vtabptr_6cynest_6kernel_SLIDataContainer;
  p->commands = Py_None; Py_INCREF(Py_None);
  if (__pyx_pw_6cynest_6kernel_16SLIDataContainer_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6cynest_6kernel_SLIDataContainer(PyObject *o) {
  struct __pyx_obj_6cynest_6kernel_SLIDataContainer *p = (struct __pyx_obj_6cynest_6kernel_SLIDataContainer *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->commands);
  PyObject_GC_Track(o);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6cynest_6kernel_SLIDataContainer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6cynest_6kernel_SLIDataContainer *p = (struct __pyx_obj_6cynest_6kernel_SLIDataContainer *)o;
  if (p->commands) {
    e = (*v)(p->commands, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6cynest_6kernel_SLIDataContainer(PyObject *o) {
  struct __pyx_obj_6cynest_6kernel_SLIDataContainer *p = (struct __pyx_obj_6cynest_6kernel_SLIDataContainer *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->commands);
  p->commands = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6cynest_6kernel_SLIDataContainer[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SLIDataContainer = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SLIDataContainer = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SLIDataContainer = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SLIDataContainer = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6cynest_6kernel_SLIDataContainer = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cynest.kernel.SLIDataContainer"), /*tp_name*/
  sizeof(struct __pyx_obj_6cynest_6kernel_SLIDataContainer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cynest_6kernel_SLIDataContainer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SLIDataContainer, /*tp_as_number*/
  &__pyx_tp_as_sequence_SLIDataContainer, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SLIDataContainer, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SLIDataContainer, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6cynest_6kernel_SLIDataContainer, /*tp_traverse*/
  __pyx_tp_clear_6cynest_6kernel_SLIDataContainer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cynest_6kernel_SLIDataContainer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cynest_6kernel_SLIDataContainer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_6cynest_6kernel_NESTEngine __pyx_vtable_6cynest_6kernel_NESTEngine;

static PyObject *__pyx_tp_new_6cynest_6kernel_NESTEngine(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6cynest_6kernel_NESTEngine *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6cynest_6kernel_NESTEngine *)o);
  p->__pyx_vtab = __pyx_vtabptr_6cynest_6kernel_NESTEngine;
  p->sli_container = ((struct __pyx_obj_6cynest_6kernel_SLIDataContainer *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pw_6cynest_6kernel_10NESTEngine_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6cynest_6kernel_NESTEngine(PyObject *o) {
  struct __pyx_obj_6cynest_6kernel_NESTEngine *p = (struct __pyx_obj_6cynest_6kernel_NESTEngine *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6cynest_6kernel_10NESTEngine_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->sli_container);
  PyObject_GC_Track(o);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6cynest_6kernel_NESTEngine(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6cynest_6kernel_NESTEngine *p = (struct __pyx_obj_6cynest_6kernel_NESTEngine *)o;
  if (p->sli_container) {
    e = (*v)(((PyObject*)p->sli_container), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6cynest_6kernel_NESTEngine(PyObject *o) {
  struct __pyx_obj_6cynest_6kernel_NESTEngine *p = (struct __pyx_obj_6cynest_6kernel_NESTEngine *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->sli_container);
  p->sli_container = ((struct __pyx_obj_6cynest_6kernel_SLIDataContainer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6cynest_6kernel_NESTEngine[] = {
  {__Pyx_NAMESTR("run_protected"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_5run_protected, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("init"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_7init, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_10NESTEngine_6init)},
  {__Pyx_NAMESTR("push"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_9push, METH_O, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_10NESTEngine_8push)},
  {__Pyx_NAMESTR("pop"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_11pop, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_10NESTEngine_10pop)},
  {__Pyx_NAMESTR("run"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_13run, METH_O, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_10NESTEngine_12run)},
  {__Pyx_NAMESTR("run_pytoken"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_15run_pytoken, METH_O, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_10NESTEngine_14run_pytoken)},
  {__Pyx_NAMESTR("pop_pytoken"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_17pop_pytoken, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("push_pytoken"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_19push_pytoken, METH_O, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_10NESTEngine_18push_pytoken)},
  {__Pyx_NAMESTR("push_connections"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_21push_connections, METH_O, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_10NESTEngine_20push_connections)},
  {__Pyx_NAMESTR("check_engine"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_23check_engine, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_10NESTEngine_22check_engine)},
  {__Pyx_NAMESTR("convergent_connect"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_25convergent_connect, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("divergent_connect"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_27divergent_connect, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("data_connect1"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_29data_connect1, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("data_connect2"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_31data_connect2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("random_convergent_connect"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_33random_convergent_connect, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("random_divergent_connect"), (PyCFunction)__pyx_pw_6cynest_6kernel_10NESTEngine_35random_divergent_connect, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_NESTEngine = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_NESTEngine = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_NESTEngine = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_NESTEngine = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6cynest_6kernel_NESTEngine = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cynest.kernel.NESTEngine"), /*tp_name*/
  sizeof(struct __pyx_obj_6cynest_6kernel_NESTEngine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cynest_6kernel_NESTEngine, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_NESTEngine, /*tp_as_number*/
  &__pyx_tp_as_sequence_NESTEngine, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_NESTEngine, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_NESTEngine, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6cynest_6kernel_NESTEngine, /*tp_traverse*/
  __pyx_tp_clear_6cynest_6kernel_NESTEngine, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cynest_6kernel_NESTEngine, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cynest_6kernel_NESTEngine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6cynest_6kernel_NameDatum(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_6cynest_6kernel_9NameDatum_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6cynest_6kernel_NameDatum(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6cynest_6kernel_9NameDatum_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6cynest_6kernel_NameDatum[] = {
  {__Pyx_NAMESTR("as_PyToken"), (PyCFunction)__pyx_pw_6cynest_6kernel_9NameDatum_5as_PyToken, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_9NameDatum_4as_PyToken)},
  {__Pyx_NAMESTR("str"), (PyCFunction)__pyx_pw_6cynest_6kernel_9NameDatum_7str, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6cynest_6kernel_9NameDatum_6str)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_NameDatum = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_NameDatum = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_NameDatum = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_NameDatum = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6cynest_6kernel_NameDatum = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cynest.kernel.NameDatum"), /*tp_name*/
  sizeof(struct __pyx_obj_6cynest_6kernel_NameDatum), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6cynest_6kernel_NameDatum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_NameDatum, /*tp_as_number*/
  &__pyx_tp_as_sequence_NameDatum, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_NameDatum, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_NameDatum, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n     Python wrapper of SLI's NameDatum class. \n     This class is used to store SLI commands and variables.\n     "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6cynest_6kernel_NameDatum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6cynest_6kernel_NameDatum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static char* __pyx_import_star_type_names[] = {
  "NameDatum",
  "SpecialFunctions",
  "DataConverter",
  "NESTEngine",
  "StandardParams",
  "string",
  "PyToken",
  "X",
  "CythonEntry",
  "SLIDataContainer",
  "vector",
  0
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  char** type_name = __pyx_import_star_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else if (__Pyx_StrEq(name, "composed_unprotected_cmd")) {
    if (!(likely(PyBytes_CheckExact(o))||((o) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(o)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L2_error;};
    Py_INCREF(o);
    Py_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_composed_unprotected_cmd));
    __pyx_v_6cynest_6kernel_composed_unprotected_cmd = ((PyObject*)o);
  }
  else if (__Pyx_StrEq(name, "invalid_cmd")) {
    if (!(likely(PyBytes_CheckExact(o))||((o) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(o)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L2_error;};
    Py_INCREF(o);
    Py_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_invalid_cmd));
    __pyx_v_6cynest_6kernel_invalid_cmd = ((PyObject*)o);
  }
  else if (__Pyx_StrEq(name, "stdParams")) {
    Py_INCREF(o);
    Py_DECREF(__pyx_v_6cynest_6kernel_stdParams);
    __pyx_v_6cynest_6kernel_stdParams = o;
  }
  else if (__Pyx_StrEq(name, "spFct")) {
    if (!(likely(((o) == Py_None) || likely(__Pyx_TypeTest(o, __pyx_ptype_6cynest_6kernel_SpecialFunctions))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L2_error;};
    Py_INCREF(o);
    Py_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_spFct));
    __pyx_v_6cynest_6kernel_spFct = ((struct __pyx_obj_6cynest_6kernel_SpecialFunctions *)o);
  }
  else if (__Pyx_StrEq(name, "composed_protected_cmd")) {
    if (!(likely(PyBytes_CheckExact(o))||((o) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(o)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L2_error;};
    Py_INCREF(o);
    Py_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_composed_protected_cmd));
    __pyx_v_6cynest_6kernel_composed_protected_cmd = ((PyObject*)o);
  }
  else if (__Pyx_StrEq(name, "converter")) {
    if (!(likely(((o) == Py_None) || likely(__Pyx_TypeTest(o, __pyx_ptype_6cynest_6kernel_DataConverter))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L2_error;};
    Py_INCREF(o);
    Py_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_converter));
    __pyx_v_6cynest_6kernel_converter = ((struct __pyx_obj_6cynest_6kernel_DataConverter *)o);
  }
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  __pyx_L2_error:;
  __Pyx_AddTraceback("cynest.kernel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  bad:
  return -1;
}


/* import_all_from is an unexposed function from ceval.c */

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = __Pyx_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;

    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1; /* Unexpected error */
        PyErr_Clear();
        dict = __Pyx_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }

    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            PyString_Check(name) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            PyUnicode_Check(name) &&
            PyUnicode_AS_UNICODE(name)[0] == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}


static int __pyx_import_star(PyObject* m) {

    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;

    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;

    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;

bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}


#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("kernel"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_100, __pyx_k_100, sizeof(__pyx_k_100), 0, 0, 1, 0},
  {&__pyx_kp_s_102, __pyx_k_102, sizeof(__pyx_k_102), 0, 0, 1, 0},
  {&__pyx_kp_s_104, __pyx_k_104, sizeof(__pyx_k_104), 0, 0, 1, 0},
  {&__pyx_kp_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 0},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_kp_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 0},
  {&__pyx_kp_b_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 0, 0, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 0},
  {&__pyx_kp_s_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 0, 1, 0},
  {&__pyx_n_s_29, __pyx_k_29, sizeof(__pyx_k_29), 0, 0, 1, 1},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 0, 1, 0},
  {&__pyx_kp_s_32, __pyx_k_32, sizeof(__pyx_k_32), 0, 0, 1, 0},
  {&__pyx_n_s_33, __pyx_k_33, sizeof(__pyx_k_33), 0, 0, 1, 1},
  {&__pyx_kp_s_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 0, 1, 0},
  {&__pyx_kp_s_38, __pyx_k_38, sizeof(__pyx_k_38), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 1, 0},
  {&__pyx_kp_s_42, __pyx_k_42, sizeof(__pyx_k_42), 0, 0, 1, 0},
  {&__pyx_kp_s_44, __pyx_k_44, sizeof(__pyx_k_44), 0, 0, 1, 0},
  {&__pyx_kp_s_49, __pyx_k_49, sizeof(__pyx_k_49), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_51, __pyx_k_51, sizeof(__pyx_k_51), 0, 0, 1, 0},
  {&__pyx_n_s_54, __pyx_k_54, sizeof(__pyx_k_54), 0, 0, 1, 1},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_61, __pyx_k_61, sizeof(__pyx_k_61), 0, 0, 1, 0},
  {&__pyx_kp_s_62, __pyx_k_62, sizeof(__pyx_k_62), 0, 0, 1, 0},
  {&__pyx_kp_s_64, __pyx_k_64, sizeof(__pyx_k_64), 0, 0, 1, 0},
  {&__pyx_kp_s_65, __pyx_k_65, sizeof(__pyx_k_65), 0, 0, 1, 0},
  {&__pyx_kp_s_67, __pyx_k_67, sizeof(__pyx_k_67), 0, 0, 1, 0},
  {&__pyx_kp_s_69, __pyx_k_69, sizeof(__pyx_k_69), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_71, __pyx_k_71, sizeof(__pyx_k_71), 0, 0, 1, 0},
  {&__pyx_kp_s_73, __pyx_k_73, sizeof(__pyx_k_73), 0, 0, 1, 0},
  {&__pyx_kp_s_76, __pyx_k_76, sizeof(__pyx_k_76), 0, 0, 1, 0},
  {&__pyx_n_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 1},
  {&__pyx_kp_s_81, __pyx_k_81, sizeof(__pyx_k_81), 0, 0, 1, 0},
  {&__pyx_n_s_82, __pyx_k_82, sizeof(__pyx_k_82), 0, 0, 1, 1},
  {&__pyx_n_s_83, __pyx_k_83, sizeof(__pyx_k_83), 0, 0, 1, 1},
  {&__pyx_n_s_84, __pyx_k_84, sizeof(__pyx_k_84), 0, 0, 1, 1},
  {&__pyx_kp_s_87, __pyx_k_87, sizeof(__pyx_k_87), 0, 0, 1, 0},
  {&__pyx_n_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 1},
  {&__pyx_n_s__CFUNCTYPE, __pyx_k__CFUNCTYPE, sizeof(__pyx_k__CFUNCTYPE), 0, 0, 1, 1},
  {&__pyx_n_s__Connect_i_D_i, __pyx_k__Connect_i_D_i, sizeof(__pyx_k__Connect_i_D_i), 0, 0, 1, 1},
  {&__pyx_n_s__ConvergentConnect, __pyx_k__ConvergentConnect, sizeof(__pyx_k__ConvergentConnect), 0, 0, 1, 1},
  {&__pyx_n_s__DefaultOptions, __pyx_k__DefaultOptions, sizeof(__pyx_k__DefaultOptions), 0, 0, 1, 1},
  {&__pyx_n_s__DivergentConnect, __pyx_k__DivergentConnect, sizeof(__pyx_k__DivergentConnect), 0, 0, 1, 1},
  {&__pyx_n_s__EEXIST, __pyx_k__EEXIST, sizeof(__pyx_k__EEXIST), 0, 0, 1, 1},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__GETMSFUNC, __pyx_k__GETMSFUNC, sizeof(__pyx_k__GETMSFUNC), 0, 0, 1, 1},
  {&__pyx_n_s__GETSCHEDULERVALUE, __pyx_k__GETSCHEDULERVALUE, sizeof(__pyx_k__GETSCHEDULERVALUE), 0, 0, 1, 1},
  {&__pyx_n_s__GETTICSORSTEPSFUNC, __pyx_k__GETTICSORSTEPSFUNC, sizeof(__pyx_k__GETTICSORSTEPSFUNC), 0, 0, 1, 1},
  {&__pyx_n_s__GetOptions, __pyx_k__GetOptions, sizeof(__pyx_k__GetOptions), 0, 0, 1, 1},
  {&__pyx_n_s__KeyboardInterrupt, __pyx_k__KeyboardInterrupt, sizeof(__pyx_k__KeyboardInterrupt), 0, 0, 1, 1},
  {&__pyx_n_s__NESTError, __pyx_k__NESTError, sizeof(__pyx_k__NESTError), 0, 0, 1, 1},
  {&__pyx_n_s__OSError, __pyx_k__OSError, sizeof(__pyx_k__OSError), 0, 0, 1, 1},
  {&__pyx_n_s__PyDLL, __pyx_k__PyDLL, sizeof(__pyx_k__PyDLL), 0, 0, 1, 1},
  {&__pyx_n_s__SIGINT, __pyx_k__SIGINT, sizeof(__pyx_k__SIGINT), 0, 0, 1, 1},
  {&__pyx_n_s__SetOptions, __pyx_k__SetOptions, sizeof(__pyx_k__SetOptions), 0, 0, 1, 1},
  {&__pyx_n_s____file__, __pyx_k____file__, sizeof(__pyx_k____file__), 0, 0, 1, 1},
  {&__pyx_n_s____init__, __pyx_k____init__, sizeof(__pyx_k____init__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__arg1, __pyx_k__arg1, sizeof(__pyx_k__arg1), 0, 0, 1, 1},
  {&__pyx_n_s__arg2, __pyx_k__arg2, sizeof(__pyx_k__arg2), 0, 0, 1, 1},
  {&__pyx_n_s__arg3, __pyx_k__arg3, sizeof(__pyx_k__arg3), 0, 0, 1, 1},
  {&__pyx_n_s__arg4, __pyx_k__arg4, sizeof(__pyx_k__arg4), 0, 0, 1, 1},
  {&__pyx_n_s__argtypes, __pyx_k__argtypes, sizeof(__pyx_k__argtypes), 0, 0, 1, 1},
  {&__pyx_n_s__argv, __pyx_k__argv, sizeof(__pyx_k__argv), 0, 0, 1, 1},
  {&__pyx_n_s__bin, __pyx_k__bin, sizeof(__pyx_k__bin), 0, 0, 1, 1},
  {&__pyx_n_s__broadcast, __pyx_k__broadcast, sizeof(__pyx_k__broadcast), 0, 0, 1, 1},
  {&__pyx_n_s__byref, __pyx_k__byref, sizeof(__pyx_k__byref), 0, 0, 1, 1},
  {&__pyx_n_s__cD, __pyx_k__cD, sizeof(__pyx_k__cD), 0, 0, 1, 1},
  {&__pyx_n_s__cDR, __pyx_k__cDR, sizeof(__pyx_k__cDR), 0, 0, 1, 1},
  {&__pyx_n_s__c_double, __pyx_k__c_double, sizeof(__pyx_k__c_double), 0, 0, 1, 1},
  {&__pyx_n_s__c_int, __pyx_k__c_int, sizeof(__pyx_k__c_int), 0, 0, 1, 1},
  {&__pyx_n_s__c_long, __pyx_k__c_long, sizeof(__pyx_k__c_long), 0, 0, 1, 1},
  {&__pyx_n_s__c_uint, __pyx_k__c_uint, sizeof(__pyx_k__c_uint), 0, 0, 1, 1},
  {&__pyx_n_s__c_void_p, __pyx_k__c_void_p, sizeof(__pyx_k__c_void_p), 0, 0, 1, 1},
  {&__pyx_n_s__calibrate, __pyx_k__calibrate, sizeof(__pyx_k__calibrate), 0, 0, 1, 1},
  {&__pyx_n_s__cmd, __pyx_k__cmd, sizeof(__pyx_k__cmd), 0, 0, 1, 1},
  {&__pyx_n_s__createNeuron, __pyx_k__createNeuron, sizeof(__pyx_k__createNeuron), 0, 0, 1, 1},
  {&__pyx_n_s__ctypes, __pyx_k__ctypes, sizeof(__pyx_k__ctypes), 0, 0, 1, 1},
  {&__pyx_n_s__cynest, __pyx_k__cynest, sizeof(__pyx_k__cynest), 0, 0, 1, 1},
  {&__pyx_n_s__cython_models, __pyx_k__cython_models, sizeof(__pyx_k__cython_models), 0, 0, 1, 1},
  {&__pyx_n_s__data_connect2, __pyx_k__data_connect2, sizeof(__pyx_k__data_connect2), 0, 0, 1, 1},
  {&__pyx_n_s__delay, __pyx_k__delay, sizeof(__pyx_k__delay), 0, 0, 1, 1},
  {&__pyx_n_s__destroy, __pyx_k__destroy, sizeof(__pyx_k__destroy), 0, 0, 1, 1},
  {&__pyx_n_s__dirname, __pyx_k__dirname, sizeof(__pyx_k__dirname), 0, 0, 1, 1},
  {&__pyx_n_s__encode, __pyx_k__encode, sizeof(__pyx_k__encode), 0, 0, 1, 1},
  {&__pyx_n_s__errno, __pyx_k__errno, sizeof(__pyx_k__errno), 0, 0, 1, 1},
  {&__pyx_n_s__esD, __pyx_k__esD, sizeof(__pyx_k__esD), 0, 0, 1, 1},
  {&__pyx_n_s__esDR, __pyx_k__esDR, sizeof(__pyx_k__esDR), 0, 0, 1, 1},
  {&__pyx_n_s__frame, __pyx_k__frame, sizeof(__pyx_k__frame), 0, 0, 1, 1},
  {&__pyx_n_s__getNbNeurons, __pyx_k__getNbNeurons, sizeof(__pyx_k__getNbNeurons), 0, 0, 1, 1},
  {&__pyx_n_s__getNeuronParams, __pyx_k__getNeuronParams, sizeof(__pyx_k__getNeuronParams), 0, 0, 1, 1},
  {&__pyx_n_s__getStatus, __pyx_k__getStatus, sizeof(__pyx_k__getStatus), 0, 0, 1, 1},
  {&__pyx_n_s__getStdVars, __pyx_k__getStdVars, sizeof(__pyx_k__getStdVars), 0, 0, 1, 1},
  {&__pyx_n_s__get_ms, __pyx_k__get_ms, sizeof(__pyx_k__get_ms), 0, 0, 1, 1},
  {&__pyx_n_s__get_scheduler_value, __pyx_k__get_scheduler_value, sizeof(__pyx_k__get_scheduler_value), 0, 0, 1, 1},
  {&__pyx_n_s__get_tics_or_steps, __pyx_k__get_tics_or_steps, sizeof(__pyx_k__get_tics_or_steps), 0, 0, 1, 1},
  {&__pyx_n_s__getmsFCT, __pyx_k__getmsFCT, sizeof(__pyx_k__getmsFCT), 0, 0, 1, 1},
  {&__pyx_n_s__getticsorstepsFCT, __pyx_k__getticsorstepsFCT, sizeof(__pyx_k__getticsorstepsFCT), 0, 0, 1, 1},
  {&__pyx_n_s__group, __pyx_k__group, sizeof(__pyx_k__group), 0, 0, 1, 1},
  {&__pyx_n_s__has_key, __pyx_k__has_key, sizeof(__pyx_k__has_key), 0, 0, 1, 1},
  {&__pyx_n_s__include, __pyx_k__include, sizeof(__pyx_k__include), 0, 0, 1, 1},
  {&__pyx_n_s__isD, __pyx_k__isD, sizeof(__pyx_k__isD), 0, 0, 1, 1},
  {&__pyx_n_s__isDR, __pyx_k__isDR, sizeof(__pyx_k__isDR), 0, 0, 1, 1},
  {&__pyx_n_s__isdir, __pyx_k__isdir, sizeof(__pyx_k__isdir), 0, 0, 1, 1},
  {&__pyx_n_s__lI, __pyx_k__lI, sizeof(__pyx_k__lI), 0, 0, 1, 1},
  {&__pyx_n_s__lIR, __pyx_k__lIR, sizeof(__pyx_k__lIR), 0, 0, 1, 1},
  {&__pyx_n_s__lib, __pyx_k__lib, sizeof(__pyx_k__lib), 0, 0, 1, 1},
  {&__pyx_n_s__libc, __pyx_k__libc, sizeof(__pyx_k__libc), 0, 0, 1, 1},
  {&__pyx_n_s__listSo, __pyx_k__listSo, sizeof(__pyx_k__listSo), 0, 0, 1, 1},
  {&__pyx_n_s__listdir, __pyx_k__listdir, sizeof(__pyx_k__listdir), 0, 0, 1, 1},
  {&__pyx_n_s__litconv, __pyx_k__litconv, sizeof(__pyx_k__litconv), 0, 0, 1, 1},
  {&__pyx_n_s__loadNewNeuron, __pyx_k__loadNewNeuron, sizeof(__pyx_k__loadNewNeuron), 0, 0, 1, 1},
  {&__pyx_n_s__loadedNeurons, __pyx_k__loadedNeurons, sizeof(__pyx_k__loadedNeurons), 0, 0, 1, 1},
  {&__pyx_n_s__m, __pyx_k__m, sizeof(__pyx_k__m), 0, 0, 1, 1},
  {&__pyx_n_s__makedirs, __pyx_k__makedirs, sizeof(__pyx_k__makedirs), 0, 0, 1, 1},
  {&__pyx_n_s__match, __pyx_k__match, sizeof(__pyx_k__match), 0, 0, 1, 1},
  {&__pyx_n_s__model, __pyx_k__model, sizeof(__pyx_k__model), 0, 0, 1, 1},
  {&__pyx_n_s__modulepath, __pyx_k__modulepath, sizeof(__pyx_k__modulepath), 0, 0, 1, 1},
  {&__pyx_n_s__msg, __pyx_k__msg, sizeof(__pyx_k__msg), 0, 0, 1, 1},
  {&__pyx_n_s__n, __pyx_k__n, sizeof(__pyx_k__n), 0, 0, 1, 1},
  {&__pyx_n_s__nList, __pyx_k__nList, sizeof(__pyx_k__nList), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__options, __pyx_k__options, sizeof(__pyx_k__options), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__params, __pyx_k__params, sizeof(__pyx_k__params), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__post, __pyx_k__post, sizeof(__pyx_k__post), 0, 0, 1, 1},
  {&__pyx_n_s__pre, __pyx_k__pre, sizeof(__pyx_k__pre), 0, 0, 1, 1},
  {&__pyx_n_s__push, __pyx_k__push, sizeof(__pyx_k__push), 0, 0, 1, 1},
  {&__pyx_n_s__push_pytoken, __pyx_k__push_pytoken, sizeof(__pyx_k__push_pytoken), 0, 0, 1, 1},
  {&__pyx_n_s__putSpecialFunctions, __pyx_k__putSpecialFunctions, sizeof(__pyx_k__putSpecialFunctions), 0, 0, 1, 1},
  {&__pyx_n_s__py_object, __pyx_k__py_object, sizeof(__pyx_k__py_object), 0, 0, 1, 1},
  {&__pyx_n_s__re, __pyx_k__re, sizeof(__pyx_k__re), 0, 0, 1, 1},
  {&__pyx_n_s__realpath, __pyx_k__realpath, sizeof(__pyx_k__realpath), 0, 0, 1, 1},
  {&__pyx_n_s__restype, __pyx_k__restype, sizeof(__pyx_k__restype), 0, 0, 1, 1},
  {&__pyx_n_s__returnNeuronName, __pyx_k__returnNeuronName, sizeof(__pyx_k__returnNeuronName), 0, 0, 1, 1},
  {&__pyx_n_s__run, __pyx_k__run, sizeof(__pyx_k__run), 0, 0, 1, 1},
  {&__pyx_n_s__run_pytoken, __pyx_k__run_pytoken, sizeof(__pyx_k__run_pytoken), 0, 0, 1, 1},
  {&__pyx_n_s__sI, __pyx_k__sI, sizeof(__pyx_k__sI), 0, 0, 1, 1},
  {&__pyx_n_s__sIR, __pyx_k__sIR, sizeof(__pyx_k__sIR), 0, 0, 1, 1},
  {&__pyx_n_s__search, __pyx_k__search, sizeof(__pyx_k__search), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__sep, __pyx_k__sep, sizeof(__pyx_k__sep), 0, 0, 1, 1},
  {&__pyx_n_s__setNeuronParams, __pyx_k__setNeuronParams, sizeof(__pyx_k__setNeuronParams), 0, 0, 1, 1},
  {&__pyx_n_s__setStatus, __pyx_k__setStatus, sizeof(__pyx_k__setStatus), 0, 0, 1, 1},
  {&__pyx_n_s__setStdVars, __pyx_k__setStdVars, sizeof(__pyx_k__setStdVars), 0, 0, 1, 1},
  {&__pyx_n_s__share, __pyx_k__share, sizeof(__pyx_k__share), 0, 0, 1, 1},
  {&__pyx_n_s__signal, __pyx_k__signal, sizeof(__pyx_k__signal), 0, 0, 1, 1},
  {&__pyx_n_s__sli_func, __pyx_k__sli_func, sizeof(__pyx_k__sli_func), 0, 0, 1, 1},
  {&__pyx_n_s__so, __pyx_k__so, sizeof(__pyx_k__so), 0, 0, 1, 1},
  {&__pyx_n_s__split, __pyx_k__split, sizeof(__pyx_k__split), 0, 0, 1, 1},
  {&__pyx_n_s__synapsedict, __pyx_k__synapsedict, sizeof(__pyx_k__synapsedict), 0, 0, 1, 1},
  {&__pyx_n_s__sys, __pyx_k__sys, sizeof(__pyx_k__sys), 0, 0, 1, 1},
  {&__pyx_n_s__target, __pyx_k__target, sizeof(__pyx_k__target), 0, 0, 1, 1},
  {&__pyx_n_s__update, __pyx_k__update, sizeof(__pyx_k__update), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__weight, __pyx_k__weight, sizeof(__pyx_k__weight), 0, 0, 1, 1},
  {&__pyx_n_s__zip, __pyx_k__zip, sizeof(__pyx_k__zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_OSError = __Pyx_GetName(__pyx_b, __pyx_n_s__OSError); if (!__pyx_builtin_OSError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_KeyboardInterrupt = __Pyx_GetName(__pyx_b, __pyx_n_s__KeyboardInterrupt); if (!__pyx_builtin_KeyboardInterrupt) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_zip = __Pyx_GetName(__pyx_b, __pyx_n_s__zip); if (!__pyx_builtin_zip) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":195
 *     m = re.search('^{ /(.+?) .*Create }.*$', cmd)
 *     if hasattr(m, 'group'):
 *         return m.group(1)             # <<<<<<<<<<<<<<
 *     else:
 *         return ""
 */
  __pyx_k_tuple_2 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_2);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":260
 * 
 * cdef void cUpdate(string nName, int neuronID) with gil:
 *     cdef bytes neuronName = nName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     if not loadedNeurons.has_key(neuronName):
 */
  __pyx_k_tuple_11 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_11);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_11));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":282
 * # Returns the id of the new neuron
 * cdef int cInit(string neuronName, classes.Datum* args) with gil:
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         loadNewNeuron(nNBytes)
 */
  __pyx_k_tuple_12 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_12);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":302
 * # calibrate method of the cython neuron
 * cdef void cCalibrate(string neuronName, int neuronID, classes.Datum* args) with gil:
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_k_tuple_13 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_13);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_13));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":314
 * # setStatus method of the cython neuron
 * cdef void cSetStatus(string neuronName, int neuronID, classes.Datum* args) with gil:
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_k_tuple_14 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_14);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":326
 * # getStatus method of the cython neuron
 * cdef void cGetStatus(string neuronName, int neuronID, classes.Datum* args) with gil:
 *         cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_k_tuple_15 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_15);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_15));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":338
 * # used when calling the update function.
 * cdef void cStdVars(string neuronName, int neuronID, long* spike, double* in_spikes, double* ex_spikes, double* currents, long* lag) with gil:
 *     cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_k_tuple_16 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_16);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":351
 * # of that type is present
 * cdef void cDestroy(string neuronName, int neuronID) with gil:
 *     cdef bytes nNBytes = neuronName.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     if not loadedNeurons.has_key(nNBytes):
 */
  __pyx_k_tuple_17 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_17);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":66
 *         m = re.search('^{ (.+?) } runprotected$', cmd)
 *         if hasattr(m, 'group'):
 *             command = m.group(1).encode('UTF-8')             # <<<<<<<<<<<<<<
 *             composed_cmd = composed_protected_cmd
 *         else:
 */
  __pyx_k_tuple_23 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_k_tuple_23)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_23);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_23));
  __pyx_k_tuple_24 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_24);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));

  /* "cynest/kernel.pyx":68
 *             argv[0]='cynest'
 * 
 *         argv_bytes= [ str.encode('UTF-8') for str in argv]             # <<<<<<<<<<<<<<
 *         cdef bytes modulepath_bytes=modulepath.encode('UTF-8')
 *         result= self.thisptr.init(argv_bytes, modulepath_bytes)
 */
  __pyx_k_tuple_27 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_27);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));

  /* "cynest/kernel.pyx":69
 * 
 *         argv_bytes= [ str.encode('UTF-8') for str in argv]
 *         cdef bytes modulepath_bytes=modulepath.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         result= self.thisptr.init(argv_bytes, modulepath_bytes)
 * 
 */
  __pyx_k_tuple_28 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_28);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_28));

  /* "cynest/kernel.pyx":116
 *         This function is part of the low-level API.
 *         """
 *         cdef bytes command_bytes=command.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         result = self.sli_container.run(command_bytes)
 */
  __pyx_k_tuple_30 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_30);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_30));

  /* "cynest/kernel.pyx":158
 *             return self.thisptr.push_token(obj.thisptr[0])
 *           else:
 *             raise NESTError("Cannot push empty PyToken.")             # <<<<<<<<<<<<<<
 * 
 *     def push_connections(self, connectome):
 */
  __pyx_k_tuple_35 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_34)); if (unlikely(!__pyx_k_tuple_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_35);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_35));

  /* "cynest/kernel.pyx":175
 * 
 *     def convergent_connect(self, pre, post, weight, delay, model):
 *         self.sli_container.add_command('ConvergentConnect'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken cmd = self.sli_container.get_pytoken('ConvergentConnect'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 */
  __pyx_k_tuple_36 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_36);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_36));

  /* "cynest/kernel.pyx":176
 *     def convergent_connect(self, pre, post, weight, delay, model):
 *         self.sli_container.add_command('ConvergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('ConvergentConnect'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 * 
 */
  __pyx_k_tuple_37 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_37);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_37));

  /* "cynest/kernel.pyx":177
 *         self.sli_container.add_command('ConvergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('ConvergentConnect'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 *         if weight == None and delay == None:
 */
  __pyx_k_tuple_39 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_39);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_39));

  /* "cynest/kernel.pyx":189
 *             weight = broadcast(weight, len(pre), (float,), "weight")
 *             if len(weight) != len(pre):
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(pre)")             # <<<<<<<<<<<<<<
 *             delay = broadcast(delay, len(pre), (float,), "delay")
 *             if len(delay) != len(pre):
 */
  __pyx_k_tuple_41 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_40)); if (unlikely(!__pyx_k_tuple_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_41);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_41));

  /* "cynest/kernel.pyx":192
 *             delay = broadcast(delay, len(pre), (float,), "delay")
 *             if len(delay) != len(pre):
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(pre)")             # <<<<<<<<<<<<<<
 * 
 *             for d in post:
 */
  __pyx_k_tuple_43 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_42)); if (unlikely(!__pyx_k_tuple_43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_43);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_43));

  /* "cynest/kernel.pyx":203
 * 
 *         else:
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")             # <<<<<<<<<<<<<<
 * 
 *     def divergent_connect(self, pre, post, weight, delay, model):
 */
  __pyx_k_tuple_45 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_44)); if (unlikely(!__pyx_k_tuple_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_45);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_45));

  /* "cynest/kernel.pyx":206
 * 
 *     def divergent_connect(self, pre, post, weight, delay, model):
 *         self.sli_container.add_command('DivergentConnect'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken cmd = self.sli_container.get_pytoken('DivergentConnect'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 */
  __pyx_k_tuple_46 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_46);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_46));

  /* "cynest/kernel.pyx":207
 *     def divergent_connect(self, pre, post, weight, delay, model):
 *         self.sli_container.add_command('DivergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('DivergentConnect'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 * 
 */
  __pyx_k_tuple_47 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_47);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_47));

  /* "cynest/kernel.pyx":208
 *         self.sli_container.add_command('DivergentConnect'.encode('UTF-8'))
 *         cdef PyToken cmd = self.sli_container.get_pytoken('DivergentConnect'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 *         if weight == None and delay == None:
 */
  __pyx_k_tuple_48 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_48);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_48));

  /* "cynest/kernel.pyx":220
 *             weight = broadcast(weight, len(post), (float,), "weight")
 *             if len(weight) != len(post):
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or len(post)")             # <<<<<<<<<<<<<<
 *             delay = broadcast(delay, len(post), (float,), "delay")
 *             if len(delay) != len(post):
 */
  __pyx_k_tuple_50 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_49)); if (unlikely(!__pyx_k_tuple_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_50);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_50));

  /* "cynest/kernel.pyx":223
 *             delay = broadcast(delay, len(post), (float,), "delay")
 *             if len(delay) != len(post):
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or len(post)")             # <<<<<<<<<<<<<<
 * 
 *             for s in pre :
 */
  __pyx_k_tuple_52 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_51)); if (unlikely(!__pyx_k_tuple_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_52);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_52));

  /* "cynest/kernel.pyx":234
 * 
 *         else:
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_k_tuple_53 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_44)); if (unlikely(!__pyx_k_tuple_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_53);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_53));

  /* "cynest/kernel.pyx":238
 * 
 *     def data_connect1(self, list pre, list params, string model):
 *         self.sli_container.add_command('DataConnect_i_dict_s'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken cmd1 = self.sli_container.get_pytoken('DataConnect_i_dict_s'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 */
  __pyx_k_tuple_55 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_55);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_55));

  /* "cynest/kernel.pyx":239
 *     def data_connect1(self, list pre, list params, string model):
 *         self.sli_container.add_command('DataConnect_i_dict_s'.encode('UTF-8'))
 *         cdef PyToken cmd1 = self.sli_container.get_pytoken('DataConnect_i_dict_s'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))
 * 
 */
  __pyx_k_tuple_56 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_56);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_56));

  /* "cynest/kernel.pyx":240
 *         self.sli_container.add_command('DataConnect_i_dict_s'.encode('UTF-8'))
 *         cdef PyToken cmd1 = self.sli_container.get_pytoken('DataConnect_i_dict_s'.encode('UTF-8'))
 *         cdef PyToken m = self.sli_container.generate_arg_pytoken(('/%s' % model).encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_k_tuple_57 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_57);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_57));

  /* "cynest/kernel.pyx":252
 * 
 *     cpdef data_connect2(self, list pre, list params, string model):
 *         self.sli_container.add_command('Connect_i_D_i'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         cdef PyToken cmd2 = self.sli_container.get_pytoken('Connect_i_D_i'.encode('UTF-8'))
 *         self.run('synapsedict') #sure unprotected
 */
  __pyx_k_tuple_58 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_58);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_58));

  /* "cynest/kernel.pyx":253
 *     cpdef data_connect2(self, list pre, list params, string model):
 *         self.sli_container.add_command('Connect_i_D_i'.encode('UTF-8'))
 *         cdef PyToken cmd2 = self.sli_container.get_pytoken('Connect_i_D_i'.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         self.run('synapsedict') #sure unprotected
 *         self.run('/%s get'%model)
 */
  __pyx_k_tuple_59 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_59);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_59));

  /* "cynest/kernel.pyx":254
 *         self.sli_container.add_command('Connect_i_D_i'.encode('UTF-8'))
 *         cdef PyToken cmd2 = self.sli_container.get_pytoken('Connect_i_D_i'.encode('UTF-8'))
 *         self.run('synapsedict') #sure unprotected             # <<<<<<<<<<<<<<
 *         self.run('/%s get'%model)
 *         cdef int model_id = self.pop()
 */
  __pyx_k_tuple_60 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__synapsedict)); if (unlikely(!__pyx_k_tuple_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_60);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_60));

  /* "cynest/kernel.pyx":279
 *         error = False
 *         if options:
 *             old_options = sli_func('GetOptions', '/RandomConvergentConnect', litconv=True)             # <<<<<<<<<<<<<<
 *             del old_options['DefaultOptions'] # in the way when restoring
 *             sli_func('SetOptions', '/RandomConvergentConnect', options,
 */
  __pyx_k_tuple_63 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__GetOptions), ((PyObject *)__pyx_kp_s_62)); if (unlikely(!__pyx_k_tuple_63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_63);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_63));

  /* "cynest/kernel.pyx":292
 *             weight = broadcast(weight, n, (float,), "weight")
 *             if len(weight) != n:
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")             # <<<<<<<<<<<<<<
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:
 */
  __pyx_k_tuple_66 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_65)); if (unlikely(!__pyx_k_tuple_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_66);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_66));

  /* "cynest/kernel.pyx":295
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")             # <<<<<<<<<<<<<<
 * 
 *             sli_func(
 */
  __pyx_k_tuple_68 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_67)); if (unlikely(!__pyx_k_tuple_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_68);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_68));

  /* "cynest/kernel.pyx":309
 * 
 *         if error:
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_k_tuple_70 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_44)); if (unlikely(!__pyx_k_tuple_70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_70);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_70));

  /* "cynest/kernel.pyx":317
 *         error = False
 *         if options:
 *             old_options = sli_func('GetOptions', '/RandomDivergentConnect', litconv=True)             # <<<<<<<<<<<<<<
 *             del old_options['DefaultOptions'] # in the way when restoring
 *             sli_func('SetOptions', '/RandomDivergentConnect', options, litconv=True)
 */
  __pyx_k_tuple_72 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__GetOptions), ((PyObject *)__pyx_kp_s_71)); if (unlikely(!__pyx_k_tuple_72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_72);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_72));

  /* "cynest/kernel.pyx":329
 *             weight = broadcast(weight, n, (float,), "weight")
 *             if len(weight) != n:
 *                 raise NESTError("weight must be a float, or sequence of floats of length 1 or n")             # <<<<<<<<<<<<<<
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:
 */
  __pyx_k_tuple_74 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_65)); if (unlikely(!__pyx_k_tuple_74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_74);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_74));

  /* "cynest/kernel.pyx":332
 *             delay = broadcast(delay, n, (float,), "delay")
 *             if len(delay) != n:
 *                 raise NESTError("delay must be a float, or sequence of floats of length 1 or n")             # <<<<<<<<<<<<<<
 * 
 *             sli_func(
 */
  __pyx_k_tuple_75 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_67)); if (unlikely(!__pyx_k_tuple_75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_75);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_75));

  /* "cynest/kernel.pyx":346
 * 
 *         if error:
 *             raise NESTError("Both 'weight' and 'delay' have to be given.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_k_tuple_77 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_44)); if (unlikely(!__pyx_k_tuple_77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_77);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_77));

  /* "cynest/kernel.pyx":357
 *      cdef classes.NameDatum *thisptr
 *      def __cinit__(self, name):
 *          cdef string name_b=name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *          self.thisptr = new classes.NameDatum(name_b)
 * 
 */
  __pyx_k_tuple_78 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_78);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_78));

  /* "cynest/kernel.pyx":9
 * 
 * class NESTError(Exception):
 *     def __init__(self, msg) :             # <<<<<<<<<<<<<<
 *         Exception.__init__(self, msg)
 * 
 */
  __pyx_k_tuple_79 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__self), ((PyObject *)__pyx_n_s__msg)); if (unlikely(!__pyx_k_tuple_79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_79);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_79));
  __pyx_k_codeobj_80 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_81, __pyx_n_s____init__, 9, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":171
 * 
 * # Special Functions helpers (will point to the good C++ function)
 * def get_ms(arg1, arg2, arg3):             # <<<<<<<<<<<<<<
 *     return spFct.get_ms(arg1, arg2, arg3)
 * 
 */
  __pyx_k_tuple_85 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__arg1), ((PyObject *)__pyx_n_s__arg2), ((PyObject *)__pyx_n_s__arg3)); if (unlikely(!__pyx_k_tuple_85)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_85);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_85));
  __pyx_k_codeobj_86 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_87, __pyx_n_s__get_ms, 171, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_86)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":174
 *     return spFct.get_ms(arg1, arg2, arg3)
 * 
 * def get_tics_or_steps(arg1, arg2, arg3, arg4):             # <<<<<<<<<<<<<<
 *     return spFct.get_tics_or_steps(arg1, arg2, arg3, arg4)
 * 
 */
  __pyx_k_tuple_88 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__arg1), ((PyObject *)__pyx_n_s__arg2), ((PyObject *)__pyx_n_s__arg3), ((PyObject *)__pyx_n_s__arg4)); if (unlikely(!__pyx_k_tuple_88)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_88);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_88));
  __pyx_k_codeobj_89 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_87, __pyx_n_s__get_tics_or_steps, 174, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_89)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":177
 *     return spFct.get_tics_or_steps(arg1, arg2, arg3, arg4)
 * 
 * def get_scheduler_value(arg1, arg2):             # <<<<<<<<<<<<<<
 *     return spFct.get_scheduler_value(arg1, arg2)
 * 
 */
  __pyx_k_tuple_90 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__arg1), ((PyObject *)__pyx_n_s__arg2)); if (unlikely(!__pyx_k_tuple_90)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_90);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_90));
  __pyx_k_codeobj_91 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_87, __pyx_n_s__get_scheduler_value, 177, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_91)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":192
 * # Matches a string of the type ... Create is order to find
 * # creations commands. It it's the case, returns the neuron name
 * def returnNeuronName(cmd):             # <<<<<<<<<<<<<<
 *     m = re.search('^{ /(.+?) .*Create }.*$', cmd)
 *     if hasattr(m, 'group'):
 */
  __pyx_k_tuple_92 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__cmd), ((PyObject *)__pyx_n_s__m)); if (unlikely(!__pyx_k_tuple_92)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_92);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_92));
  __pyx_k_codeobj_93 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_87, __pyx_n_s__returnNeuronName, 192, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_93)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":200
 * 
 * # Loads the list of the neuron names contained in the cython_models folder.
 * def getDynamicNeuronsName():             # <<<<<<<<<<<<<<
 *     listSo = listdir(spFct.getModelsFolder())
 *     return [so[0:len(so) - 3] for so in listSo if ".so" in so]
 */
  __pyx_k_tuple_94 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__listSo), ((PyObject *)__pyx_n_s__so)); if (unlikely(!__pyx_k_tuple_94)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_94);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_94));
  __pyx_k_codeobj_95 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_87, __pyx_n_s_9, 200, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_95)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":207
 * # Loads a new neuron type based on the name. It implies a file called
 * # <name>.so is present is the cython_models folder
 * def loadNewNeuron(n):             # <<<<<<<<<<<<<<
 *     if not loadedNeurons.has_key(n):
 *         try:
 */
  __pyx_k_tuple_96 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__n), ((PyObject *)__pyx_n_s__libc)); if (unlikely(!__pyx_k_tuple_96)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_96);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_96));
  __pyx_k_codeobj_97 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_87, __pyx_n_s__loadNewNeuron, 207, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_97)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":222
 * # this method is called at every execution of the cynest.Create() method and seeks for dynamic neurons.
 * #If the neuron is dynamic, it is loaded for further utilization
 * def processNeuronCreation(cmd):             # <<<<<<<<<<<<<<
 *     n = returnNeuronName(cmd)
 *     if n is not "":
 */
  __pyx_k_tuple_98 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__cmd), ((PyObject *)__pyx_n_s__n), ((PyObject *)__pyx_n_s__nList)); if (unlikely(!__pyx_k_tuple_98)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_98);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_98));
  __pyx_k_codeobj_99 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_87, __pyx_n_s_33, 222, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_99)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":3
 * import re
 * 
 * cdef bytes invalid_cmd = "<+*-_Invalid Command_-*+>".encode('UTF-8')             # <<<<<<<<<<<<<<
 * cdef bytes composed_protected_cmd = "<+*-_Composed Protected Command_-*+>".encode('UTF-8')
 * cdef bytes composed_unprotected_cmd = "<+*-_Composed Unprotected Command_-*+>".encode('UTF-8')
 */
  __pyx_k_tuple_101 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_101)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_101);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_101));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":4
 * 
 * cdef bytes invalid_cmd = "<+*-_Invalid Command_-*+>".encode('UTF-8')
 * cdef bytes composed_protected_cmd = "<+*-_Composed Protected Command_-*+>".encode('UTF-8')             # <<<<<<<<<<<<<<
 * cdef bytes composed_unprotected_cmd = "<+*-_Composed Unprotected Command_-*+>".encode('UTF-8')
 * 
 */
  __pyx_k_tuple_103 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_103)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_103);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_103));

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":5
 * cdef bytes invalid_cmd = "<+*-_Invalid Command_-*+>".encode('UTF-8')
 * cdef bytes composed_protected_cmd = "<+*-_Composed Protected Command_-*+>".encode('UTF-8')
 * cdef bytes composed_unprotected_cmd = "<+*-_Composed Unprotected Command_-*+>".encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * cdef class SLIDataContainer:
 */
  __pyx_k_tuple_105 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_105)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_105);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_105));

  /* "cynest/kernel.pyx":31
 * 
 * 
 * def cynest_signal_handler(signal,frame):             # <<<<<<<<<<<<<<
 *     raise KeyboardInterrupt()
 * 
 */
  __pyx_k_tuple_106 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__signal), ((PyObject *)__pyx_n_s__frame)); if (unlikely(!__pyx_k_tuple_106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_106);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_106));
  __pyx_k_codeobj_107 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_81, __pyx_n_s_29, 31, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initkernel(void); /*proto*/
PyMODINIT_FUNC initkernel(void)
#else
PyMODINIT_FUNC PyInit_kernel(void); /*proto*/
PyMODINIT_FUNC PyInit_kernel(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_kernel(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("kernel"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "cynest.kernel")) {
      if (unlikely(PyDict_SetItemString(modules, "cynest.kernel", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_cynest__kernel) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_6cynest_6kernel_converter = ((struct __pyx_obj_6cynest_6kernel_DataConverter *)Py_None); Py_INCREF(Py_None);
  __pyx_v_6cynest_6kernel_spFct = ((struct __pyx_obj_6cynest_6kernel_SpecialFunctions *)Py_None); Py_INCREF(Py_None);
  __pyx_v_6cynest_6kernel_stdParams = Py_None; Py_INCREF(Py_None);
  __pyx_v_6cynest_6kernel_invalid_cmd = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6cynest_6kernel_composed_protected_cmd = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6cynest_6kernel_composed_unprotected_cmd = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&PyTokenType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyToken", (PyObject *)&PyTokenType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cynest_6kernel_PyToken = &PyTokenType;
  __pyx_vtabptr_6cynest_6kernel_DataConverter = &__pyx_vtable_6cynest_6kernel_DataConverter;
  __pyx_vtable_6cynest_6kernel_DataConverter.datumToObject = (PyObject *(*)(struct __pyx_obj_6cynest_6kernel_DataConverter *, Datum *))__pyx_f_6cynest_6kernel_13DataConverter_datumToObject;
  __pyx_vtable_6cynest_6kernel_DataConverter.objectToDatum = (Datum *(*)(struct __pyx_obj_6cynest_6kernel_DataConverter *, PyObject *))__pyx_f_6cynest_6kernel_13DataConverter_objectToDatum;
  __pyx_vtable_6cynest_6kernel_DataConverter.updateDictionary = (void (*)(struct __pyx_obj_6cynest_6kernel_DataConverter *, Datum *, Datum *))__pyx_f_6cynest_6kernel_13DataConverter_updateDictionary;
  if (PyType_Ready(&__pyx_type_6cynest_6kernel_DataConverter) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_6cynest_6kernel_DataConverter.tp_dict, __pyx_vtabptr_6cynest_6kernel_DataConverter) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "DataConverter", (PyObject *)&__pyx_type_6cynest_6kernel_DataConverter) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cynest_6kernel_DataConverter = &__pyx_type_6cynest_6kernel_DataConverter;
  __pyx_vtabptr_6cynest_6kernel_SpecialFunctions = &__pyx_vtable_6cynest_6kernel_SpecialFunctions;
  __pyx_vtable_6cynest_6kernel_SpecialFunctions.get_ms = (double (*)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *, int, long, double))__pyx_f_6cynest_6kernel_16SpecialFunctions_get_ms;
  __pyx_vtable_6cynest_6kernel_SpecialFunctions.get_tics_or_steps = (long (*)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *, int, int, long, double))__pyx_f_6cynest_6kernel_16SpecialFunctions_get_tics_or_steps;
  __pyx_vtable_6cynest_6kernel_SpecialFunctions.get_scheduler_value = (unsigned int (*)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *, int, unsigned int))__pyx_f_6cynest_6kernel_16SpecialFunctions_get_scheduler_value;
  __pyx_vtable_6cynest_6kernel_SpecialFunctions.setModelsFolder = (void (*)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *, std::string))__pyx_f_6cynest_6kernel_16SpecialFunctions_setModelsFolder;
  __pyx_vtable_6cynest_6kernel_SpecialFunctions.getModelsFolder = (std::string (*)(struct __pyx_obj_6cynest_6kernel_SpecialFunctions *))__pyx_f_6cynest_6kernel_16SpecialFunctions_getModelsFolder;
  if (PyType_Ready(&__pyx_type_6cynest_6kernel_SpecialFunctions) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_6cynest_6kernel_SpecialFunctions.tp_dict, __pyx_vtabptr_6cynest_6kernel_SpecialFunctions) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SpecialFunctions", (PyObject *)&__pyx_type_6cynest_6kernel_SpecialFunctions) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cynest_6kernel_SpecialFunctions = &__pyx_type_6cynest_6kernel_SpecialFunctions;
  __pyx_vtabptr_6cynest_6kernel_StandardParams = &__pyx_vtable_6cynest_6kernel_StandardParams;
  __pyx_vtable_6cynest_6kernel_StandardParams.setStdVars = (void (*)(struct __pyx_obj_6cynest_6kernel_StandardParams *, long *, double *, double *, double *, long *))__pyx_f_6cynest_6kernel_14StandardParams_setStdVars;
  if (PyType_Ready(&__pyx_type_6cynest_6kernel_StandardParams) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_6cynest_6kernel_StandardParams.tp_dict, __pyx_vtabptr_6cynest_6kernel_StandardParams) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "StandardParams", (PyObject *)&__pyx_type_6cynest_6kernel_StandardParams) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cynest_6kernel_StandardParams = &__pyx_type_6cynest_6kernel_StandardParams;
  __pyx_vtabptr_6cynest_6kernel_CythonEntry = &__pyx_vtable_6cynest_6kernel_CythonEntry;
  __pyx_vtable_6cynest_6kernel_CythonEntry.putInit = (void (*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *))__pyx_f_6cynest_6kernel_11CythonEntry_putInit;
  __pyx_vtable_6cynest_6kernel_CythonEntry.getInit = (void *(*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *))__pyx_f_6cynest_6kernel_11CythonEntry_getInit;
  __pyx_vtable_6cynest_6kernel_CythonEntry.putCalibrate = (void (*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *))__pyx_f_6cynest_6kernel_11CythonEntry_putCalibrate;
  __pyx_vtable_6cynest_6kernel_CythonEntry.getCalibrate = (void *(*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *))__pyx_f_6cynest_6kernel_11CythonEntry_getCalibrate;
  __pyx_vtable_6cynest_6kernel_CythonEntry.putUpdate = (void (*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *))__pyx_f_6cynest_6kernel_11CythonEntry_putUpdate;
  __pyx_vtable_6cynest_6kernel_CythonEntry.getUpdate = (void *(*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *))__pyx_f_6cynest_6kernel_11CythonEntry_getUpdate;
  __pyx_vtable_6cynest_6kernel_CythonEntry.putSetStatus = (void (*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *))__pyx_f_6cynest_6kernel_11CythonEntry_putSetStatus;
  __pyx_vtable_6cynest_6kernel_CythonEntry.getSetStatus = (void *(*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *))__pyx_f_6cynest_6kernel_11CythonEntry_getSetStatus;
  __pyx_vtable_6cynest_6kernel_CythonEntry.putGetStatus = (void (*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *))__pyx_f_6cynest_6kernel_11CythonEntry_putGetStatus;
  __pyx_vtable_6cynest_6kernel_CythonEntry.getGetStatus = (void *(*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *))__pyx_f_6cynest_6kernel_11CythonEntry_getGetStatus;
  __pyx_vtable_6cynest_6kernel_CythonEntry.putStdVars = (void (*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *))__pyx_f_6cynest_6kernel_11CythonEntry_putStdVars;
  __pyx_vtable_6cynest_6kernel_CythonEntry.getStdVars = (void *(*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *))__pyx_f_6cynest_6kernel_11CythonEntry_getStdVars;
  __pyx_vtable_6cynest_6kernel_CythonEntry.putDestroy = (void (*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, void *))__pyx_f_6cynest_6kernel_11CythonEntry_putDestroy;
  __pyx_vtable_6cynest_6kernel_CythonEntry.getDestroy = (void *(*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *))__pyx_f_6cynest_6kernel_11CythonEntry_getDestroy;
  __pyx_vtable_6cynest_6kernel_CythonEntry.registerNeurons = (void (*)(struct __pyx_obj_6cynest_6kernel_CythonEntry *, std::string))__pyx_f_6cynest_6kernel_11CythonEntry_registerNeurons;
  if (PyType_Ready(&__pyx_type_6cynest_6kernel_CythonEntry) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_6cynest_6kernel_CythonEntry.tp_dict, __pyx_vtabptr_6cynest_6kernel_CythonEntry) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CythonEntry", (PyObject *)&__pyx_type_6cynest_6kernel_CythonEntry) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cynest_6kernel_CythonEntry = &__pyx_type_6cynest_6kernel_CythonEntry;
  __pyx_vtabptr_6cynest_6kernel_SLIDataContainer = &__pyx_vtable_6cynest_6kernel_SLIDataContainer;
  __pyx_vtable_6cynest_6kernel_SLIDataContainer.initialize = (PyObject *(*)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, NESTEngine *))__pyx_f_6cynest_6kernel_16SLIDataContainer_initialize;
  __pyx_vtable_6cynest_6kernel_SLIDataContainer.generate_func_pytoken = (struct PyToken *(*)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *))__pyx_f_6cynest_6kernel_16SLIDataContainer_generate_func_pytoken;
  __pyx_vtable_6cynest_6kernel_SLIDataContainer.generate_arg_pytoken = (struct PyToken *(*)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *))__pyx_f_6cynest_6kernel_16SLIDataContainer_generate_arg_pytoken;
  __pyx_vtable_6cynest_6kernel_SLIDataContainer.add_command = (int (*)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *))__pyx_f_6cynest_6kernel_16SLIDataContainer_add_command;
  __pyx_vtable_6cynest_6kernel_SLIDataContainer.get_pytoken = (struct PyToken *(*)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *))__pyx_f_6cynest_6kernel_16SLIDataContainer_get_pytoken;
  __pyx_vtable_6cynest_6kernel_SLIDataContainer.run = (PyObject *(*)(struct __pyx_obj_6cynest_6kernel_SLIDataContainer *, PyObject *))__pyx_f_6cynest_6kernel_16SLIDataContainer_run;
  if (PyType_Ready(&__pyx_type_6cynest_6kernel_SLIDataContainer) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_6cynest_6kernel_SLIDataContainer.tp_dict, __pyx_vtabptr_6cynest_6kernel_SLIDataContainer) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SLIDataContainer", (PyObject *)&__pyx_type_6cynest_6kernel_SLIDataContainer) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cynest_6kernel_SLIDataContainer = &__pyx_type_6cynest_6kernel_SLIDataContainer;
  __pyx_vtabptr_6cynest_6kernel_NESTEngine = &__pyx_vtable_6cynest_6kernel_NESTEngine;
  __pyx_vtable_6cynest_6kernel_NESTEngine.run_pytoken = (PyObject *(*)(struct __pyx_obj_6cynest_6kernel_NESTEngine *, struct PyToken *, int __pyx_skip_dispatch))__pyx_f_6cynest_6kernel_10NESTEngine_run_pytoken;
  __pyx_vtable_6cynest_6kernel_NESTEngine.push_pytoken = (PyObject *(*)(struct __pyx_obj_6cynest_6kernel_NESTEngine *, struct PyToken *, int __pyx_skip_dispatch))__pyx_f_6cynest_6kernel_10NESTEngine_push_pytoken;
  __pyx_vtable_6cynest_6kernel_NESTEngine.data_connect2 = (PyObject *(*)(struct __pyx_obj_6cynest_6kernel_NESTEngine *, PyObject *, PyObject *, std::string, int __pyx_skip_dispatch))__pyx_f_6cynest_6kernel_10NESTEngine_data_connect2;
  if (PyType_Ready(&__pyx_type_6cynest_6kernel_NESTEngine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_6cynest_6kernel_NESTEngine.tp_dict, __pyx_vtabptr_6cynest_6kernel_NESTEngine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "NESTEngine", (PyObject *)&__pyx_type_6cynest_6kernel_NESTEngine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cynest_6kernel_NESTEngine = &__pyx_type_6cynest_6kernel_NESTEngine;
  if (PyType_Ready(&__pyx_type_6cynest_6kernel_NameDatum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "NameDatum", (PyObject *)&__pyx_type_6cynest_6kernel_NameDatum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6cynest_6kernel_NameDatum = &__pyx_type_6cynest_6kernel_NameDatum;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "cynest/kernel.pyx":6
 * cimport cpython # we need this for the unicode UTF-8 conversion
 * 
 * import signal             # <<<<<<<<<<<<<<
 * 
 * class NESTError(Exception):
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__signal), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__signal, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cynest/kernel.pyx":8
 * import signal
 * 
 * class NESTError(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, msg) :
 *         Exception.__init__(self, msg)
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "cynest/kernel.pyx":9
 * 
 * class NESTError(Exception):
 *     def __init__(self, msg) :             # <<<<<<<<<<<<<<
 *         Exception.__init__(self, msg)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6cynest_6kernel_9NESTError_1__init__, 0, __pyx_n_s_82, NULL, __pyx_n_s_83, ((PyObject *)__pyx_k_codeobj_80)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cynest/kernel.pyx":8
 * import signal
 * 
 * class NESTError(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, msg) :
 *         Exception.__init__(self, msg)
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s__NESTError, __pyx_n_s__NESTError, __pyx_n_s_83); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__NESTError, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":1
 * import sys             # <<<<<<<<<<<<<<
 * import re
 * import os
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__sys), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":2
 * import sys
 * import re             # <<<<<<<<<<<<<<
 * import os
 * import errno
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__re), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__re, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":3
 * import sys
 * import re
 * import os             # <<<<<<<<<<<<<<
 * import errno
 * from os import listdir
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":4
 * import re
 * import os
 * import errno             # <<<<<<<<<<<<<<
 * from os import listdir
 * from ctypes import *
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__errno), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__errno, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":5
 * import os
 * import errno
 * from os import listdir             # <<<<<<<<<<<<<<
 * from ctypes import *
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__listdir));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__listdir));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__listdir));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s__os), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__listdir);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__listdir);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__listdir, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":6
 * import errno
 * from os import listdir
 * from ctypes import *             # <<<<<<<<<<<<<<
 * 
 * # begin of class wrappers
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_n_s_84));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s_84));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_84));
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__ctypes), ((PyObject *)__pyx_t_3), -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (__pyx_import_star(__pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":145
 * 
 * # Global objects
 * cdef DataConverter converter = DataConverter()             # <<<<<<<<<<<<<<
 * loadedNeurons = {}
 * cdef SpecialFunctions spFct = SpecialFunctions()
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_DataConverter)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6cynest_6kernel_converter));
  __Pyx_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_converter));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_v_6cynest_6kernel_converter = ((struct __pyx_obj_6cynest_6kernel_DataConverter *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":146
 * # Global objects
 * cdef DataConverter converter = DataConverter()
 * loadedNeurons = {}             # <<<<<<<<<<<<<<
 * cdef SpecialFunctions spFct = SpecialFunctions()
 * cdef stdParams = {}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__loadedNeurons, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":147
 * cdef DataConverter converter = DataConverter()
 * loadedNeurons = {}
 * cdef SpecialFunctions spFct = SpecialFunctions()             # <<<<<<<<<<<<<<
 * cdef stdParams = {}
 * 
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6cynest_6kernel_SpecialFunctions)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6cynest_6kernel_spFct));
  __Pyx_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_spFct));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_v_6cynest_6kernel_spFct = ((struct __pyx_obj_6cynest_6kernel_SpecialFunctions *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":148
 * loadedNeurons = {}
 * cdef SpecialFunctions spFct = SpecialFunctions()
 * cdef stdParams = {}             # <<<<<<<<<<<<<<
 * 
 * # This method tries to find the Cython_models folder based on
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_XGOTREF(__pyx_v_6cynest_6kernel_stdParams);
  __Pyx_DECREF(__pyx_v_6cynest_6kernel_stdParams);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_v_6cynest_6kernel_stdParams = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":171
 * 
 * # Special Functions helpers (will point to the good C++ function)
 * def get_ms(arg1, arg2, arg3):             # <<<<<<<<<<<<<<
 *     return spFct.get_ms(arg1, arg2, arg3)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6cynest_6kernel_1get_ms, NULL, __pyx_n_s_83); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_ms, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":174
 *     return spFct.get_ms(arg1, arg2, arg3)
 * 
 * def get_tics_or_steps(arg1, arg2, arg3, arg4):             # <<<<<<<<<<<<<<
 *     return spFct.get_tics_or_steps(arg1, arg2, arg3, arg4)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6cynest_6kernel_3get_tics_or_steps, NULL, __pyx_n_s_83); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_tics_or_steps, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":177
 *     return spFct.get_tics_or_steps(arg1, arg2, arg3, arg4)
 * 
 * def get_scheduler_value(arg1, arg2):             # <<<<<<<<<<<<<<
 *     return spFct.get_scheduler_value(arg1, arg2)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6cynest_6kernel_5get_scheduler_value, NULL, __pyx_n_s_83); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_scheduler_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":181
 * 
 * 
 * GETMSFUNC = CFUNCTYPE(c_double, c_int, c_long, c_double)             # <<<<<<<<<<<<<<
 * GETTICSORSTEPSFUNC = CFUNCTYPE(c_long, c_int, c_int, c_long, c_double)
 * GETSCHEDULERVALUE = CFUNCTYPE(c_uint, c_int, c_uint)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__CFUNCTYPE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_double); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_int); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_long); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_double); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__GETMSFUNC, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":182
 * 
 * GETMSFUNC = CFUNCTYPE(c_double, c_int, c_long, c_double)
 * GETTICSORSTEPSFUNC = CFUNCTYPE(c_long, c_int, c_int, c_long, c_double)             # <<<<<<<<<<<<<<
 * GETSCHEDULERVALUE = CFUNCTYPE(c_uint, c_int, c_uint)
 * getmsFCT = GETMSFUNC(get_ms)
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__CFUNCTYPE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_long); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_int); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_int); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_long); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_double); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_6 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__GETTICSORSTEPSFUNC, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":183
 * GETMSFUNC = CFUNCTYPE(c_double, c_int, c_long, c_double)
 * GETTICSORSTEPSFUNC = CFUNCTYPE(c_long, c_int, c_int, c_long, c_double)
 * GETSCHEDULERVALUE = CFUNCTYPE(c_uint, c_int, c_uint)             # <<<<<<<<<<<<<<
 * getmsFCT = GETMSFUNC(get_ms)
 * getticsorstepsFCT = GETTICSORSTEPSFUNC(get_tics_or_steps)
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__CFUNCTYPE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_uint); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_uint); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_7 = 0;
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__GETSCHEDULERVALUE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":184
 * GETTICSORSTEPSFUNC = CFUNCTYPE(c_long, c_int, c_int, c_long, c_double)
 * GETSCHEDULERVALUE = CFUNCTYPE(c_uint, c_int, c_uint)
 * getmsFCT = GETMSFUNC(get_ms)             # <<<<<<<<<<<<<<
 * getticsorstepsFCT = GETTICSORSTEPSFUNC(get_tics_or_steps)
 * getschedulervalueFCT = GETSCHEDULERVALUE(get_scheduler_value)
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__GETMSFUNC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__get_ms); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__getmsFCT, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":185
 * GETSCHEDULERVALUE = CFUNCTYPE(c_uint, c_int, c_uint)
 * getmsFCT = GETMSFUNC(get_ms)
 * getticsorstepsFCT = GETTICSORSTEPSFUNC(get_tics_or_steps)             # <<<<<<<<<<<<<<
 * getschedulervalueFCT = GETSCHEDULERVALUE(get_scheduler_value)
 * # End of Special Function helpers
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__GETTICSORSTEPSFUNC); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__get_tics_or_steps); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__getticsorstepsFCT, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":186
 * getmsFCT = GETMSFUNC(get_ms)
 * getticsorstepsFCT = GETTICSORSTEPSFUNC(get_tics_or_steps)
 * getschedulervalueFCT = GETSCHEDULERVALUE(get_scheduler_value)             # <<<<<<<<<<<<<<
 * # End of Special Function helpers
 * 
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__GETSCHEDULERVALUE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__get_scheduler_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_8, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":192
 * # Matches a string of the type ... Create is order to find
 * # creations commands. It it's the case, returns the neuron name
 * def returnNeuronName(cmd):             # <<<<<<<<<<<<<<
 *     m = re.search('^{ /(.+?) .*Create }.*$', cmd)
 *     if hasattr(m, 'group'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6cynest_6kernel_7returnNeuronName, NULL, __pyx_n_s_83); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__returnNeuronName, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":200
 * 
 * # Loads the list of the neuron names contained in the cython_models folder.
 * def getDynamicNeuronsName():             # <<<<<<<<<<<<<<
 *     listSo = listdir(spFct.getModelsFolder())
 *     return [so[0:len(so) - 3] for so in listSo if ".so" in so]
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6cynest_6kernel_9getDynamicNeuronsName, NULL, __pyx_n_s_83); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_9, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":207
 * # Loads a new neuron type based on the name. It implies a file called
 * # <name>.so is present is the cython_models folder
 * def loadNewNeuron(n):             # <<<<<<<<<<<<<<
 *     if not loadedNeurons.has_key(n):
 *         try:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6cynest_6kernel_11loadNewNeuron, NULL, __pyx_n_s_83); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__loadNewNeuron, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":222
 * # this method is called at every execution of the cynest.Create() method and seeks for dynamic neurons.
 * #If the neuron is dynamic, it is loaded for further utilization
 * def processNeuronCreation(cmd):             # <<<<<<<<<<<<<<
 *     n = returnNeuronName(cmd)
 *     if n is not "":
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6cynest_6kernel_13processNeuronCreation, NULL, __pyx_n_s_83); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_33, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":248
 * 
 * # Pointers used to store the address of Standard Parameters passed to the cython neuron
 * sI = c_long()             # <<<<<<<<<<<<<<
 * isD = c_double()
 * esD = c_double()
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_long); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sI, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":249
 * # Pointers used to store the address of Standard Parameters passed to the cython neuron
 * sI = c_long()
 * isD = c_double()             # <<<<<<<<<<<<<<
 * esD = c_double()
 * cD = c_double()
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_double); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__isD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":250
 * sI = c_long()
 * isD = c_double()
 * esD = c_double()             # <<<<<<<<<<<<<<
 * cD = c_double()
 * lI = c_long()
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_double); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__esD, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":251
 * isD = c_double()
 * esD = c_double()
 * cD = c_double()             # <<<<<<<<<<<<<<
 * lI = c_long()
 * sIR = byref(sI)
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_double); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__cD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":252
 * esD = c_double()
 * cD = c_double()
 * lI = c_long()             # <<<<<<<<<<<<<<
 * sIR = byref(sI)
 * isDR = byref(isD)
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__c_long); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__lI, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":253
 * cD = c_double()
 * lI = c_long()
 * sIR = byref(sI)             # <<<<<<<<<<<<<<
 * isDR = byref(isD)
 * esDR = byref(esD)
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__byref); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sI); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sIR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":254
 * lI = c_long()
 * sIR = byref(sI)
 * isDR = byref(isD)             # <<<<<<<<<<<<<<
 * esDR = byref(esD)
 * cDR = byref(cD)
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__byref); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__isD); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__isDR, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":255
 * sIR = byref(sI)
 * isDR = byref(isD)
 * esDR = byref(esD)             # <<<<<<<<<<<<<<
 * cDR = byref(cD)
 * lIR = byref(lI)
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__byref); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__esD); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__esDR, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":256
 * isDR = byref(isD)
 * esDR = byref(esD)
 * cDR = byref(cD)             # <<<<<<<<<<<<<<
 * lIR = byref(lI)
 * 
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__byref); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__cD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__cDR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/dynamicneuronssync.pyx":257
 * esDR = byref(esD)
 * cDR = byref(cD)
 * lIR = byref(lI)             # <<<<<<<<<<<<<<
 * 
 * cdef void cUpdate(string nName, int neuronID) with gil:
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__byref); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__lI); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__lIR, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":1
 * import re             # <<<<<<<<<<<<<<
 * 
 * cdef bytes invalid_cmd = "<+*-_Invalid Command_-*+>".encode('UTF-8')
 */
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s__re), 0, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__re, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":3
 * import re
 * 
 * cdef bytes invalid_cmd = "<+*-_Invalid Command_-*+>".encode('UTF-8')             # <<<<<<<<<<<<<<
 * cdef bytes composed_protected_cmd = "<+*-_Composed Protected Command_-*+>".encode('UTF-8')
 * cdef bytes composed_unprotected_cmd = "<+*-_Composed Unprotected Command_-*+>".encode('UTF-8')
 */
  __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_100), __pyx_n_s__encode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_101), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6cynest_6kernel_invalid_cmd));
  __Pyx_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_invalid_cmd));
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_v_6cynest_6kernel_invalid_cmd = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":4
 * 
 * cdef bytes invalid_cmd = "<+*-_Invalid Command_-*+>".encode('UTF-8')
 * cdef bytes composed_protected_cmd = "<+*-_Composed Protected Command_-*+>".encode('UTF-8')             # <<<<<<<<<<<<<<
 * cdef bytes composed_unprotected_cmd = "<+*-_Composed Unprotected Command_-*+>".encode('UTF-8')
 * 
 */
  __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_102), __pyx_n_s__encode); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_k_tuple_103), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6cynest_6kernel_composed_protected_cmd));
  __Pyx_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_composed_protected_cmd));
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_v_6cynest_6kernel_composed_protected_cmd = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/jonny/Programs/nest/nest-cynest/cynest/datamanager.pyx":5
 * cdef bytes invalid_cmd = "<+*-_Invalid Command_-*+>".encode('UTF-8')
 * cdef bytes composed_protected_cmd = "<+*-_Composed Protected Command_-*+>".encode('UTF-8')
 * cdef bytes composed_unprotected_cmd = "<+*-_Composed Unprotected Command_-*+>".encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * cdef class SLIDataContainer:
 */
  __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_104), __pyx_n_s__encode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_105), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6cynest_6kernel_composed_unprotected_cmd));
  __Pyx_DECREF(((PyObject *)__pyx_v_6cynest_6kernel_composed_unprotected_cmd));
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_v_6cynest_6kernel_composed_unprotected_cmd = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cynest/kernel.pyx":27
 * include "datamanager.pyx"
 * 
 * sli_func = None             # <<<<<<<<<<<<<<
 * broadcast = None
 * 
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sli_func, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cynest/kernel.pyx":28
 * 
 * sli_func = None
 * broadcast = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__broadcast, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cynest/kernel.pyx":31
 * 
 * 
 * def cynest_signal_handler(signal,frame):             # <<<<<<<<<<<<<<
 *     raise KeyboardInterrupt()
 * 
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_6cynest_6kernel_15cynest_signal_handler, NULL, __pyx_n_s_83); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_29, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cynest/kernel.pyx":1
 * # Cython wrapper for the pynest functions.             # <<<<<<<<<<<<<<
 * from libcpp.string cimport string
 * from libcpp.vector cimport vector
 */
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

  /* "vector.from_py":42
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    __Pyx_AddTraceback("init cynest.kernel", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cynest.kernel");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
        goto bad;
    #endif
    Py_INCREF(local_type);
    Py_INCREF(local_value);
    Py_INCREF(local_tb);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    /* Make sure tstate is in a consistent state when we XDECREF
       these objects (DECREF may run arbitrary code). */
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        }
        else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause && cause != Py_None) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import = 0;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = PyObject_GetAttrString(base, (char *)"__class__");
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *qualname, PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;
    if (PyDict_SetItemString(dict, "__module__", modname) < 0)
        return NULL;
    if (PyDict_SetItemString(dict, "__qualname__", qualname) < 0)
        return NULL;
    metaclass = PyDict_GetItemString(dict, "__metaclass__");
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL)
        value = Py_None; /* Mark as deleted */
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    PyObject* dict = PyModule_GetDict(__pyx_m);
    Py_XINCREF(dict);
    return dict;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op)
{
    if (op->defaults_tuple) {
        Py_INCREF(op->defaults_tuple);
        return op->defaults_tuple;
    }
    if (op->defaults_getter) {
        PyObject *res = op->defaults_getter((PyObject *) op);
        if (likely(res)) {
            Py_INCREF(res);
            op->defaults_tuple = res;
        }
        return res;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, 0, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    op->func_weakreflist = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_getter = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (m->func_weakreflist != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return PyMethod_New(func,
                            type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
    sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    (reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    __Pyx_CyFunction_Call,              /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
    (inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    0,                                  /*tp_iternext*/
    __pyx_CyFunction_methods,           /*tp_methods*/
    __pyx_CyFunction_members,           /*tp_members*/
    __pyx_CyFunction_getsets,           /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    __Pyx_CyFunction_descr_get,         /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    0,                                  /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    if (PyType_Ready(&__pyx_CyFunctionType_type) < 0)
        return -1;
    __pyx_CyFunctionType = &__pyx_CyFunctionType_type;
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, sizeof(size));
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name) {
#if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_ImportError, "cannot import name %.230s",
                 PyString_AsString(name));
#else
    PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
#endif
}

static PyObject* __Pyx_Globals(void) {
    Py_ssize_t i;
    PyObject *names = NULL;
    PyObject *globals = PyObject_GetAttrString(__pyx_m, "__dict__");
    if (!globals) {
        PyErr_SetString(PyExc_TypeError,
            "current module must have __dict__ attribute");
        goto bad;
    }
    names = PyObject_Dir(__pyx_m);
    if (!names)
        goto bad;
    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject* name = PySequence_GetItem(names, i);
        if (!name)
            goto bad;
#else
        PyObject* name = PyList_GET_ITEM(names, i);
#endif
        if (!PyDict_Contains(globals, name)) {
            PyObject* value = PyObject_GetAttr(__pyx_m, name);
            if (!value) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                goto bad;
            }
            if (PyDict_SetItem(globals, name, value) < 0) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                Py_DECREF(value);
                goto bad;
            }
        }
#if CYTHON_COMPILING_IN_PYPY
        Py_DECREF(name);
#endif
    }
    Py_DECREF(names);
    return globals;
bad:
    Py_XDECREF(names);
    Py_XDECREF(globals);
    return NULL;
}

static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject* o, PyObject* globals) {
    return __Pyx_PyExec3(o, globals, NULL);
}
static PyObject* __Pyx_PyExec3(PyObject* o, PyObject* globals, PyObject* locals) {
    PyObject* result;
    PyObject* s = 0;
    char *code = 0;
    if (!globals || globals == Py_None) {
        globals = PyModule_GetDict(__pyx_m);
        if (!globals)
            goto bad;
    } else if (!PyDict_Check(globals)) {
        PyErr_Format(PyExc_TypeError, "exec() arg 2 must be a dict, not %.100s",
                     globals->ob_type->tp_name);
        goto bad;
    }
    if (!locals || locals == Py_None) {
        locals = globals;
    }
    if (PyDict_GetItemString(globals, "__builtins__") == NULL) {
        PyDict_SetItemString(globals, "__builtins__", PyEval_GetBuiltins());
    }
    if (PyCode_Check(o)) {
        if (PyCode_GetNumFree((PyCodeObject *)o) > 0) {
            PyErr_SetString(PyExc_TypeError,
                "code object passed to exec() may not contain free variables");
            goto bad;
        }
        #if PY_VERSION_HEX < 0x030200B1
        result = PyEval_EvalCode((PyCodeObject *)o, globals, locals);
        #else
        result = PyEval_EvalCode(o, globals, locals);
        #endif
    } else {
        PyCompilerFlags cf;
        cf.cf_flags = 0;
        if (PyUnicode_Check(o)) {
            cf.cf_flags = PyCF_SOURCE_IS_UTF8;
            s = PyUnicode_AsUTF8String(o);
            if (!s) goto bad;
            o = s;
        #if PY_MAJOR_VERSION >= 3
        } else if (!PyBytes_Check(o)) {
        #else
        } else if (!PyString_Check(o)) {
        #endif
            PyErr_SetString(PyExc_TypeError,
                "exec: arg 1 must be string, bytes or code object");
            goto bad;
        }
        #if PY_MAJOR_VERSION >= 3
        code = PyBytes_AS_STRING(o);
        #else
        code = PyString_AS_STRING(o);
        #endif
        if (PyEval_MergeCompilerFlags(&cf)) {
            result = PyRun_StringFlags(code, Py_file_input, globals, locals, &cf);
        } else {
            result = PyRun_String(code, Py_file_input, globals, locals);
        }
        Py_XDECREF(s);
    }
    return result;
bad:
    Py_XDECREF(s);
    return 0;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
