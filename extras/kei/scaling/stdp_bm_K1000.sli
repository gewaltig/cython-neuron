/*
    brn_stdp_equilibrium.sli

    Copyright (C) 2004 The NEST Initiative                 
    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
 
    This file is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330,
    Boston, MA  02111-1307, USA.
*/

/*
   This script produces a balanced random network of 112500 neurons in
   which the excitatory-excitatory neurons exhibit STDP with
   multiplicative depression and power-law potentiation. A mutual
   equilibrium is obtained between the activity dynamics (low rate in
   asynchronous irregular regime) and the synaptic weight distribution
   (unimodal).

   This is the standard network investigated in:
   Spike-timing dependent plasticity in balanced random networks (2007)
   Abigail Morrison, Ad Aertsen, Markus Diesmann. Neural Computation 19(6)


*/
  
%%% PARAMETER SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% define all relevant parameters: changes should be made here
% all data is placed in the userdict dictionary

% parameters defined in param.conf.sli:
% nvp - number of virtual processes
% Tsim - total simulation time in ms
% recto - argument for /record_to variable of spike detectors
% path_name - path where all files will have to be written
% the file is usually created by a bash script
% (param.conf0128.sli) run

(param.conf.sli) run

% to log data
(logger.sli) run


/brunel_params
<<

  /virtual_processes nvp      % number of virtual processes to use
  /simtime Tsim ms        % simulated time 
  /dt         0.1 ms        % simulation step

  /scale scale def
  
  /NE 900 scale mul    % number of excitatory neurons
  /NI 225 scale mul    % number of inhibitory neurons

  % number of neurons to record spikes from
  /Nrec 100 

  /model_params
   <<
   % Set variables for iaf_psc_exp
    /E_L     0.0  mV  % Resting membrane potential [mV]
    /C_m   250.0  pF  % Capacity of the membrane [pF]
    /tau_m  10.0  ms  % Membrane time constant [ms]
    /t_ref 0.5  ms  % duration of refractory period [ms]
    /V_th   20.0  mV  % Threshold [mV]
    /V_reset 0.0  mV  % Reset Potential [mV]
    /tau_syn  0.32582722403722841 ms  % time const. postsynaptic excitatory currents [ms]
    /tau_minus 30.0 ms %time constant for STDP (depression)
    % V randomly initialized see below
   >> 

  /mean_potential 5.7 mV
  /sigma_potential 7.2 mV
 
  /plastic_synapses true

  /delay  1.5 ms         % synaptic delay, all connections [ms] 

   % synaptic strengths
  /JE 325.78288268410768 0.14 mul pA    %peak of EPSC

  /sigma_w 3.47 pA      %standard dev. of E->E synapses [pA]
  /g  -5.0 	
    
  /stdp_params
  <<
    /delay 1.5 ms
    /alpha  0.0513
    /lambda 0.1          %STDP step size
    /mu     0.4          %STDP weight dependence exponent (potentiation)
    /tau_plus 15.0       %time constant for potentiation
  >>
  
  /eta 1.685         %scaling of external stimulus
  /filestem path_name

>> def

% Here we resolve parameter dependencies, by making the independent
% values visible
brunel_params dup using
%<<
% /E_synapse_params
%  <<
%     /weight JE     % excitatory synaptic conductance
%  >> 
% 
%  /I_synapse_params
%  <<
%     /weight JE g mul   % inhibitory synaptic current [pA]
%  >> 
%>> SetStatus

% create one single random number generator    
rngdict /knuthlfg get 238 CreateRNG /myrng Set

% normal distribution to draw initial membrane potentials from
myrng rdevdict /normal get CreateRDV /normal_dv Set


%%% FUNCTION SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/BuildNetwork
{
  
  tic % start timer on construction    
  % set global kernel parameters
  0
  <<
     /total_num_virtual_procs virtual_processes
     /resolution  dt
     /overwrite_files true
  >> SetStatus

  /iaf_neuron    model_params    SetDefaults
  M_INFO (BuildNetwork)
  (Creating excitatory population.) message  % show message
  
  /iaf_neuron [NE] LayoutNetwork /E_net Set
  
  M_INFO (BuildNetwork)
  (Creating inhibitory population.) message  % show message
  /iaf_neuron [NI] LayoutNetwork /I_net Set

  % obtain array with GIDs of all excitatory neurons    
  /E_neurons E_net GetNodes def

  % obtain array with GIDs of all inhibitory neurons    
  /I_neurons I_net GetNodes def

  % all neurons    
  /allNeurons E_neurons I_neurons join def
 
  /N allNeurons length def

  /CE NE scale cvd div iround def %number of incoming excitatory connections
  /CI NI scale cvd div iround def %number of incomining inhibitory connections	

  M_INFO (BuildNetwork)
  (Configuring neuron parameters.) message
  allNeurons
  {
   %<< /V_m  normal_dv Random sigma_potential mul mean_potential add >> SetStatus
   << /V_m mean_potential >> SetStatus
  } forall

  M_INFO (BuildNetwork)
  (Creating excitatory stimulus generator.) message

  model_params using
  /nu_thresh V_th CE tau_m C_m div mul JE mul 1.0 exp mul tau_syn mul div def
  /nu_ext nu_thresh eta mul def
  endusing
    
  /E_stimulus /poisson_generator Create def 
  E_stimulus 
  <<
     /rate nu_ext CE mul 1000. mul
  >> SetStatus	 
  
  /I_stimulus /poisson_generator Create def  
  I_stimulus
  <<
     /rate nu_ext CE mul 1000. mul
  >> SetStatus
 
  M_INFO (BuildNetwork)
  (Creating excitatory spike detector.) message

  rtf true eq {
    /detector_label  filestem (/alpha_) join stdp_params /alpha get cvs join (_spikes) join def
    /E_detector /spike_detector Create def
    E_detector
    << 
    /withtime true 
    /withpath true
    /to_file true
    /label detector_label
    >> SetStatus
  } if

  hardware_memory_thisjob cvs ( # hard_mem_after_nodes ) join logger /log call
  memory_thisjob cvs ( # virt_mem_after_nodes) join logger /log call
 
  toc /BuildNodeTime Set
  mpi_rank cvs (] ) join (BuildNode time     : ) join  =only BuildNodeTime =only ( s) =

  BuildNodeTime cvs ( # build_time_nodes) join logger /log call
  
  tic

  
  % Create custom synapse types with appropriate values for
  % our excitatory and inhibitory connections
  /static_synapse << /delay delay >> SetDefaults
  /static_synapse /syn_std  CopyModel
  /static_synapse /syn_ex << /weight JE >> CopyModel
  /static_synapse /syn_in << /weight JE g mul >> CopyModel
      	
  stdp_params /weight JE put	
  /stdp_pl_synapse_hom stdp_params SetDefaults

  
  M_INFO (BuildNetwork)
  (Connecting stimulus generators.) message
  
  % Connect Poisson generator to neuron      
  E_stimulus E_neurons /syn_ex DivergentConnect
  I_stimulus I_neurons /syn_ex DivergentConnect

  /RandomConvergentConnect
  <<
	/allow_autapses false
	/allow_multapses true
  >> SetOptions

   M_INFO (BuildNetwork)
  (Connecting excitatory -> excitatory population.) message
  E_neurons
  {
    /target Set
    target GetStatus /local get
    {	
       E_neurons   % source population [we pick from this]
       target      % target neuron
       CE          % number of source neurons to pick
       plastic_synapses
       {
	/stdp_pl_synapse_hom
       }
       {
	 /syn_ex 
       } ifelse
       RandomConvergentConnect
    } if
  } bind forall

  M_INFO (BuildNetwork)
  (Connecting excitatory -> inhibitory population.) message

  I_neurons
  {
    /target Set
    target GetStatus /local get
    {
	E_neurons target CE /syn_ex RandomConvergentConnect
    } if
  } bind forall

  M_INFO (BuildNetwork)
  (Connecting inhibitory -> excitatory population.) message
  
  E_neurons
  {
    /target Set
    target GetStatus /local get	 
    {
       I_neurons target CI /syn_in RandomConvergentConnect
    } if
  } bind forall

  M_INFO (BuildNetwork)
  (Connecting inhibitory -> inhibitory population.) message
	
  I_neurons
  {
    /target Set
    target GetStatus /local get
    {
       I_neurons target CI /syn_in RandomConvergentConnect
    } if
  } bind forall

  rtf true eq 
  {
    M_INFO (BuildNetwork)
    (Connecting spike detectors.) message
    E_neurons Nrec Take E_detector /syn_std ConvergentConnect
  } if    

  % read out time used for building    
  toc /BuildEdgeTime Set
  mpi_rank cvs (] ) join (BuildEdge time     : ) join  =only BuildEdgeTime =only ( s) =
  
  BuildEdgeTime cvs ( # build_edge_time ) join logger /log call
  hardware_memory_thisjob cvs ( # hard_mem_after_edges) join logger /log call
  memory_thisjob cvs ( # virt_mem_after_edges) join logger /log call
  
 } def % end of buildnetwork

/RunSimulation
{
   % open log file
   log_file logger /init call

   ResetKernel
   statusdict /MPI_Rank known
    {
      /mpi_rank statusdict /MPI_Rank get def
    }
    {
      /mpi_rank 0 def   % serial version
    }
   ifelse  
  %stdp_params using

  hardware_memory_thisjob cvs ( # hard_mem_0) join logger /log call
  memory_thisjob cvs ( # virt_mem_0) join logger /log call

  BuildNetwork
  
  tic

  simtime Simulate	

  toc /SimCPUTime Set

  hardware_memory_thisjob cvs ( # hard_mem_after_sim) join logger /log call
  memory_thisjob cvs ( # virt_mem_after_sim) join logger /log call
  SimCPUTime cvs ( # sim_time)  join logger /log call
  
%(\nBRN STDP Equilibrium Simulation) =
  mpi_rank cvs (] ) join (Simulation time   : ) join  =only SimCPUTime   =only ( s\n) =

  logger /done call
} def

RunSimulation  